var searchIndex = JSON.parse('{\
"analysis_performance_exponential":{"doc":"","i":[[4,"SamplingMode","analysis_performance_exponential","",null,null],[13,"Poisson","","",0,null],[13,"Exponential","","",0,null],[3,"Options","","",null,null],[12,"seed","","",1,null],[12,"limit","","",1,null],[12,"delta_t","","",1,null],[12,"lambda","","",1,null],[12,"cuda","","",1,null],[12,"mode","","",1,null],[5,"try_from_str","","",null,[[["str",15]],[["f64",15],["error",3],["result",4],["tryfrom",8]]]],[5,"main","","",null,[[]]],[5,"main_cpu","","",null,[[["options",3]]]],[5,"main_gpu","","",null,[[["options",3]]]],[5,"sample_exponential_inter_event_times","","",null,[[["u128",15],["habitat",8],["turnoverrate",8],["primeablerng",8],["eventtimesampler",8],["indexedlocation",3]]]],[3,"UniformTurnoverRate","","",null,null],[12,"turnover_rate","","",2,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[],["bool",15]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[],["bool",15]]],[11,"__contracts_impl_backup_unchecked","","",2,[[]]],[11,"__contracts_impl_get_turnover_rate_at_location","","",2,[[["location",3]],["nonnegativef64",3]]]],"p":[[4,"SamplingMode"],[3,"Options"],[3,"UniformTurnoverRate"]]},\
"analysis_performance_exponential_kernel":{"doc":"","i":[],"p":[]},\
"analysis_performance_reporting":{"doc":"","i":[[0,"minimal_logger","analysis_performance_reporting","",null,null],[3,"MinimalLogger","analysis_performance_reporting::minimal_logger","",null,null],[4,"ReportingMode","analysis_performance_reporting","",null,null],[13,"ProgressOnly","","",0,null],[13,"ProgressSpeciation","","",0,null],[13,"ProgressSpeciationDispersal","","",0,null],[3,"Options","","",null,null],[12,"seed","","",1,null],[12,"radius","","",1,null],[12,"sigma","","",1,null],[12,"speciation","","",1,null],[12,"sample","","",1,null],[12,"mode","","",1,null],[5,"try_from_str","","",null,[[["str",15]],[["tryfrom",8],["f64",15],["result",4],["error",3]]]],[7,"MINIMAL_LOGGER","","",null,null],[5,"main","","",null,[[]]],[5,"simulate","","",null,[[["reporter",8],["options",3]]]],[11,"from","analysis_performance_reporting::minimal_logger","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","analysis_performance_reporting","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"enabled","analysis_performance_reporting::minimal_logger","",2,[[["metadata",3]],["bool",15]]],[11,"log","","",2,[[["record",3]]]],[11,"flush","","",2,[[]]],[11,"clap","analysis_performance_reporting","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[],["bool",15]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[],["bool",15]]]],"p":[[4,"ReportingMode"],[3,"Options"],[3,"MinimalLogger"]]},\
"analysis_rng_correlation":{"doc":"","i":[[0,"simulation","analysis_rng_correlation","",null,null],[0,"rng","analysis_rng_correlation::simulation","",null,null],[3,"InterceptingReporter","analysis_rng_correlation::simulation::rng","",null,null],[12,"inner","","",0,null],[12,"buffer","","",0,null],[12,"snd_last_reprime","","",0,null],[12,"last_reprime","","",0,null],[12,"snd_last_sequence_length","","",0,null],[12,"cmp_sequence_length","","",0,null],[12,"sequence_length","","",0,null],[11,"buffer","","",0,[[],["vecdeque",3]]],[3,"CorrelationSimulationRng","analysis_rng_correlation::simulation","",null,null],[12,"simulation","","",1,null],[12,"other_rngs_lineages","","",1,null],[4,"DispersalMode","analysis_rng_correlation","",null,null],[13,"NoDispersal","","",2,null],[13,"HighDispersal","","",2,null],[3,"Options","","",null,null],[12,"seed","","",3,null],[12,"limit","","",3,null],[12,"mode","","",3,null],[5,"main","","",null,[[]]],[5,"sample_random_streams","","",null,[[["u128",15],["rngcore",8]]]],[11,"from","analysis_rng_correlation::simulation::rng","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","analysis_rng_correlation::simulation","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","analysis_rng_correlation","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"clone","analysis_rng_correlation::simulation::rng","",0,[[],["interceptingreporter",3]]],[11,"clone","analysis_rng_correlation::simulation","",1,[[]]],[11,"fmt","analysis_rng_correlation::simulation::rng","",0,[[["formatter",3]],["result",6]]],[11,"fmt","analysis_rng_correlation::simulation","",1,[[["formatter",3]],["result",6]]],[11,"fmt","analysis_rng_correlation","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"clap","","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"clap","","",3,[[],["app",3]]],[11,"from_clap","","",3,[[["argmatches",3]]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"from_subcommand","","",2,[[],["option",4]]],[11,"is_subcommand","","",2,[[],["bool",15]]],[11,"augment_clap","","",3,[[["app",3]],["app",3]]],[11,"is_subcommand","","",3,[[],["bool",15]]],[11,"__contracts_impl_backup_unchecked","analysis_rng_correlation::simulation::rng","",0,[[]]],[11,"__contracts_impl_backup_unchecked","analysis_rng_correlation::simulation","",1,[[]]],[11,"from_seed","analysis_rng_correlation::simulation::rng","",0,[[]]],[11,"sample_u64","","",0,[[],["u64",15]]],[11,"from_seed","analysis_rng_correlation::simulation","",1,[[]]],[11,"sample_u64","","",1,[[],["u64",15]]],[11,"prime_with","analysis_rng_correlation::simulation::rng","",0,[[["u64",15]]]]],"p":[[3,"InterceptingReporter"],[3,"CorrelationSimulationRng"],[4,"DispersalMode"],[3,"Options"]]},\
"analysis_rng_hash":{"doc":"","i":[[4,"HashMode","analysis_rng_hash","",null,null],[13,"Update","","",0,null],[13,"Prime","","",0,null],[3,"Options","","",null,null],[12,"seed","","",1,null],[12,"limit","","",1,null],[12,"raw_prime","","",1,null],[12,"raw_output","","",1,null],[12,"mode","","",1,null],[5,"main","","",null,[[],["result",6]]],[5,"test_update_hash","","",null,[[["bool",15],["u64",15]],["result",6]]],[5,"test_prime_hash","","",null,[[["bool",15],["u64",15]],["result",6]]],[5,"optional_undiffuse","","",null,[[["bool",15],["u64",15]],["u64",15]]],[5,"seahash_undiffuse","","",null,[[["u64",15]],["u64",15]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[],["bool",15]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[],["bool",15]]]],"p":[[4,"HashMode"],[3,"Options"]]},\
"analysis_rng_randomness":{"doc":"","i":[[0,"simulation","analysis_rng_randomness","",null,null],[0,"rng","analysis_rng_randomness::simulation","",null,null],[3,"InterceptingReporter","analysis_rng_randomness::simulation::rng","",null,null],[12,"inner","","",0,null],[12,"buffer","","",0,null],[12,"snd_last_reprime","","",0,null],[12,"last_reprime","","",0,null],[12,"snd_last_sequence_length","","",0,null],[12,"cmp_sequence_length","","",0,null],[12,"sequence_length","","",0,null],[11,"buffer","","",0,[[],["vecdeque",3]]],[3,"SimulationRng","analysis_rng_randomness::simulation","",null,null],[12,"simulation","","",1,null],[4,"GeneratorMode","analysis_rng_randomness","",null,null],[13,"Monolithic","","",2,null],[13,"Independent","","",2,null],[13,"IndependentSimulation","","",2,null],[13,"IndependentSimulationNoDispersal","","",2,null],[3,"Options","","",null,null],[12,"seed","","",3,null],[12,"limit","","",3,null],[12,"mode","","",3,null],[5,"try_parse_length","","",null,[[["str",15]],[["byteerror",4],["u128",15],["result",4]]]],[5,"main","","",null,[[],["result",6]]],[5,"produce_limited_randomness","","",null,[[["write",8],["rngcore",8],["u128",15]],["result",6]]],[5,"produce_unlimited_randomness","","",null,[[["write",8],["rngcore",8]],["result",6]]],[11,"from","analysis_rng_randomness::simulation::rng","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","analysis_rng_randomness::simulation","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","analysis_rng_randomness","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"clone","analysis_rng_randomness::simulation::rng","",0,[[],["interceptingreporter",3]]],[11,"clone","analysis_rng_randomness::simulation","",1,[[]]],[11,"fmt","analysis_rng_randomness::simulation::rng","",0,[[["formatter",3]],["result",6]]],[11,"fmt","analysis_rng_randomness::simulation","",1,[[["formatter",3]],["result",6]]],[11,"fmt","analysis_rng_randomness","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"clap","","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"clap","","",3,[[],["app",3]]],[11,"from_clap","","",3,[[["argmatches",3]]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"from_subcommand","","",2,[[],["option",4]]],[11,"is_subcommand","","",2,[[],["bool",15]]],[11,"augment_clap","","",3,[[["app",3]],["app",3]]],[11,"is_subcommand","","",3,[[],["bool",15]]],[11,"__contracts_impl_backup_unchecked","analysis_rng_randomness::simulation::rng","",0,[[]]],[11,"__contracts_impl_backup_unchecked","analysis_rng_randomness::simulation","",1,[[]]],[11,"from_seed","analysis_rng_randomness::simulation::rng","",0,[[]]],[11,"sample_u64","","",0,[[],["u64",15]]],[11,"from_seed","analysis_rng_randomness::simulation","",1,[[]]],[11,"sample_u64","","",1,[[],["u64",15]]],[11,"prime_with","analysis_rng_randomness::simulation::rng","",0,[[["u64",15]]]]],"p":[[3,"InterceptingReporter"],[3,"SimulationRng"],[4,"GeneratorMode"],[3,"Options"]]},\
"array2d":{"doc":"<code>Array2D</code> provides a fixed sized two-dimensional array. It …","i":[[3,"Array2D","array2d","A fixed sized two-dimensional array.",null,null],[12,"array","","",0,null],[12,"num_rows","","",0,null],[12,"num_columns","","",0,null],[3,"Array2DCudaRepresentation","","A fixed sized two-dimensional array.",null,null],[12,"array","","",1,null],[12,"num_rows","","",1,null],[12,"num_columns","","",1,null],[4,"Error","","An error that can arise during the use of an <code>Array2D</code>.",null,null],[13,"IndicesOutOfBounds","","The given indices were out of bounds.",2,null],[13,"IndexOutOfBounds","","The given index in row or column major order was out of …",2,null],[13,"DimensionMismatch","","The dimensions given did not match the elements provided",2,null],[13,"NotEnoughElements","","There were not enough elements to fill the array.",2,null],[11,"from_rows","","Creates a new <code>Array2D</code> from a slice of rows, each of which …",0,[[],[["result",4],["error",4]]]],[11,"from_columns","","Creates a new <code>Array2D</code> from a slice of columns, each of …",0,[[],[["result",4],["error",4]]]],[11,"from_row_major","","Creates a new <code>Array2D</code> from the given flat slice in row …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"from_column_major","","Creates a new <code>Array2D</code> from the given flat slice in column …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"filled_with","","Creates a new <code>Array2D</code> with the specified number of rows …",0,[[["usize",15]]]],[11,"fill_with","","Renamed to <code>filled_with</code>.",0,[[["usize",15]]]],[11,"filled_by_row_major","","Creates a new <code>Array2D</code> with the specified number of rows …",0,[[["usize",15]]]],[11,"filled_by_column_major","","Creates a new <code>Array2D</code> with the specified number of rows …",0,[[["usize",15]]]],[11,"from_iter_row_major","","Creates a new <code>Array2D</code> with the specified number of rows …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"from_iter_column_major","","Creates a new <code>Array2D</code> with the specified number of rows …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"num_rows","","The number of rows.",0,[[],["usize",15]]],[11,"num_columns","","The number of columns.",0,[[],["usize",15]]],[11,"num_elements","","The total number of elements, i.e. the product of <code>num_rows</code>…",0,[[],["usize",15]]],[11,"row_len","","The number of elements in each row, i.e. the number of …",0,[[],["usize",15]]],[11,"column_len","","The number of elements in each column, i.e. the number of …",0,[[],["usize",15]]],[11,"get","","Returns a reference to the element at the given <code>row</code> and …",0,[[["usize",15]],["option",4]]],[11,"get_row_major","","Returns a reference to the element at the given index in …",0,[[["usize",15]],["option",4]]],[11,"get_column_major","","Returns a reference to the element at the given index in …",0,[[["usize",15]],["option",4]]],[11,"get_mut","","Returns a mutable reference to the element at the given …",0,[[["usize",15]],["option",4]]],[11,"get_mut_row_major","","Returns a mutable reference to the element at the given …",0,[[["usize",15]],["option",4]]],[11,"get_mut_column_major","","Returns a mutable reference to the element at the given …",0,[[["usize",15]],["option",4]]],[11,"set","","Changes the element at given <code>row</code> and <code>column</code> to <code>element</code>. …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"set_row_major","","Changes the element at the given <code>index</code> to <code>element</code>, in row …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"set_column_major","","Changes the element at the given <code>index</code> to <code>element</code>, in …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"elements_row_major_iter","","Returns an <code>Iterator</code> over references to all elements in …",0,[[]]],[11,"elements_column_major_iter","","Returns an <code>Iterator</code> over references to all elements in …",0,[[]]],[11,"row_iter","","Returns an <code>Iterator</code> over references to all elements in …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"column_iter","","Returns an <code>Iterator</code> over references to all elements in …",0,[[["usize",15]],[["result",4],["error",4]]]],[11,"rows_iter","","Returns an <code>Iterator</code> over all rows. Each <code>Item</code> is itself …",0,[[]]],[11,"columns_iter","","Returns an <code>Iterator</code> over all columns. Each <code>Item</code> is itself …",0,[[]]],[11,"as_rows","","Collects the <code>Array2D</code> into a <code>Vec</code> of rows, each of which …",0,[[],[["vec",3],["vec",3]]]],[11,"as_columns","","Collects the <code>Array2D</code> into a <code>Vec</code> of columns, each of which …",0,[[],[["vec",3],["vec",3]]]],[11,"as_row_major","","Collects the <code>Array2D</code> into a <code>Vec</code> of elements in row major …",0,[[],["vec",3]]],[11,"into_row_major","","Converts the <code>Array2D</code> into a <code>Vec</code> of elements in row major …",0,[[],["vec",3]]],[11,"as_column_major","","Collects the <code>Array2D</code> into a <code>Vec</code> of elements in column …",0,[[],["vec",3]]],[11,"get_index","","",0,[[["usize",15]],[["usize",15],["option",4]]]],[5,"flatten","","",null,[[],[["clone",8],["vec",3]]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["array2d",3]],["bool",15]]],[11,"ne","","",0,[[["array2d",3]],["bool",15]]],[11,"eq","","",2,[[["error",4]],["bool",15]]],[11,"ne","","",2,[[["error",4]],["bool",15]]],[11,"index","","Returns the element at the given indices, given as …",0,[[]]],[11,"index_mut","","Returns a mutable version of the element at the given …",0,[[]]],[11,"clone","","",0,[[],["array2d",3]]],[11,"borrow_mut","","",0,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",0,[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]]]],"p":[[3,"Array2D"],[3,"Array2DCudaRepresentation"],[4,"Error"]]},\
"contracts":{"doc":"A crate implementing “Design by Contract” via …","i":[[0,"implementation","contracts","",null,null],[0,"codegen","contracts::implementation","",null,null],[3,"OldExpr","contracts::implementation::codegen","Substitution for <code>old()</code> expressions.",null,null],[12,"name","","Name of the variable binder.",0,null],[12,"expr","","Expression to be evaluated.",0,null],[5,"extract_old_calls","","Extract calls to the pseudo-function <code>old()</code> in …",null,[[],[["vec",3],["oldexpr",3]]]],[5,"get_assert_macro","","",null,[[["span",3],["contracttype",4],["contractmode",4]],[["ident",3],["option",4]]]],[5,"generate","","Generate the resulting code for this function by …",null,[[["funcwithcontracts",3],["vec",3],["oldexpr",3],["attribute",3],["vec",3]],["tokenstream",3]]],[0,"doc","contracts::implementation","",null,null],[5,"generate_attributes","contracts::implementation::doc","",null,[[],[["vec",3],["attribute",3]]]],[0,"ensures","contracts::implementation","",null,null],[5,"ensures","contracts::implementation::ensures","",null,[[["contractmode",4],["tokenstream",3]],["tokenstream",3]]],[0,"invariant","contracts::implementation","",null,null],[5,"invariant","contracts::implementation::invariant","",null,[[["contractmode",4],["tokenstream",3]],["tokenstream",3]]],[5,"invariant_fn","","",null,[[["itemfn",3],["contractmode",4],["tokenstream",3]],["tokenstream",3]]],[5,"invariant_impl","","Generate the token-stream for an <code>impl</code> block with a “…",null,[[["itemimpl",3],["contractmode",4],["tokenstream",3]],["tokenstream",3]]],[0,"parse","contracts::implementation","",null,null],[5,"parse_attributes","contracts::implementation::parse","Parse attributes into a list of expression and an …",null,[[["tokenstream",3]]]],[5,"rewrite","","",null,[[["vec",3],["tokentree",4]],["tokenstream",3]]],[5,"segment_input","","",null,[[["tokenstream",3]],[["vec",3],["vec",3]]]],[0,"requires","contracts::implementation","",null,null],[5,"requires","contracts::implementation::requires","",null,[[["contractmode",4],["tokenstream",3]],["tokenstream",3]]],[0,"traits","contracts::implementation","",null,null],[5,"contract_method_impl_name","contracts::implementation::traits","Name used for the “re-routed” method.",null,[[["str",15]],["string",3]]],[5,"contract_trait_item_trait","","Modifies a trait item in a way that it includes contracts.",null,[[["itemtrait",3],["tokenstream",3]],["tokenstream",3]]],[5,"contract_trait_item_impl","","Rename all methods inside an <code>impl</code> to use the “internal …",null,[[["itemimpl",3],["tokenstream",3]],["tokenstream",3]]],[4,"ContractMode","contracts::implementation","Checking-mode of a contract.",null,null],[13,"Always","","Always check contract",1,null],[13,"Disabled","","Never check contract",1,null],[13,"Debug","","Check contract only in debug builds",1,null],[13,"Test","","Check contract only in <code>#[cfg(test)]</code> configurations",1,null],[13,"LogOnly","","Check the contract and print information upon violation, …",1,null],[11,"name","","Return the prefix of attributes of <code>self</code> mode.",1,[[],[["option",4],["str",15]]]],[11,"final_mode","","Computes the contract type based on feature flags.",1,[[]]],[4,"ContractType","","The different contract types.",null,null],[13,"Requires","","",2,null],[13,"Ensures","","",2,null],[13,"Invariant","","",2,null],[11,"message_name","","Get the name that is used as a message-prefix on …",2,[[],["str",15]]],[11,"contract_type_and_mode","","Determine the type and mode of an identifier.",2,[[["str",15]],["option",4]]],[3,"Contract","","Representation of a contract",null,null],[12,"span","","",3,null],[12,"ty","","",3,null],[12,"mode","","",3,null],[12,"assertions","","",3,null],[12,"streams","","",3,null],[12,"desc","","",3,null],[11,"from_toks","","",3,[[["contracttype",4],["contractmode",4],["tokenstream",3]]]],[3,"FuncWithContracts","","A function that is annotated with contracts",null,null],[12,"contracts","","",4,null],[12,"function","","",4,null],[11,"new_with_initial_contract","","Create a <code>FuncWithContracts</code> value from the …",4,[[["contracttype",4],["contractmode",4],["tokenstream",3],["itemfn",3]]]],[11,"generate","","Generates the resulting tokens including all …",4,[[],["tokenstream",3]]],[23,"requires","contracts","Pre-conditions are checked before the function body is …",null,null],[23,"debug_requires","","Same as <code>requires</code>, but uses <code>debug_assert!</code>.",null,null],[23,"test_requires","","Same as <code>requires</code>, but is only enabled in <code>#[cfg(test)]</code> …",null,null],[23,"ensures","","Post-conditions are checked after the function body is …",null,null],[23,"debug_ensures","","Same as <code>ensures</code>, but uses <code>debug_assert!</code>.",null,null],[23,"test_ensures","","Same as <code>ensures</code>, but is only enabled in <code>#[cfg(test)]</code> …",null,null],[23,"invariant","","Invariants are conditions that have to be maintained at …",null,null],[23,"debug_invariant","","Same as <code>invariant</code>, but uses <code>debug_assert!</code>.",null,null],[23,"test_invariant","","Same as <code>invariant</code>, but is only enabled in <code>#[cfg(test)]</code> …",null,null],[23,"contract_trait","","A <code>contract_trait</code> is a trait which ensures all …",null,null],[11,"from","contracts::implementation::codegen","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","contracts::implementation","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"clone","","",1,[[],["contractmode",4]]],[11,"clone","","",2,[[],["contracttype",4]]],[11,"eq","","",1,[[["contractmode",4]],["bool",15]]],[11,"eq","","",2,[[["contracttype",4]],["bool",15]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]]],"p":[[3,"OldExpr"],[4,"ContractMode"],[4,"ContractType"],[3,"Contract"],[3,"FuncWithContracts"]]},\
"float_next_after":{"doc":"","i":[[8,"NextAfter","float_next_after","Returns the next representable float value in the …",null,null],[10,"next_after","","",0,[[]]],[5,"short_circuit_operands","","",null,[[["float",8]],[["option",4],["float",8]]]],[5,"copy_sign","","",null,[[["float",8]],["float",8]]]],"p":[[8,"NextAfter"]]},\
"necsim_core":{"doc":"","i":[[0,"cogs","necsim_core","",null,null],[0,"backup","necsim_core::cogs","",null,null],[8,"Backup","necsim_core::cogs::backup","",null,null],[11,"backup_unchecked","","",0,[[]]],[11,"backup","","",0,[[],["backedup",3]]],[3,"BackedUp","","",null,null],[12,"0","","",1,null],[0,"habitat","necsim_core::cogs","",null,null],[8,"Habitat","necsim_core::cogs::habitat","",null,null],[11,"get_extent","","",2,[[],["landscapeextent",3]]],[11,"contains","","",2,[[["location",3]],["bool",15]]],[11,"get_total_habitat","","ContractsPost-condition - debug: total habitat is the sum …",2,[[],["u64",15]]],[11,"get_habitat_at_location","","ContractsPre-condition - debug: location is inside …",2,[[["location",3]],["u32",15]]],[11,"map_indexed_location_to_u64_injective","","ContractsPre-condition - debug: location is inside …",2,[[["indexedlocation",3]],["u64",15]]],[0,"origin_sampler","necsim_core::cogs","",null,null],[8,"OriginSampler","necsim_core::cogs::origin_sampler","",null,null],[16,"Habitat","","",3,null],[11,"habitat","","",3,[[]]],[11,"full_upper_bound_size_hint","","",3,[[],["u64",15]]],[0,"speciation_probability","necsim_core::cogs","",null,null],[8,"SpeciationProbability","necsim_core::cogs::speciation_probability","",null,null],[11,"get_speciation_probability_at_location","","ContractsPre-condition - debug: location is inside habitat",4,[[["location",3]],["closedunitf64",3]]],[0,"rng","necsim_core::cogs","",null,null],[8,"RngCore","necsim_core::cogs::rng","",null,null],[16,"Seed","","",5,null],[10,"from_seed","","",5,[[]]],[11,"seed_from_u64","","",5,[[["u64",15]]]],[10,"sample_u64","","",5,[[],["u64",15]]],[8,"RngSampler","","",null,null],[11,"sample_uniform","","",6,[[],["closedunitf64",3]]],[11,"sample_index","","ContractsPost-condition - debug: samples U(0, length - 1)",6,[[["usize",15]],["usize",15]]],[11,"sample_index_u32","","ContractsPost-condition - debug: samples U(0, length - 1)",6,[[["u32",15]],["u32",15]]],[11,"sample_exponential","","",6,[[["positivef64",3]],["nonnegativef64",3]]],[11,"sample_event","","",6,[[["closedunitf64",3]],["bool",15]]],[11,"sample_2d_standard_normal","","",6,[[]]],[11,"sample_2d_normal","","",6,[[["f64",15],["nonnegativef64",3]]]],[8,"PrimeableRng","","",null,null],[10,"prime_with","","",7,[[["u64",15]]]],[8,"HabitatPrimeableRng","","",null,null],[11,"prime_with_habitat","","",8,[[["indexedlocation",3],["u64",15]]]],[8,"SplittableRng","","",null,null],[10,"split","","",9,[[]]],[10,"split_to_stream","","",9,[[["u64",15]]]],[0,"dispersal_sampler","necsim_core::cogs","",null,null],[8,"DispersalSampler","necsim_core::cogs::dispersal_sampler","",null,null],[11,"sample_dispersal_from_location","","ContractsPre-condition - debug: location is inside habitat",10,[[["location",3]],["location",3]]],[8,"SeparableDispersalSampler","","",null,null],[11,"sample_non_self_dispersal_from_location","","ContractsPre-condition - debug: location is inside habitat",11,[[["location",3]],["location",3]]],[11,"get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside habitat",11,[[["location",3]],["closedunitf64",3]]],[0,"lineage_reference","necsim_core::cogs","",null,null],[8,"LineageReference","necsim_core::cogs::lineage_reference","",null,null],[0,"lineage_store","necsim_core::cogs","",null,null],[8,"LineageStore","necsim_core::cogs::lineage_store","",null,null],[16,"LineageReferenceIterator","","",12,null],[11,"from_origin_sampler","","",12,[[["originsampler",8]]]],[11,"get_number_total_lineages","","",12,[[],["usize",15]]],[11,"iter_local_lineage_references","","",12,[[]]],[11,"get","","",12,[[],[["option",4],["lineage",3]]]],[8,"LocallyCoherentLineageStore","","",null,null],[11,"get_active_global_lineage_reference_at_indexed_location","","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"insert_lineage_to_indexed_location_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_locally_coherent","","ContractsPre-condition - debug: lineage reference is valid",13,[[["positivef64",3]]]],[11,"emigrate","","ContractsPre-condition - debug: lineage reference is valid",13,[[],["globallineagereference",3]]],[11,"immigrate_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[8,"GloballyCoherentLineageStore","","",null,null],[16,"LocationIterator","","",14,null],[11,"iter_active_locations","","",14,[[]]],[11,"get_active_local_lineage_references_at_location_unordered","","ContractsPre-condition - debug: location is inside habitat",14,[[["location",3]]]],[11,"insert_lineage_to_indexed_location_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",14,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_globally_coherent","","ContractsPost-condition - debug: unordered active lineage …",14,[[["positivef64",3]]]],[11,"immigrate_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",14,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[0,"emigration_exit","necsim_core::cogs","",null,null],[8,"EmigrationExit","necsim_core::cogs::emigration_exit","",null,null],[11,"optionally_emigrate","","ContractsPost-condition - debug: if ret is Some, it …",15,[[["location",3],["positivef64",3],["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3]],["option",4]]],[0,"coalescence_sampler","necsim_core::cogs","",null,null],[8,"CoalescenceSampler","necsim_core::cogs::coalescence_sampler","",null,null],[11,"sample_interaction_at_location","","ContractsPre-condition - debug: location is habitable",16,[[["location",3],["coalescencerngsample",3]]]],[3,"CoalescenceRngSample","","",null,null],[12,"0","","",17,null],[11,"new","","",17,[[]]],[11,"sample_coalescence_index","","ContractsPost-condition - debug: samples U(0, length - 1)",17,[[["u32",15]],["u32",15]]],[0,"turnover_rate","necsim_core::cogs","",null,null],[8,"TurnoverRate","necsim_core::cogs::turnover_rate","",null,null],[11,"get_turnover_rate_at_location","","ContractsPre-condition - debug: location is inside habitat",18,[[["location",3]],["nonnegativef64",3]]],[0,"event_sampler","necsim_core::cogs","",null,null],[8,"EventSampler","necsim_core::cogs::event_sampler","",null,null],[11,"sample_event_for_lineage_at_indexed_location_time_or_emigrate","","ContractsPost-condition - debug: lineage emigrated if no …",19,[[["positivef64",3],["nonnegativef64",3],["indexedlocation",3],["partialsimulation",3]],[["packedevent",3],["option",4]]]],[3,"SpeciationSample","","",null,null],[12,"indexed_location","","",20,null],[12,"time","","",20,null],[12,"speciation_sample","","",20,null],[11,"new","","",20,[[["positivef64",3],["indexedlocation",3],["closedunitf64",3]]]],[8,"MinSpeciationTrackingEventSampler","","",null,null],[10,"replace_min_speciation","","",21,[[["speciationsample",3],["option",4]],[["speciationsample",3],["option",4]]]],[0,"immigration_entry","necsim_core::cogs","",null,null],[8,"ImmigrationEntry","necsim_core::cogs::immigration_entry","",null,null],[11,"next_optional_immigration","","ContractsPre-condition - debug: option_next_event_time is …",22,[[["positivef64",3],["option",4]],[["option",4],["migratinglineage",3]]]],[11,"peek_next_immigration","","",22,[[],[["migratinglineage",3],["option",4]]]],[0,"active_lineage_sampler","necsim_core::cogs","",null,null],[8,"ActiveLineageSampler","necsim_core::cogs::active_lineage_sampler","",null,null],[11,"number_active_lineages","","",23,[[],["usize",15]]],[11,"get_last_event_time","","",23,[[],["nonnegativef64",3]]],[11,"pop_active_lineage_indexed_location_prior_event_time","","ContractsPost-condition - debug: removes an active …",23,[[["partialsimulation",3]],["option",4]]],[11,"push_active_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",23,[[["positivef64",3],["partialsimulation",3],["indexedlocation",3]]]],[11,"insert_new_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",23,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3],["partialsimulation",3]]]],[11,"with_next_active_lineage_indexed_location_prior_event_time","","",23,[[["fnonce",8],["partialsimulation",3]],["bool",15]]],[8,"SingularActiveLineageSampler","","",null,null],[10,"replace_active_lineage","","",24,[[["option",4],["lineage",3]],[["option",4],["lineage",3]]]],[3,"EmptyActiveLineageSamplerError","","",null,null],[8,"PeekableActiveLineageSampler","","",null,null],[11,"peek_time_of_next_event","","ContractsPost-condition - debug: only returns Err when no …",25,[[],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[8,"OptionallyPeekableActiveLineageSampler","","",null,null],[10,"peek_optional_time_of_next_event","","",26,[[],[["positivef64",3],["option",4]]]],[3,"BackedUp","necsim_core::cogs","",null,null],[12,"0","","",1,null],[8,"Backup","","",null,null],[11,"backup_unchecked","necsim_core::cogs::backup","",0,[[]]],[11,"backup","","",0,[[],["backedup",3]]],[8,"Habitat","necsim_core::cogs","",null,null],[11,"get_extent","necsim_core::cogs::habitat","",2,[[],["landscapeextent",3]]],[11,"contains","","",2,[[["location",3]],["bool",15]]],[11,"get_total_habitat","","ContractsPost-condition - debug: total habitat is the sum …",2,[[],["u64",15]]],[11,"get_habitat_at_location","","ContractsPre-condition - debug: location is inside …",2,[[["location",3]],["u32",15]]],[11,"map_indexed_location_to_u64_injective","","ContractsPre-condition - debug: location is inside …",2,[[["indexedlocation",3]],["u64",15]]],[8,"OriginSampler","necsim_core::cogs","",null,null],[16,"Habitat","","",3,null],[11,"habitat","necsim_core::cogs::origin_sampler","",3,[[]]],[11,"full_upper_bound_size_hint","","",3,[[],["u64",15]]],[8,"SpeciationProbability","necsim_core::cogs","",null,null],[11,"get_speciation_probability_at_location","necsim_core::cogs::speciation_probability","ContractsPre-condition - debug: location is inside habitat",4,[[["location",3]],["closedunitf64",3]]],[8,"HabitatPrimeableRng","necsim_core::cogs","",null,null],[11,"prime_with_habitat","necsim_core::cogs::rng","",8,[[["indexedlocation",3],["u64",15]]]],[8,"PrimeableRng","necsim_core::cogs","",null,null],[10,"prime_with","","",7,[[["u64",15]]]],[8,"RngCore","","",null,null],[16,"Seed","","",5,null],[10,"from_seed","","",5,[[]]],[11,"seed_from_u64","necsim_core::cogs::rng","",5,[[["u64",15]]]],[10,"sample_u64","necsim_core::cogs","",5,[[],["u64",15]]],[8,"RngSampler","","",null,null],[11,"sample_uniform","necsim_core::cogs::rng","",6,[[],["closedunitf64",3]]],[11,"sample_index","","ContractsPost-condition - debug: samples U(0, length - 1)",6,[[["usize",15]],["usize",15]]],[11,"sample_index_u32","","ContractsPost-condition - debug: samples U(0, length - 1)",6,[[["u32",15]],["u32",15]]],[11,"sample_exponential","","",6,[[["positivef64",3]],["nonnegativef64",3]]],[11,"sample_event","","",6,[[["closedunitf64",3]],["bool",15]]],[11,"sample_2d_standard_normal","","",6,[[]]],[11,"sample_2d_normal","","",6,[[["f64",15],["nonnegativef64",3]]]],[8,"SplittableRng","necsim_core::cogs","",null,null],[10,"split","","",9,[[]]],[10,"split_to_stream","","",9,[[["u64",15]]]],[8,"DispersalSampler","","",null,null],[11,"sample_dispersal_from_location","necsim_core::cogs::dispersal_sampler","ContractsPre-condition - debug: location is inside habitat",10,[[["location",3]],["location",3]]],[8,"SeparableDispersalSampler","necsim_core::cogs","",null,null],[11,"sample_non_self_dispersal_from_location","necsim_core::cogs::dispersal_sampler","ContractsPre-condition - debug: location is inside habitat",11,[[["location",3]],["location",3]]],[11,"get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside habitat",11,[[["location",3]],["closedunitf64",3]]],[8,"LineageReference","necsim_core::cogs","",null,null],[8,"GloballyCoherentLineageStore","","",null,null],[16,"LocationIterator","","",14,null],[11,"iter_active_locations","necsim_core::cogs::lineage_store","",14,[[]]],[11,"get_active_local_lineage_references_at_location_unordered","","ContractsPre-condition - debug: location is inside habitat",14,[[["location",3]]]],[11,"insert_lineage_to_indexed_location_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",14,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_globally_coherent","","ContractsPost-condition - debug: unordered active lineage …",14,[[["positivef64",3]]]],[11,"immigrate_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",14,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[8,"LineageStore","necsim_core::cogs","",null,null],[16,"LineageReferenceIterator","","",12,null],[11,"from_origin_sampler","necsim_core::cogs::lineage_store","",12,[[["originsampler",8]]]],[11,"get_number_total_lineages","","",12,[[],["usize",15]]],[11,"iter_local_lineage_references","","",12,[[]]],[11,"get","","",12,[[],[["option",4],["lineage",3]]]],[8,"LocallyCoherentLineageStore","necsim_core::cogs","",null,null],[11,"get_active_global_lineage_reference_at_indexed_location","necsim_core::cogs::lineage_store","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"insert_lineage_to_indexed_location_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_locally_coherent","","ContractsPre-condition - debug: lineage reference is valid",13,[[["positivef64",3]]]],[11,"emigrate","","ContractsPre-condition - debug: lineage reference is valid",13,[[],["globallineagereference",3]]],[11,"immigrate_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[8,"EmigrationExit","necsim_core::cogs","",null,null],[11,"optionally_emigrate","necsim_core::cogs::emigration_exit","ContractsPost-condition - debug: if ret is Some, it …",15,[[["location",3],["positivef64",3],["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3]],["option",4]]],[3,"CoalescenceRngSample","necsim_core::cogs","",null,null],[12,"0","","",17,null],[8,"CoalescenceSampler","","",null,null],[11,"sample_interaction_at_location","necsim_core::cogs::coalescence_sampler","ContractsPre-condition - debug: location is habitable",16,[[["location",3],["coalescencerngsample",3]]]],[8,"TurnoverRate","necsim_core::cogs","",null,null],[11,"get_turnover_rate_at_location","necsim_core::cogs::turnover_rate","ContractsPre-condition - debug: location is inside habitat",18,[[["location",3]],["nonnegativef64",3]]],[8,"EventSampler","necsim_core::cogs","",null,null],[11,"sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_core::cogs::event_sampler","ContractsPost-condition - debug: lineage emigrated if no …",19,[[["positivef64",3],["nonnegativef64",3],["indexedlocation",3],["partialsimulation",3]],[["packedevent",3],["option",4]]]],[8,"MinSpeciationTrackingEventSampler","necsim_core::cogs","",null,null],[10,"replace_min_speciation","","",21,[[["speciationsample",3],["option",4]],[["speciationsample",3],["option",4]]]],[3,"SpeciationSample","","",null,null],[12,"indexed_location","","",20,null],[12,"time","","",20,null],[12,"speciation_sample","","",20,null],[8,"ImmigrationEntry","","",null,null],[11,"next_optional_immigration","necsim_core::cogs::immigration_entry","ContractsPre-condition - debug: option_next_event_time is …",22,[[["positivef64",3],["option",4]],[["option",4],["migratinglineage",3]]]],[11,"peek_next_immigration","","",22,[[],[["migratinglineage",3],["option",4]]]],[8,"ActiveLineageSampler","necsim_core::cogs","",null,null],[11,"number_active_lineages","necsim_core::cogs::active_lineage_sampler","",23,[[],["usize",15]]],[11,"get_last_event_time","","",23,[[],["nonnegativef64",3]]],[11,"pop_active_lineage_indexed_location_prior_event_time","","ContractsPost-condition - debug: removes an active …",23,[[["partialsimulation",3]],["option",4]]],[11,"push_active_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",23,[[["positivef64",3],["partialsimulation",3],["indexedlocation",3]]]],[11,"insert_new_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",23,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3],["partialsimulation",3]]]],[11,"with_next_active_lineage_indexed_location_prior_event_time","","",23,[[["fnonce",8],["partialsimulation",3]],["bool",15]]],[3,"EmptyActiveLineageSamplerError","necsim_core::cogs","",null,null],[8,"OptionallyPeekableActiveLineageSampler","","",null,null],[10,"peek_optional_time_of_next_event","","",26,[[],[["positivef64",3],["option",4]]]],[8,"PeekableActiveLineageSampler","","",null,null],[11,"peek_time_of_next_event","necsim_core::cogs::active_lineage_sampler","ContractsPost-condition - debug: only returns Err when no …",25,[[],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[8,"SingularActiveLineageSampler","necsim_core::cogs","",null,null],[10,"replace_active_lineage","","",24,[[["option",4],["lineage",3]],[["option",4],["lineage",3]]]],[0,"event","necsim_core","",null,null],[3,"PackedEvent","necsim_core::event","",null,null],[12,"origin","","",27,null],[12,"prior_time","","",27,null],[12,"event_time","","",27,null],[12,"global_lineage_reference","","",27,null],[12,"type","","",27,null],[4,"EventType","","",null,null],[13,"Speciation","","",28,null],[13,"Dispersal","","",28,null],[3,"Dispersal","","",null,null],[12,"target","","",29,null],[12,"interaction","","",29,null],[4,"LineageInteraction","","",null,null],[13,"None","","",30,null],[13,"Maybe","","",30,null],[13,"Coalescence","","",30,null],[17,"EXCESSIVE_INTERACTION_ERROR","","",null,null],[3,"SpeciationEvent","","",null,null],[12,"origin","","",31,null],[12,"prior_time","","",31,null],[12,"event_time","","",31,null],[12,"global_lineage_reference","","",31,null],[3,"DispersalEvent","","",null,null],[12,"origin","","",32,null],[12,"prior_time","","",32,null],[12,"event_time","","",32,null],[12,"global_lineage_reference","","",32,null],[12,"target","","",32,null],[12,"interaction","","",32,null],[4,"TypedEvent","","",null,null],[13,"Speciation","","",33,null],[13,"Dispersal","","",33,null],[0,"intrinsics","necsim_core","",null,null],[5,"floor","necsim_core::intrinsics","",null,[[["f64",15]],["f64",15]]],[5,"ceil","","",null,[[["f64",15]],["f64",15]]],[5,"ln","","",null,[[["f64",15]],["f64",15]]],[5,"log2","","",null,[[["f64",15]],["f64",15]]],[5,"exp","","",null,[[["f64",15]],["f64",15]]],[5,"neg_exp","","",null,[[["nonnegativef64",3]],["closedunitf64",3]]],[5,"sqrt","","",null,[[["f64",15]],["f64",15]]],[5,"safe_sqrt","","",null,[[["nonnegativef64",3]],["nonnegativef64",3]]],[5,"sin","","",null,[[["f64",15]],["f64",15]]],[5,"cos","","",null,[[["f64",15]],["f64",15]]],[5,"round","","",null,[[["f64",15]],["f64",15]]],[5,"fract","","",null,[[["f64",15]],["f64",15]]],[0,"landscape","necsim_core","",null,null],[0,"extent","necsim_core::landscape","",null,null],[3,"LandscapeExtent","necsim_core::landscape::extent","",null,null],[12,"x","","",34,null],[12,"y","","",34,null],[12,"width","","",34,null],[12,"height","","",34,null],[11,"new","","ContractsPost-condition - debug: stores x",34,[[["u32",15]]]],[11,"x","","",34,[[],["u32",15]]],[11,"y","","",34,[[],["u32",15]]],[11,"width","","",34,[[],["u32",15]]],[11,"height","","",34,[[],["u32",15]]],[11,"contains","","",34,[[["location",3]],["bool",15]]],[11,"iter","","",34,[[],["locationiterator",3]]],[3,"LocationIterator","","",null,null],[12,"x","","",35,null],[12,"y","","",35,null],[12,"extent","","",35,null],[0,"location","necsim_core::landscape","",null,null],[3,"Location","necsim_core::landscape::location","",null,null],[12,"x","","",36,null],[12,"y","","",36,null],[11,"new","","ContractsPost-condition - debug: stores x",36,[[["u32",15]]]],[11,"x","","",36,[[],["u32",15]]],[11,"y","","",36,[[],["u32",15]]],[3,"LocationIndex","","",null,null],[12,"0","","",37,null],[3,"IndexedLocation","","",null,null],[12,"location","","",38,null],[12,"index","","",38,null],[11,"new","","ContractsPost-condition - debug: stores location",38,[[["location",3],["u32",15]]]],[11,"location","","",38,[[],["location",3]]],[11,"index","","",38,[[],["u32",15]]],[3,"LandscapeExtent","necsim_core::landscape","",null,null],[12,"x","","",34,null],[12,"y","","",34,null],[12,"width","","",34,null],[12,"height","","",34,null],[3,"LocationIterator","","",null,null],[12,"x","","",35,null],[12,"y","","",35,null],[12,"extent","","",35,null],[3,"IndexedLocation","","",null,null],[12,"location","","",38,null],[12,"index","","",38,null],[3,"Location","","",null,null],[12,"x","","",36,null],[12,"y","","",36,null],[0,"lineage","necsim_core","",null,null],[3,"GlobalLineageReference","necsim_core::lineage","",null,null],[12,"0","","",39,null],[3,"Lineage","","",null,null],[12,"global_reference","","",40,null],[12,"indexed_location","","",40,null],[12,"last_event_time","","",40,null],[11,"new","","ContractsPost-condition - debug: stores the …",40,[[["indexedlocation",3]]]],[11,"immigrate","","",40,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[11,"emigrate","","",40,[[],["globallineagereference",3]]],[11,"is_active","","",40,[[],["bool",15]]],[11,"indexed_location","","",40,[[],[["indexedlocation",3],["option",4]]]],[11,"last_event_time","","",40,[[],["nonnegativef64",3]]],[11,"global_reference","","",40,[[],["globallineagereference",3]]],[11,"remove_from_location","","SafetyThis method should only be called by internal …",40,[[["positivef64",3]]]],[11,"move_to_indexed_location","","SafetyThis method should only be called by internal …",40,[[["indexedlocation",3]]]],[3,"MigratingLineage","","",null,null],[12,"global_reference","","",41,null],[12,"dispersal_origin","","",41,null],[12,"dispersal_target","","",41,null],[12,"prior_time","","",41,null],[12,"event_time","","",41,null],[12,"coalescence_rng_sample","","",41,null],[0,"reporter","necsim_core","",null,null],[0,"combinator","necsim_core::reporter","",null,null],[3,"ReporterCombinator","necsim_core::reporter::combinator","",null,null],[12,"front","","",42,null],[12,"tail","","",42,null],[11,"new","","SafetyThis constructor should not be used directly to …",42,[[]]],[11,"wen","","SafetyThis destructor should not be used directly to …",42,[[]]],[0,"filter","necsim_core::reporter","",null,null],[3,"FilteredReporter","necsim_core::reporter::filter","",null,null],[12,"reporter","","",43,null],[12,"marker","","",43,null],[0,"group","necsim_core::reporter","",null,null],[0,"impl","","",null,null],[0,"null","","",null,null],[3,"NullReporter","necsim_core::reporter::null","",null,null],[0,"boolean","necsim_core::reporter","",null,null],[0,"private","necsim_core::reporter::boolean","",null,null],[8,"Sealed","necsim_core::reporter::boolean::private","",null,null],[8,"Boolean","necsim_core::reporter::boolean","",null,null],[18,"VALUE","","",44,null],[3,"False","","",null,null],[3,"True","","",null,null],[8,"Or","","",null,null],[16,"RESULT","","",45,null],[8,"And","","",null,null],[16,"RESULT","","",46,null],[0,"used","necsim_core::reporter","",null,null],[3,"MaybeUsed","necsim_core::reporter::used","",null,null],[12,"inner","","",47,null],[12,"_used","","",47,null],[6,"Used","","",null,null],[6,"Ignored","","",null,null],[11,"maybe_use_in","","",47,[[["fnonce",8]]]],[3,"ReporterCombinator","necsim_core::reporter","",null,null],[12,"front","","",42,null],[12,"tail","","",42,null],[3,"FilteredReporter","","",null,null],[12,"reporter","","",43,null],[12,"marker","","",43,null],[3,"NullReporter","","",null,null],[8,"Reporter","","",null,null],[16,"ReportSpeciation","","",48,null],[16,"ReportDispersal","","",48,null],[16,"ReportProgress","","",48,null],[10,"report_speciation","","",48,[[["maybeused",3]]]],[10,"report_dispersal","","",48,[[["maybeused",3]]]],[10,"report_progress","","",48,[[["maybeused",3]]]],[11,"initialise","","This <code>initialise</code> hook can be used to commit to make final …",48,[[],[["result",4],["string",3]]]],[11,"finalise","","",48,[[]]],[11,"finalise_boxed","","SafetyThis method should not be implemented manually",48,[[["box",3]]]],[0,"simulation","necsim_core","",null,null],[0,"backup","necsim_core::simulation","",null,null],[11,"resume","necsim_core::cogs::backup","",1,[[],["simulation",3]]],[0,"builder","necsim_core::simulation","",null,null],[3,"Simulation","necsim_core::simulation::builder","",null,null],[12,"habitat","","",49,null],[12,"lineage_reference","","",49,null],[12,"lineage_store","","",49,null],[12,"dispersal_sampler","","",49,null],[12,"coalescence_sampler","","",49,null],[12,"turnover_rate","","",49,null],[12,"speciation_probability","","",49,null],[12,"emigration_exit","","",49,null],[12,"event_sampler","","",49,null],[12,"active_lineage_sampler","","",49,null],[12,"rng","","",49,null],[12,"immigration_entry","","",49,null],[12,"migration_balance","","",49,null],[3,"SimulationCudaRepresentation","","",null,null],[12,"habitat","","",50,null],[12,"lineage_reference","","",50,null],[12,"lineage_store","","",50,null],[12,"dispersal_sampler","","",50,null],[12,"coalescence_sampler","","",50,null],[12,"turnover_rate","","",50,null],[12,"speciation_probability","","",50,null],[12,"emigration_exit","","",50,null],[12,"event_sampler","","",50,null],[12,"active_lineage_sampler","","",50,null],[12,"rng","","",50,null],[12,"immigration_entry","","",50,null],[12,"migration_balance","","",50,null],[11,"builder","","Create a builder for building <code>Simulation</code>. On the builder, …",49,[[],["simulationbuilder",3]]],[11,"with_mut_split_active_lineage_sampler_and_rng","","",49,[[["fnonce",8]]]],[11,"with_mut_split_event_sampler_and_rng","","",49,[[["fnonce",8]]]],[11,"rng_mut","","",49,[[]]],[11,"active_lineage_sampler","","",49,[[]]],[11,"active_lineage_sampler_mut","","",49,[[]]],[11,"lineage_store","","",49,[[]]],[11,"lineage_store_mut","","",49,[[]]],[11,"event_sampler","","",49,[[]]],[11,"event_sampler_mut","","",49,[[]]],[11,"speciation_probability","","",49,[[]]],[11,"turnover_rate","","",49,[[]]],[11,"habitat","","",49,[[]]],[11,"dispersal_sampler","","",49,[[]]],[11,"coalescence_sampler","","",49,[[]]],[11,"emigration_exit","","",49,[[]]],[11,"emigration_exit_mut","","",49,[[]]],[11,"immigration_entry_mut","","",49,[[]]],[0,"process","necsim_core::simulation","",null,null],[0,"immigration","necsim_core::simulation::process","",null,null],[5,"simulate_and_report_immigration_step","necsim_core::simulation::process::immigration","",null,[[["simulation",3],["migratinglineage",3]]]],[0,"local","necsim_core::simulation::process","",null,null],[5,"simulate_and_report_local_step_or_finish","necsim_core::simulation::process::local","",null,[[["simulation",3]],["bool",15]]],[0,"partial","necsim_core::simulation","",null,null],[0,"active_lineager_sampler","necsim_core::simulation::partial","",null,null],[3,"PartialSimulation","necsim_core::simulation::partial::active_lineager_sampler","",null,null],[12,"habitat","","",51,null],[12,"lineage_reference","","",51,null],[12,"lineage_store","","",51,null],[12,"dispersal_sampler","","",51,null],[12,"coalescence_sampler","","",51,null],[12,"turnover_rate","","",51,null],[12,"speciation_probability","","",51,null],[12,"emigration_exit","","",51,null],[12,"event_sampler","","",51,null],[12,"_rng","","",51,null],[11,"with_split_event_sampler","","",51,[[["fnonce",8]]]],[11,"with_mut_split_event_sampler","","",51,[[["fnonce",8]]]],[0,"emigration_exit","necsim_core::simulation::partial","",null,null],[3,"PartialSimulation","necsim_core::simulation::partial::emigration_exit","",null,null],[12,"habitat","","",52,null],[12,"lineage_reference","","",52,null],[12,"lineage_store","","",52,null],[12,"_rng","","",52,null],[0,"event_sampler","necsim_core::simulation::partial","",null,null],[3,"PartialSimulation","necsim_core::simulation::partial::event_sampler","",null,null],[12,"habitat","","",53,null],[12,"lineage_reference","","",53,null],[12,"lineage_store","","",53,null],[12,"dispersal_sampler","","",53,null],[12,"coalescence_sampler","","",53,null],[12,"turnover_rate","","",53,null],[12,"speciation_probability","","",53,null],[12,"emigration_exit","","",53,null],[12,"_rng","","",53,null],[11,"with_mut_split_emigration_exit","","",53,[[["fnonce",8]]]],[3,"Simulation","necsim_core::simulation","",null,null],[12,"habitat","","",49,null],[12,"lineage_reference","","",49,null],[12,"lineage_store","","",49,null],[12,"dispersal_sampler","","",49,null],[12,"coalescence_sampler","","",49,null],[12,"turnover_rate","","",49,null],[12,"speciation_probability","","",49,null],[12,"emigration_exit","","",49,null],[12,"event_sampler","","",49,null],[12,"active_lineage_sampler","","",49,null],[12,"rng","","",49,null],[12,"immigration_entry","","",49,null],[12,"migration_balance","","",49,null],[11,"peek_time_of_next_event","necsim_core::simulation::builder","",49,[[],[["positivef64",3],["option",4]]]],[11,"get_balanced_remaining_work","","",49,[[],[["wrapping",3],["u64",15]]]],[11,"simulate_incremental_early_stop","","",49,[[["fnmut",8]]]],[11,"simulate","","",49,[[]]],[14,"ReporterGroup","necsim_core","",null,null],[14,"ReporterUnGroup","","",null,null],[14,"ReporterGroupType","","",null,null],[14,"impl_report","","",null,null],[14,"impl_finalise","","",null,null],[11,"borrow","necsim_core::cogs::backup","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","necsim_core::cogs::coalescence_sampler","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"as_datatype","","",17,[[]]],[11,"count","","",17,[[],["i32",15]]],[11,"pointer","","",17,[[]]],[11,"pointer_mut","","",17,[[]]],[11,"approx_from","","",17,[[],["result",4]]],[11,"approx_into","","",17,[[],["result",4]]],[11,"value_from","","",17,[[],["result",4]]],[11,"value_into","","",17,[[],["result",4]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","necsim_core::cogs::event_sampler","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"approx_from","","",20,[[],["result",4]]],[11,"approx_into","","",20,[[],["result",4]]],[11,"value_from","","",20,[[],["result",4]]],[11,"value_into","","",20,[[],["result",4]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","necsim_core::cogs::active_lineage_sampler","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"approx_from","","",54,[[],["result",4]]],[11,"approx_into","","",54,[[],["result",4]]],[11,"value_from","","",54,[[],["result",4]]],[11,"value_into","","",54,[[],["result",4]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","necsim_core::event","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"approx_from","","",27,[[],["result",4]]],[11,"approx_into","","",27,[[],["result",4]]],[11,"value_from","","",27,[[],["result",4]]],[11,"value_into","","",27,[[],["result",4]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"approx_from","","",28,[[],["result",4]]],[11,"approx_into","","",28,[[],["result",4]]],[11,"value_from","","",28,[[],["result",4]]],[11,"value_into","","",28,[[],["result",4]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"approx_from","","",29,[[],["result",4]]],[11,"approx_into","","",29,[[],["result",4]]],[11,"value_from","","",29,[[],["result",4]]],[11,"value_into","","",29,[[],["result",4]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"approx_from","","",30,[[],["result",4]]],[11,"approx_into","","",30,[[],["result",4]]],[11,"value_from","","",30,[[],["result",4]]],[11,"value_into","","",30,[[],["result",4]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"approx_from","","",31,[[],["result",4]]],[11,"approx_into","","",31,[[],["result",4]]],[11,"value_from","","",31,[[],["result",4]]],[11,"value_into","","",31,[[],["result",4]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"approx_from","","",32,[[],["result",4]]],[11,"approx_into","","",32,[[],["result",4]]],[11,"value_from","","",32,[[],["result",4]]],[11,"value_into","","",32,[[],["result",4]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"approx_from","","",33,[[],["result",4]]],[11,"approx_into","","",33,[[],["result",4]]],[11,"value_from","","",33,[[],["result",4]]],[11,"value_into","","",33,[[],["result",4]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","necsim_core::landscape::extent","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"approx_from","","",34,[[],["result",4]]],[11,"approx_into","","",34,[[],["result",4]]],[11,"value_from","","",34,[[],["result",4]]],[11,"value_into","","",34,[[],["result",4]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"into_iter","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"approx_from","","",35,[[],["result",4]]],[11,"approx_into","","",35,[[],["result",4]]],[11,"value_from","","",35,[[],["result",4]]],[11,"value_into","","",35,[[],["result",4]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","necsim_core::landscape::location","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"as_datatype","","",36,[[]]],[11,"count","","",36,[[],["i32",15]]],[11,"pointer","","",36,[[]]],[11,"pointer_mut","","",36,[[]]],[11,"approx_from","","",36,[[],["result",4]]],[11,"approx_into","","",36,[[],["result",4]]],[11,"value_from","","",36,[[],["result",4]]],[11,"value_into","","",36,[[],["result",4]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"as_datatype","","",37,[[]]],[11,"count","","",37,[[],["i32",15]]],[11,"pointer","","",37,[[]]],[11,"pointer_mut","","",37,[[]]],[11,"approx_from","","",37,[[],["result",4]]],[11,"approx_into","","",37,[[],["result",4]]],[11,"value_from","","",37,[[],["result",4]]],[11,"value_into","","",37,[[],["result",4]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"as_datatype","","",38,[[]]],[11,"count","","",38,[[],["i32",15]]],[11,"pointer","","",38,[[]]],[11,"pointer_mut","","",38,[[]]],[11,"approx_from","","",38,[[],["result",4]]],[11,"approx_into","","",38,[[],["result",4]]],[11,"value_from","","",38,[[],["result",4]]],[11,"value_into","","",38,[[],["result",4]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","necsim_core::lineage","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"as_datatype","","",39,[[]]],[11,"count","","",39,[[],["i32",15]]],[11,"pointer","","",39,[[]]],[11,"pointer_mut","","",39,[[]]],[11,"approx_from","","",39,[[],["result",4]]],[11,"approx_into","","",39,[[],["result",4]]],[11,"value_from","","",39,[[],["result",4]]],[11,"value_into","","",39,[[],["result",4]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"approx_from","","",40,[[],["result",4]]],[11,"approx_into","","",40,[[],["result",4]]],[11,"value_from","","",40,[[],["result",4]]],[11,"value_into","","",40,[[],["result",4]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"as_datatype","","",41,[[]]],[11,"count","","",41,[[],["i32",15]]],[11,"pointer","","",41,[[]]],[11,"pointer_mut","","",41,[[]]],[11,"approx_from","","",41,[[],["result",4]]],[11,"approx_into","","",41,[[],["result",4]]],[11,"value_from","","",41,[[],["result",4]]],[11,"value_into","","",41,[[],["result",4]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","necsim_core::reporter::combinator","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"approx_from","","",42,[[],["result",4]]],[11,"approx_into","","",42,[[],["result",4]]],[11,"value_from","","",42,[[],["result",4]]],[11,"value_into","","",42,[[],["result",4]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","necsim_core::reporter::filter","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"from","","",43,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"approx_from","","",43,[[],["result",4]]],[11,"approx_into","","",43,[[],["result",4]]],[11,"value_from","","",43,[[],["result",4]]],[11,"value_into","","",43,[[],["result",4]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","necsim_core::reporter::null","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"approx_from","","",55,[[],["result",4]]],[11,"approx_into","","",55,[[],["result",4]]],[11,"value_from","","",55,[[],["result",4]]],[11,"value_into","","",55,[[],["result",4]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","necsim_core::reporter::boolean","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"approx_from","","",56,[[],["result",4]]],[11,"approx_into","","",56,[[],["result",4]]],[11,"value_from","","",56,[[],["result",4]]],[11,"value_into","","",56,[[],["result",4]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"approx_from","","",57,[[],["result",4]]],[11,"approx_into","","",57,[[],["result",4]]],[11,"value_from","","",57,[[],["result",4]]],[11,"value_into","","",57,[[],["result",4]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","necsim_core::reporter::used","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"from","","",47,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"approx_from","","",47,[[],["result",4]]],[11,"approx_into","","",47,[[],["result",4]]],[11,"value_from","","",47,[[],["result",4]]],[11,"value_into","","",47,[[],["result",4]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","necsim_core::simulation::builder","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"approx_from","","",49,[[],["result",4]]],[11,"approx_into","","",49,[[],["result",4]]],[11,"value_from","","",49,[[],["result",4]]],[11,"value_into","","",49,[[],["result",4]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"approx_from","","",50,[[],["result",4]]],[11,"approx_into","","",50,[[],["result",4]]],[11,"value_from","","",50,[[],["result",4]]],[11,"value_into","","",50,[[],["result",4]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","necsim_core::simulation::partial::active_lineager_sampler","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"approx_from","","",51,[[],["result",4]]],[11,"approx_into","","",51,[[],["result",4]]],[11,"value_from","","",51,[[],["result",4]]],[11,"value_into","","",51,[[],["result",4]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","necsim_core::simulation::partial::emigration_exit","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"approx_from","","",52,[[],["result",4]]],[11,"approx_into","","",52,[[],["result",4]]],[11,"value_from","","",52,[[],["result",4]]],[11,"value_into","","",52,[[],["result",4]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","necsim_core::simulation::partial::event_sampler","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"approx_from","","",53,[[],["result",4]]],[11,"approx_into","","",53,[[],["result",4]]],[11,"value_from","","",53,[[],["result",4]]],[11,"value_into","","",53,[[],["result",4]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"report_speciation","necsim_core::reporter::combinator","",42,[[["maybeused",3]]]],[11,"report_dispersal","","",42,[[["maybeused",3]]]],[11,"report_progress","","",42,[[["maybeused",3]]]],[11,"finalise","","",42,[[]]],[11,"finalise_boxed","","",42,[[["box",3]]]],[11,"initialise","","",42,[[],[["result",4],["string",3]]]],[11,"report_speciation","necsim_core::reporter::filter","",43,[[["maybeused",3]]]],[11,"report_dispersal","","",43,[[["maybeused",3]]]],[11,"report_progress","","",43,[[["maybeused",3]]]],[11,"finalise","","",43,[[]]],[11,"finalise_boxed","","",43,[[["box",3]]]],[11,"initialise","","",43,[[],[["result",4],["string",3]]]],[11,"report_speciation","necsim_core::reporter::null","",55,[[["maybeused",3]]]],[11,"report_dispersal","","",55,[[["maybeused",3]]]],[11,"report_progress","","",55,[[["maybeused",3]]]],[11,"__contracts_impl_backup_unchecked","necsim_core::cogs::coalescence_sampler","",17,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_core::lineage","",39,[[]]],[11,"__contracts_impl_backup_unchecked","","",41,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_core::simulation::builder","",49,[[]]],[11,"deref","necsim_core::cogs::backup","",1,[[]]],[11,"deref","necsim_core","",58,[[]]],[11,"fmt","necsim_core::cogs::backup","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::cogs::coalescence_sampler","",17,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::cogs::event_sampler","",20,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::event","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::landscape::extent","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::landscape::location","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::lineage","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::reporter::combinator","",42,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::reporter::filter","",43,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::reporter::null","",55,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::simulation::builder","",49,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::lineage","",39,[[["formatter",3]],["result",6]]],[11,"eq","necsim_core::cogs::coalescence_sampler","",17,[[["coalescencerngsample",3]],["bool",15]]],[11,"ne","","",17,[[["coalescencerngsample",3]],["bool",15]]],[11,"eq","necsim_core::cogs::event_sampler","",20,[[],["bool",15]]],[11,"eq","necsim_core::event","",28,[[["eventtype",4]],["bool",15]]],[11,"ne","","",28,[[["eventtype",4]],["bool",15]]],[11,"eq","","",29,[[["dispersal",3]],["bool",15]]],[11,"ne","","",29,[[["dispersal",3]],["bool",15]]],[11,"eq","","",30,[[["lineageinteraction",4]],["bool",15]]],[11,"ne","","",30,[[["lineageinteraction",4]],["bool",15]]],[11,"eq","","",27,[[],["bool",15]]],[11,"eq","","",31,[[],["bool",15]]],[11,"eq","","",32,[[],["bool",15]]],[11,"eq","necsim_core::landscape::extent","",34,[[["landscapeextent",3]],["bool",15]]],[11,"ne","","",34,[[["landscapeextent",3]],["bool",15]]],[11,"eq","necsim_core::landscape::location","",36,[[["location",3]],["bool",15]]],[11,"ne","","",36,[[["location",3]],["bool",15]]],[11,"eq","","",37,[[["locationindex",3]],["bool",15]]],[11,"ne","","",37,[[["locationindex",3]],["bool",15]]],[11,"eq","","",38,[[["indexedlocation",3]],["bool",15]]],[11,"ne","","",38,[[["indexedlocation",3]],["bool",15]]],[11,"eq","necsim_core::lineage","",39,[[["globallineagereference",3]],["bool",15]]],[11,"ne","","",39,[[["globallineagereference",3]],["bool",15]]],[11,"eq","","",41,[[["migratinglineage",3]],["bool",15]]],[11,"ne","","",41,[[["migratinglineage",3]],["bool",15]]],[11,"eq","","",41,[[["backedup",3]],["bool",15]]],[11,"cmp","necsim_core::cogs::coalescence_sampler","",17,[[],["ordering",4]]],[11,"cmp","necsim_core::cogs::event_sampler","",20,[[],["ordering",4]]],[11,"cmp","necsim_core::event","",28,[[["eventtype",4]],["ordering",4]]],[11,"cmp","","",29,[[["dispersal",3]],["ordering",4]]],[11,"cmp","","",30,[[["lineageinteraction",4]],["ordering",4]]],[11,"cmp","","",27,[[],["ordering",4]]],[11,"cmp","necsim_core::landscape::location","",36,[[["location",3]],["ordering",4]]],[11,"cmp","","",37,[[["locationindex",3]],["ordering",4]]],[11,"cmp","","",38,[[["indexedlocation",3]],["ordering",4]]],[11,"cmp","necsim_core::lineage","",39,[[["globallineagereference",3]],["ordering",4]]],[11,"cmp","","",41,[[],["ordering",4]]],[11,"partial_cmp","necsim_core::cogs::coalescence_sampler","",17,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core::cogs::event_sampler","",20,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core::event","",28,[[["eventtype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",29,[[["dispersal",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",30,[[["lineageinteraction",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",27,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core::landscape::location","",36,[[["location",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",37,[[["locationindex",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",38,[[["indexedlocation",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","necsim_core::lineage","",39,[[["globallineagereference",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",41,[[],[["option",4],["ordering",4]]]],[11,"hash","necsim_core::cogs::event_sampler","",20,[[]]],[11,"hash","necsim_core::event","",28,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",27,[[]]],[11,"hash","necsim_core::landscape::location","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"hash","necsim_core::lineage","",39,[[]]],[11,"from","necsim_core::event","",30,[[["globallineagereference",3],["option",4]]]],[11,"from","","",27,[[["speciationevent",3]]]],[11,"from","","",27,[[["dispersalevent",3]]]],[11,"from","","",27,[[["typedevent",4]]]],[11,"from","","",33,[[["packedevent",3]]]],[11,"from","necsim_core::landscape::location","",36,[[["indexedlocation",3]],["location",3]]],[11,"from","necsim_core::reporter::filter","",43,[[]]],[11,"from","necsim_core::reporter::used","",47,[[]]],[11,"next","necsim_core::landscape::extent","",35,[[],["option",4]]],[11,"clone","necsim_core::cogs::event_sampler","",20,[[],["speciationsample",3]]],[11,"clone","necsim_core::event","",27,[[],["packedevent",3]]],[11,"clone","","",28,[[],["eventtype",4]]],[11,"clone","","",29,[[],["dispersal",3]]],[11,"clone","","",30,[[],["lineageinteraction",4]]],[11,"clone","","",31,[[],["speciationevent",3]]],[11,"clone","","",32,[[],["dispersalevent",3]]],[11,"clone","necsim_core::landscape::extent","",34,[[],["landscapeextent",3]]],[11,"clone","necsim_core::landscape::location","",36,[[],["location",3]]],[11,"clone","","",37,[[],["locationindex",3]]],[11,"clone","","",38,[[],["indexedlocation",3]]],[11,"clone","necsim_core::lineage","",39,[[],["globallineagereference",3]]],[11,"clone","","",40,[[],["lineage",3]]],[11,"equivalent_datatype","necsim_core::cogs::coalescence_sampler","",17,[[]]],[11,"equivalent_datatype","necsim_core::landscape::location","",36,[[]]],[11,"equivalent_datatype","","",37,[[]]],[11,"equivalent_datatype","","",38,[[]]],[11,"equivalent_datatype","necsim_core::lineage","",39,[[]]],[11,"equivalent_datatype","","",41,[[]]],[11,"deserialize","necsim_core::event","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","necsim_core::landscape::location","",36,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","","",38,[[],["result",4]]],[11,"deserialize","necsim_core::lineage","",39,[[["deserializer",8]],["result",4]]],[11,"serialize","necsim_core::event","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","necsim_core::landscape::location","",36,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","","",38,[[],["result",4]]],[11,"serialize","necsim_core::lineage","",39,[[["serializer",8]],["result",4]]],[11,"borrow_mut","necsim_core::simulation::builder","",49,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",49,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"lend_to_cuda","","",49,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",49,[[["fnonce",8]],["cudaresult",6]]]],"p":[[8,"Backup"],[3,"BackedUp"],[8,"Habitat"],[8,"OriginSampler"],[8,"SpeciationProbability"],[8,"RngCore"],[8,"RngSampler"],[8,"PrimeableRng"],[8,"HabitatPrimeableRng"],[8,"SplittableRng"],[8,"DispersalSampler"],[8,"SeparableDispersalSampler"],[8,"LineageStore"],[8,"LocallyCoherentLineageStore"],[8,"GloballyCoherentLineageStore"],[8,"EmigrationExit"],[8,"CoalescenceSampler"],[3,"CoalescenceRngSample"],[8,"TurnoverRate"],[8,"EventSampler"],[3,"SpeciationSample"],[8,"MinSpeciationTrackingEventSampler"],[8,"ImmigrationEntry"],[8,"ActiveLineageSampler"],[8,"SingularActiveLineageSampler"],[8,"PeekableActiveLineageSampler"],[8,"OptionallyPeekableActiveLineageSampler"],[3,"PackedEvent"],[4,"EventType"],[3,"Dispersal"],[4,"LineageInteraction"],[3,"SpeciationEvent"],[3,"DispersalEvent"],[4,"TypedEvent"],[3,"LandscapeExtent"],[3,"LocationIterator"],[3,"Location"],[3,"LocationIndex"],[3,"IndexedLocation"],[3,"GlobalLineageReference"],[3,"Lineage"],[3,"MigratingLineage"],[3,"ReporterCombinator"],[3,"FilteredReporter"],[8,"Boolean"],[8,"Or"],[8,"And"],[3,"MaybeUsed"],[8,"Reporter"],[3,"Simulation"],[3,"SimulationCudaRepresentation"],[3,"PartialSimulation"],[3,"PartialSimulation"],[3,"PartialSimulation"],[3,"EmptyActiveLineageSamplerError"],[3,"NullReporter"],[3,"False"],[3,"True"],[6,"Used"]]},\
"necsim_core_bond":{"doc":"","i":[[0,"closed_unit_f64","necsim_core_bond","",null,null],[3,"ClosedUnitF64Error","necsim_core_bond::closed_unit_f64","",null,null],[12,"0","","",0,null],[3,"ClosedUnitF64","","",null,null],[12,"0","","",1,null],[11,"new","","ErrorsReturns <code>ClosedUnitF64Error</code> if not …",1,[[["f64",15]],[["closedunitf64error",3],["result",4]]]],[11,"new_unchecked","","SafetyOnly safe iff <code>0.0 <= value <= 1.0</code>",1,[[["f64",15]]]],[11,"zero","","",1,[[]]],[11,"one","","",1,[[]]],[11,"get","","",1,[[],["f64",15]]],[11,"one_minus","","",1,[[]]],[0,"non_negative_f64","necsim_core_bond","",null,null],[3,"NonNegativeF64Error","necsim_core_bond::non_negative_f64","",null,null],[12,"0","","",2,null],[3,"NonNegativeF64","","",null,null],[12,"0","","",3,null],[11,"new","","ErrorsReturns <code>NonNegativeF64Error</code> if not <code>0.0 <= value</code>",3,[[["f64",15]],[["result",4],["nonnegativef64error",3]]]],[11,"new_unchecked","","SafetyOnly safe iff <code>0.0 <= value</code>",3,[[["f64",15]]]],[11,"zero","","",3,[[]]],[11,"infinity","","",3,[[]]],[11,"get","","",3,[[],["f64",15]]],[0,"non_zero_one_u64","necsim_core_bond","",null,null],[3,"NonZeroOneU64Error","necsim_core_bond::non_zero_one_u64","",null,null],[12,"0","","",4,null],[3,"NonZeroOneU64","","",null,null],[12,"0","","",5,null],[11,"new","","ErrorsReturns <code>NonZeroOneU64Error</code> if not <code>1 < value</code>",5,[[["u64",15]],[["nonzerooneu64error",3],["result",4]]]],[11,"new_unchecked","","Creates a non-zero, non-one u64 without checking the …",5,[[["u64",15]]]],[11,"get","","",5,[[],["u64",15]]],[0,"partition","necsim_core_bond","",null,null],[3,"PartitionRankOutOfBounds","necsim_core_bond::partition","",null,null],[12,"0","","",6,null],[12,"1","","",6,null],[3,"Partition","","",null,null],[12,"rank","","",7,null],[12,"partitions","","",7,null],[11,"try_new","","ErrorsReturns <code>PartitionRankOutOfBounds</code> if …",7,[[["u32",15],["nonzerou32",3]],[["partitionrankoutofbounds",3],["result",4]]]],[11,"rank","","",7,[[],["u32",15]]],[11,"partitions","","",7,[[],["nonzerou32",3]]],[3,"PartitionRaw","","",null,null],[12,"rank","","",8,null],[12,"partitions","","",8,null],[0,"positive_f64","necsim_core_bond","",null,null],[3,"PositiveF64Error","necsim_core_bond::positive_f64","",null,null],[12,"0","","",9,null],[3,"PositiveF64","","",null,null],[12,"0","","",10,null],[11,"new","","ErrorsReturns <code>PositiveF64Error</code> if not <code>0.0 < value</code>",10,[[["f64",15]],[["result",4],["positivef64error",3]]]],[11,"new_unchecked","","SafetyOnly safe iff <code>0.0 < value</code>",10,[[["f64",15]]]],[11,"infinity","","",10,[[]]],[11,"get","","",10,[[],["f64",15]]],[11,"max_after","","",10,[[["nonnegativef64",3]]]],[0,"positive_unit_f64","necsim_core_bond","",null,null],[3,"PositiveUnitF64Error","necsim_core_bond::positive_unit_f64","",null,null],[12,"0","","",11,null],[3,"PositiveUnitF64","","",null,null],[12,"0","","",12,null],[11,"new","","ErrorsReturns <code>PositiveUnitF64Error</code> if not …",12,[[["f64",15]],[["positiveunitf64error",3],["result",4]]]],[11,"get","","",12,[[],["f64",15]]],[3,"ClosedUnitF64","necsim_core_bond","",null,null],[12,"0","","",1,null],[3,"NonNegativeF64","","",null,null],[12,"0","","",3,null],[3,"NonZeroOneU64","","",null,null],[12,"0","","",5,null],[3,"Partition","","",null,null],[12,"rank","","",7,null],[12,"partitions","","",7,null],[3,"PositiveF64","","",null,null],[12,"0","","",10,null],[3,"PositiveUnitF64","","",null,null],[12,"0","","",12,null],[11,"borrow","necsim_core_bond::closed_unit_f64","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"as_datatype","","",1,[[]]],[11,"count","","",1,[[],["i32",15]]],[11,"pointer","","",1,[[]]],[11,"pointer_mut","","",1,[[]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","necsim_core_bond::non_negative_f64","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_string","","",2,[[],["string",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"as_datatype","","",3,[[]]],[11,"count","","",3,[[],["i32",15]]],[11,"pointer","","",3,[[]]],[11,"pointer_mut","","",3,[[]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","necsim_core_bond::non_zero_one_u64","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_string","","",4,[[],["string",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"as_datatype","","",5,[[]]],[11,"count","","",5,[[],["i32",15]]],[11,"pointer","","",5,[[]]],[11,"pointer_mut","","",5,[[]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","necsim_core_bond::partition","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_string","","",6,[[],["string",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","necsim_core_bond::positive_f64","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_string","","",9,[[],["string",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"as_datatype","","",10,[[]]],[11,"count","","",10,[[],["i32",15]]],[11,"pointer","","",10,[[]]],[11,"pointer_mut","","",10,[[]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","necsim_core_bond::positive_unit_f64","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_string","","",11,[[],["string",3]]],[11,"approx_from","","",11,[[],["result",4]]],[11,"approx_into","","",11,[[],["result",4]]],[11,"value_from","","",11,[[],["result",4]]],[11,"value_into","","",11,[[],["result",4]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"as_datatype","","",12,[[]]],[11,"count","","",12,[[],["i32",15]]],[11,"pointer","","",12,[[]]],[11,"pointer_mut","","",12,[[]]],[11,"approx_from","","",12,[[],["result",4]]],[11,"approx_into","","",12,[[],["result",4]]],[11,"value_from","","",12,[[],["result",4]]],[11,"value_into","","",12,[[],["result",4]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"fmt","necsim_core_bond::closed_unit_f64","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::non_negative_f64","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::non_zero_one_u64","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::partition","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::positive_f64","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::positive_unit_f64","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::closed_unit_f64","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::non_negative_f64","",2,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::non_zero_one_u64","",4,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::partition","",6,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::positive_f64","",9,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core_bond::positive_unit_f64","",11,[[["formatter",3]],["result",6]]],[11,"div","necsim_core_bond::non_negative_f64","",3,[[]]],[11,"eq","necsim_core_bond::closed_unit_f64","",1,[[],["bool",15]]],[11,"eq","","",1,[[["f64",15]],["bool",15]]],[11,"eq","necsim_core_bond::non_negative_f64","",3,[[],["bool",15]]],[11,"eq","","",3,[[["positivef64",3]],["bool",15]]],[11,"eq","","",3,[[["f64",15]],["bool",15]]],[11,"eq","necsim_core_bond::non_zero_one_u64","",5,[[["nonzerooneu64",3]],["bool",15]]],[11,"ne","","",5,[[["nonzerooneu64",3]],["bool",15]]],[11,"eq","necsim_core_bond::positive_f64","",10,[[],["bool",15]]],[11,"eq","","",10,[[["nonnegativef64",3]],["bool",15]]],[11,"eq","","",10,[[["f64",15]],["bool",15]]],[11,"eq","necsim_core_bond::positive_unit_f64","",12,[[],["bool",15]]],[11,"eq","","",12,[[["f64",15]],["bool",15]]],[11,"cmp","necsim_core_bond::closed_unit_f64","",1,[[],["ordering",4]]],[11,"cmp","necsim_core_bond::non_negative_f64","",3,[[],["ordering",4]]],[11,"cmp","necsim_core_bond::non_zero_one_u64","",5,[[["nonzerooneu64",3]],["ordering",4]]],[11,"cmp","necsim_core_bond::positive_f64","",10,[[],["ordering",4]]],[11,"cmp","necsim_core_bond::positive_unit_f64","",12,[[],["ordering",4]]],[11,"partial_cmp","necsim_core_bond::closed_unit_f64","",1,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core_bond::non_negative_f64","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[["positivef64",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",3,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core_bond::non_zero_one_u64","",5,[[["nonzerooneu64",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","necsim_core_bond::positive_f64","",10,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",10,[[["nonnegativef64",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",10,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core_bond::positive_unit_f64","",12,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",12,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"add","necsim_core_bond::non_negative_f64","",3,[[]]],[11,"add","","",3,[[["closedunitf64",3]]]],[11,"add","necsim_core_bond::positive_f64","",10,[[["nonnegativef64",3]]]],[11,"add","necsim_core_bond::non_negative_f64","",3,[[["positivef64",3]],["positivef64",3]]],[11,"mul","necsim_core_bond::closed_unit_f64","",1,[[]]],[11,"mul","necsim_core_bond::non_negative_f64","",3,[[]]],[11,"mul","","",3,[[["positivef64",3]]]],[11,"mul","","",3,[[["closedunitf64",3]]]],[11,"mul","necsim_core_bond::positive_f64","",10,[[]]],[11,"add_assign","necsim_core_bond::non_negative_f64","",3,[[]]],[11,"hash","necsim_core_bond::closed_unit_f64","",1,[[]]],[11,"hash","necsim_core_bond::non_negative_f64","",3,[[]]],[11,"hash","necsim_core_bond::non_zero_one_u64","",5,[[]]],[11,"hash","necsim_core_bond::positive_f64","",10,[[]]],[11,"hash","necsim_core_bond::positive_unit_f64","",12,[[]]],[11,"try_from","necsim_core_bond::closed_unit_f64","",1,[[["f64",15]],["result",4]]],[11,"try_from","necsim_core_bond::non_negative_f64","",3,[[["f64",15]],["result",4]]],[11,"try_from","necsim_core_bond::non_zero_one_u64","",5,[[["u64",15]],["result",4]]],[11,"try_from","necsim_core_bond::partition","",7,[[["partitionraw",3]],["result",4]]],[11,"try_from","necsim_core_bond::positive_f64","",10,[[["f64",15]],["result",4]]],[11,"try_from","necsim_core_bond::positive_unit_f64","",12,[[["f64",15]],["result",4]]],[11,"from","necsim_core_bond::closed_unit_f64","",1,[[["positiveunitf64",3]]]],[11,"from","necsim_core_bond::non_negative_f64","",3,[[["u32",15]]]],[11,"from","","",3,[[["u64",15]]]],[11,"from","","",3,[[["usize",15]]]],[11,"from","","",3,[[["positivef64",3]]]],[11,"from","","",3,[[["closedunitf64",3]]]],[11,"from","necsim_core_bond::positive_f64","",10,[[["nonzerou32",3]]]],[11,"from","","",10,[[["nonzerou64",3]]]],[11,"sum","necsim_core_bond::non_negative_f64","",3,[[["iterator",8]]]],[11,"clone","necsim_core_bond::closed_unit_f64","",1,[[],["closedunitf64",3]]],[11,"clone","necsim_core_bond::non_negative_f64","",3,[[],["nonnegativef64",3]]],[11,"clone","necsim_core_bond::non_zero_one_u64","",5,[[],["nonzerooneu64",3]]],[11,"clone","necsim_core_bond::partition","",7,[[],["partition",3]]],[11,"clone","","",8,[[],["partitionraw",3]]],[11,"clone","necsim_core_bond::positive_f64","",10,[[],["positivef64",3]]],[11,"clone","necsim_core_bond::positive_unit_f64","",12,[[],["positiveunitf64",3]]],[11,"serialize","necsim_core_bond::closed_unit_f64","",1,[[],["result",4]]],[11,"serialize","necsim_core_bond::non_negative_f64","",3,[[],["result",4]]],[11,"serialize","necsim_core_bond::non_zero_one_u64","",5,[[],["result",4]]],[11,"serialize","necsim_core_bond::positive_f64","",10,[[],["result",4]]],[11,"serialize","necsim_core_bond::positive_unit_f64","",12,[[],["result",4]]],[11,"deserialize","necsim_core_bond::closed_unit_f64","",1,[[],["result",4]]],[11,"deserialize","necsim_core_bond::non_negative_f64","",3,[[],["result",4]]],[11,"deserialize","necsim_core_bond::non_zero_one_u64","",5,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_core_bond::partition","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","necsim_core_bond::positive_f64","",10,[[],["result",4]]],[11,"deserialize","necsim_core_bond::positive_unit_f64","",12,[[],["result",4]]],[11,"equivalent_datatype","necsim_core_bond::closed_unit_f64","",1,[[]]],[11,"equivalent_datatype","necsim_core_bond::non_negative_f64","",3,[[]]],[11,"equivalent_datatype","necsim_core_bond::non_zero_one_u64","",5,[[]]],[11,"equivalent_datatype","necsim_core_bond::positive_f64","",10,[[]]],[11,"equivalent_datatype","necsim_core_bond::positive_unit_f64","",12,[[]]]],"p":[[3,"ClosedUnitF64Error"],[3,"ClosedUnitF64"],[3,"NonNegativeF64Error"],[3,"NonNegativeF64"],[3,"NonZeroOneU64Error"],[3,"NonZeroOneU64"],[3,"PartitionRankOutOfBounds"],[3,"Partition"],[3,"PartitionRaw"],[3,"PositiveF64Error"],[3,"PositiveF64"],[3,"PositiveUnitF64Error"],[3,"PositiveUnitF64"]]},\
"necsim_impls_cuda":{"doc":"","i":[[0,"cogs","necsim_impls_cuda","",null,null],[0,"rng","necsim_impls_cuda::cogs","",null,null],[3,"CudaRng","necsim_impls_cuda::cogs::rng","",null,null],[12,"0","","",0,null],[3,"CudaRngCudaRepresentation","","",null,null],[12,"0","","",1,null],[0,"event_buffer","necsim_impls_cuda","",null,null],[3,"EventBuffer","necsim_impls_cuda::event_buffer","",null,null],[12,"speciation_buffer","","",2,null],[12,"dispersal_buffer","","",2,null],[12,"max_events","","",2,null],[12,"event_counter","","",2,null],[12,"marker","","",2,null],[3,"EventBufferCudaRepresentation","","",null,null],[12,"speciation_buffer","","",3,null],[12,"dispersal_buffer","","",3,null],[12,"max_events","","",3,null],[12,"event_counter","","",3,null],[12,"marker","","",3,null],[11,"new","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",2,[[["gridsize",3],["blocksize",3],["usize",15]],["cudaresult",6]]],[11,"report_events","","",2,[[]]],[0,"value_buffer","necsim_impls_cuda","",null,null],[3,"ValueBuffer","necsim_impls_cuda::value_buffer","",null,null],[12,"buffer","","",4,null],[3,"ValueBufferCudaRepresentation","","",null,null],[12,"buffer","","",5,null],[11,"new","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",4,[[["gridsize",3],["blocksize",3]],["cudaresult",6]]],[11,"borrow","necsim_impls_cuda::cogs::rng","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","necsim_impls_cuda::event_buffer","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","necsim_impls_cuda::value_buffer","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"fmt","necsim_impls_cuda::cogs::rng","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_cuda::event_buffer","",2,[[["formatter",3]],["result",6]]],[11,"from","necsim_impls_cuda::cogs::rng","",0,[[]]],[11,"clone","","",0,[[],["cudarng",3]]],[11,"__contracts_impl_backup_unchecked","","",0,[[]]],[11,"from_seed","","",0,[[]]],[11,"sample_u64","","",0,[[],["u64",15]]],[11,"prime_with","","",0,[[["u64",15]]]],[11,"borrow_mut","","",0,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",0,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"borrow_mut","necsim_impls_cuda::event_buffer","",2,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",2,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"borrow_mut","necsim_impls_cuda::value_buffer","",4,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",4,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"lend_to_cuda","necsim_impls_cuda::cogs::rng","",0,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",0,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda","necsim_impls_cuda::event_buffer","",2,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",2,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda","necsim_impls_cuda::value_buffer","",4,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",4,[[["fnonce",8]],["cudaresult",6]]]],"p":[[3,"CudaRng"],[3,"CudaRngCudaRepresentation"],[3,"EventBuffer"],[3,"EventBufferCudaRepresentation"],[3,"ValueBuffer"],[3,"ValueBufferCudaRepresentation"]]},\
"necsim_impls_no_std":{"doc":"","i":[[0,"alias","necsim_impls_no_std","",null,null],[0,"packed","necsim_impls_no_std::alias","",null,null],[3,"AliasMethodSamplerAtom","necsim_impls_no_std::alias::packed","",null,null],[12,"U","","",0,null],[12,"E","","",0,null],[12,"K","","",0,null],[11,"create","","ContractsPre-condition - debug: event_weights is non-empty",0,[[],[["vec",3],["aliasmethodsampleratom",3]]]],[11,"sample_event","","ContractsPre-condition - debug: alias_samplers is …",0,[[]]],[5,"pop_overfull_underfull_pair_atomic","","",null,[[["vec",3]],["option",4]]],[3,"AliasMethodSampler","necsim_impls_no_std::alias","",null,null],[12,"Us","","",1,null],[12,"Es","","",1,null],[12,"Ks","","",1,null],[11,"new","","ContractsPre-condition - debug: event_weights is non-empty",1,[[]]],[11,"sample_event","","ContractsPost-condition - debug: returns one of the …",1,[[]]],[5,"pop_overfull_underfull_pair_atomic","","",null,[[["vec",3]],["option",4]]],[0,"cache","necsim_impls_no_std","",null,null],[3,"DirectMappedCache","necsim_impls_no_std::cache","",null,null],[12,"cache","","",2,null],[12,"build_hasher","","",2,null],[11,"with_capacity","","",2,[[["usize",15]]]],[11,"with_capacity_and_hasher","","",2,[[["usize",15]]]],[11,"capacity","","",2,[[],["usize",15]]],[11,"insert","","",2,[[],["bool",15]]],[0,"cogs","necsim_impls_no_std","",null,null],[0,"active_lineage_sampler","necsim_impls_no_std::cogs","",null,null],[0,"classical","necsim_impls_no_std::cogs::active_lineage_sampler","",null,null],[0,"sampler","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",null,null],[3,"ClassicalActiveLineageSampler","","",null,null],[12,"active_lineage_references","","",3,null],[12,"last_event_time","","",3,null],[12,"next_event_time","","",3,null],[12,"_marker","","",3,null],[11,"new","","",3,[[]]],[0,"independent","necsim_impls_no_std::cogs::active_lineage_sampler","",null,null],[0,"sampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",null,null],[0,"singular","","",null,null],[0,"event_time_sampler","","",null,null],[0,"exp","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[17,"INV_PHI","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",null,null],[3,"ExpEventTimeSampler","","",null,null],[12,"delta_t","","",4,null],[3,"ExpEventTimeSamplerCudaRepresentation","","",null,null],[12,"delta_t","","",5,null],[11,"new","","",4,[[["positivef64",3]]]],[0,"fixed","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[3,"FixedEventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",null,null],[12,"0","","",6,null],[3,"FixedEventTimeSamplerCudaRepresentation","","",null,null],[12,"0","","",7,null],[0,"geometric","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[3,"GeometricEventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",null,null],[12,"delta_t","","",8,null],[3,"GeometricEventTimeSamplerCudaRepresentation","","",null,null],[12,"delta_t","","",9,null],[11,"new","","",8,[[["positivef64",3]]]],[0,"poisson","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[17,"INV_PHI","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",null,null],[3,"PoissonEventTimeSampler","","",null,null],[12,"delta_t","","",10,null],[3,"PoissonEventTimeSamplerCudaRepresentation","","",null,null],[12,"delta_t","","",11,null],[11,"new","","",10,[[["positivef64",3]]]],[8,"EventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[11,"next_event_time_at_indexed_location_weakly_after","","ContractsPre-condition - debug: indexed_location must be …",12,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[3,"IndependentActiveLineageSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",null,null],[12,"active_lineage","","",13,null],[12,"next_event_time","","",13,null],[12,"event_time_sampler","","",13,null],[12,"marker","","",13,null],[3,"IndependentActiveLineageSamplerCudaRepresentation","","",null,null],[12,"active_lineage","","",14,null],[12,"next_event_time","","",14,null],[12,"event_time_sampler","","",14,null],[12,"marker","","",14,null],[11,"empty","","",13,[[]]],[0,"coalescence_sampler","necsim_impls_no_std::cogs","",null,null],[0,"optional_coalescence","necsim_impls_no_std::cogs::coalescence_sampler","",null,null],[5,"sample_interaction_at_location","necsim_impls_no_std::cogs::coalescence_sampler::optional_coalescence","",null,[[["location",3],["coalescencerngsample",3]]]],[0,"conditional","necsim_impls_no_std::cogs::coalescence_sampler","",null,null],[3,"ConditionalCoalescenceSampler","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",null,null],[12,"0","","",15,null],[11,"sample_coalescence_at_location","","",15,[[["location",3],["coalescencerngsample",3]]]],[11,"get_coalescence_probability_at_location","","ContractsPre-condition - debug: location is habitable",15,[[["bool",15],["location",3]],["closedunitf64",3]]],[0,"independent","necsim_impls_no_std::cogs::coalescence_sampler","",null,null],[3,"IndependentCoalescenceSampler","necsim_impls_no_std::cogs::coalescence_sampler::independent","",null,null],[12,"0","","",16,null],[3,"IndependentCoalescenceSamplerCudaRepresentation","","",null,null],[12,"0","","",17,null],[0,"unconditional","necsim_impls_no_std::cogs::coalescence_sampler","",null,null],[3,"UnconditionalCoalescenceSampler","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",null,null],[12,"0","","",18,null],[0,"dispersal_sampler","necsim_impls_no_std::cogs","",null,null],[0,"almost_infinite_normal","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[3,"AlmostInfiniteNormalDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",null,null],[12,"sigma","","",19,null],[12,"self_dispersal","","",19,null],[12,"marker","","",19,null],[3,"AlmostInfiniteNormalDispersalSamplerCudaRepresentation","","",null,null],[12,"sigma","","",20,null],[12,"self_dispersal","","",20,null],[12,"marker","","",20,null],[11,"new","","",19,[[["nonnegativef64",3]]]],[0,"in_memory","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[0,"contract","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[5,"explicit_in_memory_dispersal_check_contract","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::contract","",null,[[["array2d",3]],["bool",15]]],[0,"alias","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[0,"dispersal","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",null,null],[3,"InMemoryAliasDispersalSampler","","",null,null],[12,"alias_dispersal","","",21,null],[12,"marker","","",21,null],[0,"cumulative","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[0,"contract","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",null,null],[0,"dispersal","","",null,null],[3,"InMemoryCumulativeDispersalSampler","","",null,null],[12,"cumulative_dispersal","","",22,null],[12,"valid_dispersal_targets","","",22,null],[0,"packed_alias","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[0,"dispersal","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",null,null],[3,"InMemoryPackedAliasDispersalSampler","","",null,null],[12,"alias_dispersal_ranges","","",23,null],[12,"alias_dispersal_buffer","","",23,null],[12,"marker","","",23,null],[3,"InMemoryPackedAliasDispersalSamplerCudaRepresentation","","",null,null],[12,"alias_dispersal_ranges","","",24,null],[12,"alias_dispersal_buffer","","",24,null],[12,"marker","","",24,null],[0,"separable_alias","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[0,"dispersal","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",null,null],[3,"InMemorySeparableAliasDispersalSampler","","",null,null],[12,"alias_dispersal","","",25,null],[12,"self_dispersal","","",25,null],[12,"_marker","","",25,null],[8,"InMemoryDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[11,"unchecked_new","","ContractsPre-condition - debug: dispersal dimensions are …",26,[[["array2d",3]]]],[0,"non_spatial","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[3,"NonSpatialDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",null,null],[12,"marker","","",27,null],[3,"NonSpatialDispersalSamplerCudaRepresentation","","",null,null],[12,"marker","","",28,null],[0,"spatially_implicit","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[3,"SpatiallyImplicitDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",null,null],[12,"local","","",29,null],[12,"meta","","",29,null],[12,"local_migration_probability_per_generation","","",29,null],[3,"SpatiallyImplicitDispersalSamplerCudaRepresentation","","",null,null],[12,"local","","",30,null],[12,"meta","","",30,null],[12,"local_migration_probability_per_generation","","",30,null],[11,"new","","",29,[[["positiveunitf64",3]]]],[0,"emigration_exit","necsim_impls_no_std::cogs","",null,null],[0,"domain","necsim_impls_no_std::cogs::emigration_exit","",null,null],[3,"DomainEmigrationExit","necsim_impls_no_std::cogs::emigration_exit::domain","",null,null],[12,"decomposition","","",31,null],[12,"emigrants","","",31,null],[12,"_marker","","",31,null],[11,"new","","",31,[[]]],[11,"len","","",31,[[],["usize",15]]],[11,"is_empty","","",31,[[],["bool",15]]],[0,"independent","necsim_impls_no_std::cogs::emigration_exit","",null,null],[0,"choice","necsim_impls_no_std::cogs::emigration_exit::independent","",null,null],[0,"always","necsim_impls_no_std::cogs::emigration_exit::independent::choice","",null,null],[3,"AlwaysEmigrationChoice","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",null,null],[12,"0","","",32,null],[0,"probabilistic","necsim_impls_no_std::cogs::emigration_exit::independent::choice","",null,null],[3,"ProbabilisticEmigrationChoice","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",null,null],[12,"probability","","",33,null],[11,"new","","",33,[[["closedunitf64",3]]]],[5,"diffuse","","",null,[[["u64",15]],["u64",15]]],[8,"EmigrationChoice","necsim_impls_no_std::cogs::emigration_exit::independent::choice","",null,null],[11,"should_lineage_emigrate","","",34,[[["positivef64",3],["indexedlocation",3]],["bool",15]]],[3,"IndependentEmigrationExit","necsim_impls_no_std::cogs::emigration_exit::independent","",null,null],[12,"decomposition","","",35,null],[12,"choice","","",35,null],[12,"emigrant","","",35,null],[12,"_marker","","",35,null],[11,"new","","",35,[[]]],[11,"len","","",35,[[],["usize",15]]],[11,"is_empty","","",35,[[],["bool",15]]],[11,"take","","",35,[[],["option",4]]],[0,"never","necsim_impls_no_std::cogs::emigration_exit","",null,null],[3,"NeverEmigrationExit","necsim_impls_no_std::cogs::emigration_exit::never","",null,null],[12,"0","","",36,null],[3,"NeverEmigrationExitCudaRepresentation","","",null,null],[12,"0","","",37,null],[0,"event_sampler","necsim_impls_no_std::cogs","",null,null],[0,"gillespie","necsim_impls_no_std::cogs::event_sampler","",null,null],[0,"conditional","necsim_impls_no_std::cogs::event_sampler::gillespie","",null,null],[0,"probability","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",null,null],[3,"ProbabilityAtLocation","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional::probability","",null,null],[12,"speciation","","",38,null],[12,"out_dispersal","","",38,null],[12,"self_coalescence","","",38,null],[11,"new","","",38,[[["bool",15],["location",3],["gillespiepartialsimulation",3]]]],[11,"speciation","","",38,[[],["closedunitf64",3]]],[11,"out_dispersal","","",38,[[],["closedunitf64",3]]],[11,"self_coalescence","","",38,[[],["closedunitf64",3]]],[11,"total","","",38,[[],["closedunitf64",3]]],[3,"ConditionalGillespieEventSampler","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",null,null],[12,"0","","",39,null],[0,"unconditional","necsim_impls_no_std::cogs::event_sampler::gillespie","",null,null],[3,"UnconditionalGillespieEventSampler","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",null,null],[12,"0","","",40,null],[8,"GillespieEventSampler","necsim_impls_no_std::cogs::event_sampler::gillespie","",null,null],[11,"get_event_rate_at_location","","Pre: all lineages must be active in the lineage store",41,[[["location",3],["gillespiepartialsimulation",3]],["nonnegativef64",3]]],[3,"GillespiePartialSimulation","","",null,null],[12,"habitat","","",42,null],[12,"lineage_reference","","",42,null],[12,"lineage_store","","",42,null],[12,"dispersal_sampler","","",42,null],[12,"coalescence_sampler","","",42,null],[12,"turnover_rate","","",42,null],[12,"speciation_probability","","",42,null],[12,"_rng","","",42,null],[11,"without_emigration_exit","","",42,[[["partialsimulation",3],["fnonce",8]]]],[0,"independent","necsim_impls_no_std::cogs::event_sampler","",null,null],[3,"IndependentEventSampler","necsim_impls_no_std::cogs::event_sampler::independent","",null,null],[12,"min_spec_sample","","",43,null],[12,"marker","","",43,null],[3,"IndependentEventSamplerCudaRepresentation","","",null,null],[12,"min_spec_sample","","",44,null],[12,"marker","","",44,null],[0,"unconditional","necsim_impls_no_std::cogs::event_sampler","",null,null],[3,"UnconditionalEventSampler","necsim_impls_no_std::cogs::event_sampler::unconditional","",null,null],[12,"0","","",45,null],[0,"habitat","necsim_impls_no_std::cogs","",null,null],[0,"almost_infinite","necsim_impls_no_std::cogs::habitat","",null,null],[3,"AlmostInfiniteHabitat","necsim_impls_no_std::cogs::habitat::almost_infinite","",null,null],[12,"extent","","",46,null],[3,"AlmostInfiniteHabitatCudaRepresentation","","",null,null],[12,"extent","","",47,null],[0,"in_memory","necsim_impls_no_std::cogs::habitat","",null,null],[3,"InMemoryHabitat","necsim_impls_no_std::cogs::habitat::in_memory","",null,null],[12,"habitat","","",48,null],[12,"u64_injection","","",48,null],[12,"extent","","",48,null],[3,"InMemoryHabitatCudaRepresentation","","",null,null],[12,"habitat","","",49,null],[12,"u64_injection","","",49,null],[12,"extent","","",49,null],[11,"new","","ContractsPost-condition - debug: habitat extent has the …",48,[[["u32",15],["array2d",3]]]],[0,"non_spatial","necsim_impls_no_std::cogs::habitat","",null,null],[3,"NonSpatialHabitat","necsim_impls_no_std::cogs::habitat::non_spatial","",null,null],[12,"extent","","",50,null],[12,"deme","","",50,null],[3,"NonSpatialHabitatCudaRepresentation","","",null,null],[12,"extent","","",51,null],[12,"deme","","",51,null],[11,"new","","ContractsPost-condition - debug: creates a habitat with …",50,[[["u32",15]]]],[11,"new_with_offset","","",50,[[["u32",15]]]],[11,"get_deme","","",50,[[],["u32",15]]],[0,"spatially_implicit","necsim_impls_no_std::cogs::habitat","",null,null],[3,"SpatiallyImplicitHabitat","necsim_impls_no_std::cogs::habitat::spatially_implicit","",null,null],[12,"local","","",52,null],[12,"meta","","",52,null],[12,"extent","","",52,null],[3,"SpatiallyImplicitHabitatCudaRepresentation","","",null,null],[12,"local","","",53,null],[12,"meta","","",53,null],[12,"extent","","",53,null],[11,"new","","ContractsPost-condition - debug: creates a habitat with a …",52,[[["u32",15]]]],[11,"local","","",52,[[],["nonspatialhabitat",3]]],[11,"meta","","",52,[[],["nonspatialhabitat",3]]],[0,"immigration_entry","necsim_impls_no_std::cogs","",null,null],[0,"buffered","necsim_impls_no_std::cogs::immigration_entry","",null,null],[3,"BufferedImmigrationEntry","necsim_impls_no_std::cogs::immigration_entry::buffered","",null,null],[12,"immigrants","","",54,null],[11,"reset","","",54,[[]]],[11,"push","","",54,[[["migratinglineage",3]]]],[0,"never","necsim_impls_no_std::cogs::immigration_entry","",null,null],[3,"NeverImmigrationEntry","necsim_impls_no_std::cogs::immigration_entry::never","",null,null],[12,"0","","",55,null],[3,"NeverImmigrationEntryCudaRepresentation","","",null,null],[12,"0","","",56,null],[0,"lineage_reference","necsim_impls_no_std::cogs","",null,null],[0,"in_memory","necsim_impls_no_std::cogs::lineage_reference","",null,null],[3,"InMemoryLineageReference","necsim_impls_no_std::cogs::lineage_reference::in_memory","",null,null],[12,"0","","",57,null],[0,"lineage_store","necsim_impls_no_std::cogs","",null,null],[0,"coherent","necsim_impls_no_std::cogs::lineage_store","",null,null],[0,"globally","necsim_impls_no_std::cogs::lineage_store::coherent","",null,null],[0,"almost_infinite","necsim_impls_no_std::cogs::lineage_store::coherent::globally","",null,null],[0,"store","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",null,null],[3,"AlmostInfiniteLineageStore","","",null,null],[12,"lineages_store","","",58,null],[12,"location_to_lineage_references","","",58,null],[11,"new","","",58,[[["originsampler",8]]]],[0,"gillespie","necsim_impls_no_std::cogs::lineage_store::coherent::globally","",null,null],[0,"store","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",null,null],[3,"GillespieLineageStore","","",null,null],[12,"lineages_store","","",59,null],[12,"location_to_lineage_references","","",59,null],[12,"indexed_location_to_lineage_reference","","",59,null],[12,"_marker","","",59,null],[11,"new","","",59,[[["originsampler",8]]]],[0,"locally","necsim_impls_no_std::cogs::lineage_store::coherent","",null,null],[0,"classical","necsim_impls_no_std::cogs::lineage_store::coherent::locally","",null,null],[0,"store","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",null,null],[3,"ClassicalLineageStore","","",null,null],[12,"lineages_store","","",60,null],[12,"indexed_location_to_lineage_reference","","",60,null],[12,"_marker","","",60,null],[11,"new","","",60,[[["originsampler",8]]]],[0,"independent","necsim_impls_no_std::cogs::lineage_store","",null,null],[3,"IndependentLineageStore","necsim_impls_no_std::cogs::lineage_store::independent","",null,null],[12,"marker","","",61,null],[3,"IndependentLineageStoreCudaRepresentation","","",null,null],[12,"marker","","",62,null],[0,"origin_sampler","necsim_impls_no_std::cogs","",null,null],[0,"almost_infinite","necsim_impls_no_std::cogs::origin_sampler","",null,null],[17,"HABITAT_CENTRE","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",null,null],[3,"AlmostInfiniteOriginSampler","","",null,null],[12,"pre_sampler","","",63,null],[12,"last_index","","",63,null],[12,"location_iterator","","",63,null],[12,"radius_squared","","",63,null],[12,"upper_bound_size_hint","","",63,null],[12,"habitat","","",63,null],[11,"new","","ContractsPre-condition - debug: sample circle fits into …",63,[[["u32",15],["almostinfinitehabitat",3],["originpresampler",3]]]],[0,"decomposition","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"DecompositionOriginSampler","necsim_impls_no_std::cogs::origin_sampler::decomposition","",null,null],[12,"origin_sampler","","",64,null],[12,"decomposition","","",64,null],[11,"new","","",64,[[]]],[0,"in_memory","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"InMemoryOriginSampler","necsim_impls_no_std::cogs::origin_sampler::in_memory","",null,null],[12,"pre_sampler","","",65,null],[12,"last_index","","",65,null],[12,"location_iterator","","",65,null],[12,"next_location_index","","",65,null],[12,"habitat","","",65,null],[11,"new","","",65,[[["originpresampler",3],["inmemoryhabitat",3]]]],[0,"non_spatial","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"NonSpatialOriginSampler","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",null,null],[12,"pre_sampler","","",66,null],[12,"last_index","","",66,null],[12,"location_iterator","","",66,null],[12,"next_location_index","","",66,null],[12,"habitat","","",66,null],[11,"new","","",66,[[["originpresampler",3],["nonspatialhabitat",3]]]],[0,"pre_sampler","necsim_impls_no_std::cogs::origin_sampler","",null,null],[17,"INV_PHI","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",null,null],[3,"OriginPreSampler","","",null,null],[12,"inner","","",67,null],[12,"proportion","","",67,null],[11,"get_sample_proportion","","ContractsPost-condition - debug: returns a proportion",67,[[],["f64",15]]],[11,"all","","",67,[[]]],[11,"percentage","","ContractsPre-condition - debug: percentage is in [0, 1]",67,[[["f64",15]],["originpresampler",3]]],[11,"partition","","",67,[[["u32",15]],["originpresampler",3]]],[0,"spatially_implicit","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"SpatiallyImplicitOriginSampler","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",null,null],[12,"local_iterator","","",68,null],[12,"habitat","","",68,null],[11,"new","","",68,[[["originpresampler",3],["spatiallyimplicithabitat",3]]]],[0,"rng","necsim_impls_no_std::cogs","",null,null],[0,"aes","necsim_impls_no_std::cogs::rng","",null,null],[3,"AesRng","necsim_impls_no_std::cogs::rng::aes","",null,null],[12,"cipher","","",69,null],[12,"state","","",69,null],[12,"cached","","",69,null],[0,"fixedseahash","necsim_impls_no_std::cogs::rng","",null,null],[3,"FixedSeaHash","necsim_impls_no_std::cogs::rng::fixedseahash","",null,null],[12,"seed","","",70,null],[12,"location_index","","",70,null],[12,"time_index","","",70,null],[12,"state","","",70,null],[5,"diffuse","","",null,[[["u64",15]],["u64",15]]],[0,"seahash","necsim_impls_no_std::cogs::rng","",null,null],[3,"SeaHash","necsim_impls_no_std::cogs::rng::seahash","",null,null],[12,"seed","","",71,null],[12,"location","","",71,null],[12,"time","","",71,null],[12,"offset","","",71,null],[0,"wyhash","necsim_impls_no_std::cogs::rng","",null,null],[17,"P0","necsim_impls_no_std::cogs::rng::wyhash","",null,null],[17,"P1","","",null,null],[17,"P2","","",null,null],[17,"P5","","",null,null],[3,"WyHash","","",null,null],[12,"seed","","",72,null],[12,"state","","",72,null],[5,"wymum","","",null,[[["u64",15]],["u64",15]]],[5,"seahash_diffuse","","",null,[[["u64",15]],["u64",15]]],[0,"wyrand","necsim_impls_no_std::cogs::rng","",null,null],[3,"WyRand","necsim_impls_no_std::cogs::rng::wyrand","",null,null],[12,"0","","",73,null],[0,"xxhash","necsim_impls_no_std::cogs::rng","",null,null],[3,"XxHash","necsim_impls_no_std::cogs::rng::xxhash","",null,null],[12,"seed","","",74,null],[12,"state","","",74,null],[0,"speciation_probability","necsim_impls_no_std::cogs","",null,null],[0,"spatially_implicit","necsim_impls_no_std::cogs::speciation_probability","",null,null],[3,"SpatiallyImplicitSpeciationProbability","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",null,null],[12,"meta_speciation_probability","","",75,null],[3,"SpatiallyImplicitSpeciationProbabilityCudaRepresentation","","",null,null],[12,"meta_speciation_probability","","",76,null],[11,"new","","",75,[[["positiveunitf64",3]]]],[0,"uniform","necsim_impls_no_std::cogs::speciation_probability","",null,null],[3,"UniformSpeciationProbability","necsim_impls_no_std::cogs::speciation_probability::uniform","",null,null],[12,"speciation_probability","","",77,null],[3,"UniformSpeciationProbabilityCudaRepresentation","","",null,null],[12,"speciation_probability","","",78,null],[11,"new","","",77,[[["closedunitf64",3]]]],[0,"turnover_rate","necsim_impls_no_std::cogs","",null,null],[0,"uniform","necsim_impls_no_std::cogs::turnover_rate","",null,null],[3,"UniformTurnoverRate","necsim_impls_no_std::cogs::turnover_rate::uniform","",null,null],[12,"0","","",79,null],[3,"UniformTurnoverRateCudaRepresentation","","",null,null],[12,"0","","",80,null],[11,"get_uniform_turnover_rate","","",79,[[],["positivef64",3]]],[0,"decomposition","necsim_impls_no_std","",null,null],[0,"equal","necsim_impls_no_std::decomposition","",null,null],[0,"area","necsim_impls_no_std::decomposition::equal","",null,null],[0,"weight","","",null,null],[3,"EqualDecomposition","","",null,null],[12,"rank","","",81,null],[12,"partitions","","",81,null],[12,"extent","","",81,null],[12,"morton","","",81,null],[12,"indices","","",81,null],[12,"_marker","","",81,null],[11,"next_log2","","",81,[[["u32",15]],["u8",15]]],[11,"map_x_y_to_morton","","",81,[[["u32",15],["u8",15]],["u64",15]]],[0,"modulo","necsim_impls_no_std::decomposition","",null,null],[3,"ModuloDecomposition","necsim_impls_no_std::decomposition::modulo","",null,null],[12,"rank","","",82,null],[12,"partitions","","",82,null],[11,"new","","",82,[[["u32",15],["nonzerou32",3]]]],[0,"monolithic","necsim_impls_no_std::decomposition","",null,null],[3,"MonolithicDecomposition","necsim_impls_no_std::decomposition::monolithic","",null,null],[12,"0","","",83,null],[0,"radial","necsim_impls_no_std::decomposition","",null,null],[3,"RadialDecomposition","necsim_impls_no_std::decomposition::radial","",null,null],[12,"rank","","",84,null],[12,"partitions","","",84,null],[11,"new","","",84,[[["u32",15],["nonzerou32",3]]]],[8,"Decomposition","necsim_impls_no_std::decomposition","",null,null],[11,"get_subdomain_rank","","ContractsPost-condition - debug: subdomain rank is in …",85,[[],["u32",15]]],[11,"get_number_of_subdomains","","",85,[[],["nonzerou32",3]]],[11,"map_location_to_subdomain_rank","","ContractsPre-condition - debug: location is contained …",85,[[["location",3]],["u32",15]]],[0,"parallelisation","necsim_impls_no_std","",null,null],[0,"independent","necsim_impls_no_std::parallelisation","",null,null],[0,"reporter","necsim_impls_no_std::parallelisation::independent","",null,null],[3,"IgnoreProgressReporterProxy","necsim_impls_no_std::parallelisation::independent::reporter","",null,null],[12,"local_partition","","",86,null],[12,"_marker","","",86,null],[11,"from","","",86,[[]]],[11,"report_total_progress","","",86,[[["u64",15]]]],[11,"local_partition","","",86,[[]]],[0,"individuals","necsim_impls_no_std::parallelisation::independent","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::independent::individuals","",null,[[["speciationprobability",8],["lineage",3],["dispersalsampler",8],["neverimmigrationentry",3],["independentcoalescencesampler",3],["independenteventsampler",3],["vecdeque",3],["independentlineagestore",3],["dedupcache",4],["neveremigrationexit",3],["globallineagereference",3],["simulation",3],["nonzerou64",3],["turnoverrate",8],["independentactivelineagesampler",3],["habitat",8],["primeablerng",8]]]],[0,"landscape","necsim_impls_no_std::parallelisation::independent","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::independent::landscape","",null,[[["speciationprobability",8],["simulation",3],["dispersalsampler",8],["independenteventsampler",3],["independentcoalescencesampler",3],["lineage",3],["primeablerng",8],["vecdeque",3],["independentlineagestore",3],["dedupcache",4],["independentactivelineagesampler",3],["globallineagereference",3],["independentemigrationexit",3],["nonzerou64",3],["turnoverrate",8],["habitat",8],["neverimmigrationentry",3]]]],[0,"monolithic","necsim_impls_no_std::parallelisation::independent","",null,null],[0,"reporter","necsim_impls_no_std::parallelisation::independent::monolithic","",null,null],[0,"live","necsim_impls_no_std::parallelisation::independent::monolithic::reporter","",null,null],[3,"LiveWaterLevelReporterProxy","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::live","",null,null],[12,"water_level","","",87,null],[12,"slow_events","","",87,null],[12,"fast_events","","",87,null],[12,"local_partition","","",87,null],[12,"_marker","","",87,null],[0,"recorded","necsim_impls_no_std::parallelisation::independent::monolithic::reporter","",null,null],[3,"RecordedWaterLevelReporterProxy","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::recorded","",null,null],[12,"water_level","","",88,null],[12,"local_partition","","",88,null],[12,"_marker","","",88,null],[8,"WaterLevelReporterProxy","necsim_impls_no_std::parallelisation::independent::monolithic::reporter","",null,null],[11,"new","","",89,[[["usize",15]]]],[11,"water_level","","",89,[[],["nonnegativef64",3]]],[11,"advance_water_level","","ContractsPre-condition - debug: advances the water level",89,[[["nonnegativef64",3]]]],[11,"local_partition","","",89,[[]]],[4,"WaterLevelReporterStrategy","","",null,null],[8,"WaterLevelReporterConstructor","","",null,null],[16,"WaterLevelReporter","","",90,null],[5,"simulate","necsim_impls_no_std::parallelisation::independent::monolithic","",null,[[["speciationprobability",8],["lineage",3],["dispersalsampler",8],["neverimmigrationentry",3],["independentcoalescencesampler",3],["independenteventsampler",3],["vecdeque",3],["nonzerousize",3],["independentlineagestore",3],["dedupcache",4],["neveremigrationexit",3],["globallineagereference",3],["simulation",3],["nonzerou64",3],["turnoverrate",8],["independentactivelineagesampler",3],["habitat",8],["primeablerng",8]]]],[3,"AbsoluteDedupCache","necsim_impls_no_std::parallelisation::independent","",null,null],[12,"capacity","","",91,null],[3,"RelativeDedupCache","","",null,null],[12,"factor","","",92,null],[4,"DedupCache","","",null,null],[13,"Absolute","","",93,null],[13,"Relative","","",93,null],[13,"None","","",93,null],[11,"construct","","",93,[[["usize",15]],[["partialeq",8],["directmappedcache",3],["hash",8]]]],[0,"monolithic","necsim_impls_no_std::parallelisation","",null,null],[0,"reporter","necsim_impls_no_std::parallelisation::monolithic","",null,null],[3,"BufferingReporterProxy","necsim_impls_no_std::parallelisation::monolithic::reporter","",null,null],[12,"local_partition","","",94,null],[12,"event_buffer","","",94,null],[12,"_marker","","",94,null],[11,"from","","",94,[[]]],[11,"clear_events","","",94,[[]]],[11,"report_events","","",94,[[]]],[11,"local_partition","","",94,[[]]],[0,"averaging","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::averaging","",null,[[["speciationprobability",8],["positivef64",3],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[0,"lockstep","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::lockstep","",null,[[["speciationprobability",8],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[0,"monolithic","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::monolithic","",null,[[["speciationprobability",8],["neveremigrationexit",3],["lineagereference",8],["simulation",3],["rngcore",8],["locallycoherentlineagestore",8],["dispersalsampler",8],["coalescencesampler",8],["eventsampler",8],["activelineagesampler",8],["turnoverrate",8],["habitat",8],["neverimmigrationentry",3]]]],[0,"optimistic","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::optimistic","",null,[[["speciationprobability",8],["positivef64",3],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[0,"optimistic_lockstep","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::optimistic_lockstep","",null,[[["speciationprobability",8],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[11,"borrow","necsim_impls_no_std::alias::packed","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::alias","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cache","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"peek_optional_time_of_next_event","","",3,[[],[["positivef64",3],["option",4]]]],[11,"peek_optional_time_of_next_event","","",3,[[],[["positivef64",3],["option",4]]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"approx_from","","",11,[[],["result",4]]],[11,"approx_into","","",11,[[],["result",4]]],[11,"value_from","","",11,[[],["result",4]]],[11,"value_into","","",11,[[],["result",4]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"peek_optional_time_of_next_event","","",13,[[],[["positivef64",3],["option",4]]]],[11,"peek_optional_time_of_next_event","","",13,[[],[["positivef64",3],["option",4]]]],[11,"approx_from","","",13,[[],["result",4]]],[11,"approx_into","","",13,[[],["result",4]]],[11,"value_from","","",13,[[],["result",4]]],[11,"value_into","","",13,[[],["result",4]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"approx_from","","",14,[[],["result",4]]],[11,"approx_into","","",14,[[],["result",4]]],[11,"value_from","","",14,[[],["result",4]]],[11,"value_into","","",14,[[],["result",4]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"approx_from","","",15,[[],["result",4]]],[11,"approx_into","","",15,[[],["result",4]]],[11,"value_from","","",15,[[],["result",4]]],[11,"value_into","","",15,[[],["result",4]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::coalescence_sampler::independent","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"approx_from","","",16,[[],["result",4]]],[11,"approx_into","","",16,[[],["result",4]]],[11,"value_from","","",16,[[],["result",4]]],[11,"value_into","","",16,[[],["result",4]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"approx_from","","",17,[[],["result",4]]],[11,"approx_into","","",17,[[],["result",4]]],[11,"value_from","","",17,[[],["result",4]]],[11,"value_into","","",17,[[],["result",4]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"approx_from","","",18,[[],["result",4]]],[11,"approx_into","","",18,[[],["result",4]]],[11,"value_from","","",18,[[],["result",4]]],[11,"value_into","","",18,[[],["result",4]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"approx_from","","",19,[[],["result",4]]],[11,"approx_into","","",19,[[],["result",4]]],[11,"value_from","","",19,[[],["result",4]]],[11,"value_into","","",19,[[],["result",4]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"approx_from","","",20,[[],["result",4]]],[11,"approx_into","","",20,[[],["result",4]]],[11,"value_from","","",20,[[],["result",4]]],[11,"value_into","","",20,[[],["result",4]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"approx_from","","",21,[[],["result",4]]],[11,"approx_into","","",21,[[],["result",4]]],[11,"value_from","","",21,[[],["result",4]]],[11,"value_into","","",21,[[],["result",4]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"approx_from","","",22,[[],["result",4]]],[11,"approx_into","","",22,[[],["result",4]]],[11,"value_from","","",22,[[],["result",4]]],[11,"value_into","","",22,[[],["result",4]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"approx_from","","",23,[[],["result",4]]],[11,"approx_into","","",23,[[],["result",4]]],[11,"value_from","","",23,[[],["result",4]]],[11,"value_into","","",23,[[],["result",4]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"approx_from","","",24,[[],["result",4]]],[11,"approx_into","","",24,[[],["result",4]]],[11,"value_from","","",24,[[],["result",4]]],[11,"value_into","","",24,[[],["result",4]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"approx_from","","",25,[[],["result",4]]],[11,"approx_into","","",25,[[],["result",4]]],[11,"value_from","","",25,[[],["result",4]]],[11,"value_into","","",25,[[],["result",4]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"approx_from","","",27,[[],["result",4]]],[11,"approx_into","","",27,[[],["result",4]]],[11,"value_from","","",27,[[],["result",4]]],[11,"value_into","","",27,[[],["result",4]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"approx_from","","",28,[[],["result",4]]],[11,"approx_into","","",28,[[],["result",4]]],[11,"value_from","","",28,[[],["result",4]]],[11,"value_into","","",28,[[],["result",4]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"approx_from","","",29,[[],["result",4]]],[11,"approx_into","","",29,[[],["result",4]]],[11,"value_from","","",29,[[],["result",4]]],[11,"value_into","","",29,[[],["result",4]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"approx_from","","",30,[[],["result",4]]],[11,"approx_into","","",30,[[],["result",4]]],[11,"value_from","","",30,[[],["result",4]]],[11,"value_into","","",30,[[],["result",4]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::domain","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"into_iter","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"approx_from","","",31,[[],["result",4]]],[11,"approx_into","","",31,[[],["result",4]]],[11,"value_from","","",31,[[],["result",4]]],[11,"value_into","","",31,[[],["result",4]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"approx_from","","",32,[[],["result",4]]],[11,"approx_into","","",32,[[],["result",4]]],[11,"value_from","","",32,[[],["result",4]]],[11,"value_into","","",32,[[],["result",4]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"approx_from","","",33,[[],["result",4]]],[11,"approx_into","","",33,[[],["result",4]]],[11,"value_from","","",33,[[],["result",4]]],[11,"value_into","","",33,[[],["result",4]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::independent","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"approx_from","","",35,[[],["result",4]]],[11,"approx_into","","",35,[[],["result",4]]],[11,"value_from","","",35,[[],["result",4]]],[11,"value_into","","",35,[[],["result",4]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::never","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"approx_from","","",36,[[],["result",4]]],[11,"approx_into","","",36,[[],["result",4]]],[11,"value_from","","",36,[[],["result",4]]],[11,"value_into","","",36,[[],["result",4]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"approx_from","","",37,[[],["result",4]]],[11,"approx_into","","",37,[[],["result",4]]],[11,"value_from","","",37,[[],["result",4]]],[11,"value_into","","",37,[[],["result",4]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional::probability","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"approx_from","","",38,[[],["result",4]]],[11,"approx_into","","",38,[[],["result",4]]],[11,"value_from","","",38,[[],["result",4]]],[11,"value_into","","",38,[[],["result",4]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"approx_from","","",39,[[],["result",4]]],[11,"approx_into","","",39,[[],["result",4]]],[11,"value_from","","",39,[[],["result",4]]],[11,"value_into","","",39,[[],["result",4]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"approx_from","","",40,[[],["result",4]]],[11,"approx_into","","",40,[[],["result",4]]],[11,"value_from","","",40,[[],["result",4]]],[11,"value_into","","",40,[[],["result",4]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::gillespie","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"approx_from","","",42,[[],["result",4]]],[11,"approx_into","","",42,[[],["result",4]]],[11,"value_from","","",42,[[],["result",4]]],[11,"value_into","","",42,[[],["result",4]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::independent","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"approx_from","","",43,[[],["result",4]]],[11,"approx_into","","",43,[[],["result",4]]],[11,"value_from","","",43,[[],["result",4]]],[11,"value_into","","",43,[[],["result",4]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"approx_from","","",44,[[],["result",4]]],[11,"approx_into","","",44,[[],["result",4]]],[11,"value_from","","",44,[[],["result",4]]],[11,"value_into","","",44,[[],["result",4]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::unconditional","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"approx_from","","",45,[[],["result",4]]],[11,"approx_into","","",45,[[],["result",4]]],[11,"value_from","","",45,[[],["result",4]]],[11,"value_into","","",45,[[],["result",4]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::almost_infinite","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"approx_from","","",46,[[],["result",4]]],[11,"approx_into","","",46,[[],["result",4]]],[11,"value_from","","",46,[[],["result",4]]],[11,"value_into","","",46,[[],["result",4]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"approx_from","","",47,[[],["result",4]]],[11,"approx_into","","",47,[[],["result",4]]],[11,"value_from","","",47,[[],["result",4]]],[11,"value_into","","",47,[[],["result",4]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::in_memory","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"approx_from","","",48,[[],["result",4]]],[11,"approx_into","","",48,[[],["result",4]]],[11,"value_from","","",48,[[],["result",4]]],[11,"value_into","","",48,[[],["result",4]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"approx_from","","",49,[[],["result",4]]],[11,"approx_into","","",49,[[],["result",4]]],[11,"value_from","","",49,[[],["result",4]]],[11,"value_into","","",49,[[],["result",4]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::non_spatial","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"approx_from","","",50,[[],["result",4]]],[11,"approx_into","","",50,[[],["result",4]]],[11,"value_from","","",50,[[],["result",4]]],[11,"value_into","","",50,[[],["result",4]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"approx_from","","",51,[[],["result",4]]],[11,"approx_into","","",51,[[],["result",4]]],[11,"value_from","","",51,[[],["result",4]]],[11,"value_into","","",51,[[],["result",4]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::spatially_implicit","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"approx_from","","",52,[[],["result",4]]],[11,"approx_into","","",52,[[],["result",4]]],[11,"value_from","","",52,[[],["result",4]]],[11,"value_into","","",52,[[],["result",4]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"approx_from","","",53,[[],["result",4]]],[11,"approx_into","","",53,[[],["result",4]]],[11,"value_from","","",53,[[],["result",4]]],[11,"value_into","","",53,[[],["result",4]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::immigration_entry::buffered","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"approx_from","","",54,[[],["result",4]]],[11,"approx_into","","",54,[[],["result",4]]],[11,"value_from","","",54,[[],["result",4]]],[11,"value_into","","",54,[[],["result",4]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::immigration_entry::never","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"approx_from","","",55,[[],["result",4]]],[11,"approx_into","","",55,[[],["result",4]]],[11,"value_from","","",55,[[],["result",4]]],[11,"value_into","","",55,[[],["result",4]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"approx_from","","",56,[[],["result",4]]],[11,"approx_into","","",56,[[],["result",4]]],[11,"value_from","","",56,[[],["result",4]]],[11,"value_into","","",56,[[],["result",4]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_reference::in_memory","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"approx_from","","",57,[[],["result",4]]],[11,"approx_into","","",57,[[],["result",4]]],[11,"value_from","","",57,[[],["result",4]]],[11,"value_into","","",57,[[],["result",4]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"get_hash","","",57,[[],["u64",15]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"approx_from","","",58,[[],["result",4]]],[11,"approx_into","","",58,[[],["result",4]]],[11,"value_from","","",58,[[],["result",4]]],[11,"value_into","","",58,[[],["result",4]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"approx_from","","",59,[[],["result",4]]],[11,"approx_into","","",59,[[],["result",4]]],[11,"value_from","","",59,[[],["result",4]]],[11,"value_into","","",59,[[],["result",4]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"approx_from","","",60,[[],["result",4]]],[11,"approx_into","","",60,[[],["result",4]]],[11,"value_from","","",60,[[],["result",4]]],[11,"value_into","","",60,[[],["result",4]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::independent","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"approx_from","","",61,[[],["result",4]]],[11,"approx_into","","",61,[[],["result",4]]],[11,"value_from","","",61,[[],["result",4]]],[11,"value_into","","",61,[[],["result",4]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"approx_from","","",62,[[],["result",4]]],[11,"approx_into","","",62,[[],["result",4]]],[11,"value_from","","",62,[[],["result",4]]],[11,"value_into","","",62,[[],["result",4]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"into_iter","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"approx_from","","",63,[[],["result",4]]],[11,"approx_into","","",63,[[],["result",4]]],[11,"value_from","","",63,[[],["result",4]]],[11,"value_into","","",63,[[],["result",4]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::decomposition","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"into_iter","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"approx_from","","",64,[[],["result",4]]],[11,"approx_into","","",64,[[],["result",4]]],[11,"value_from","","",64,[[],["result",4]]],[11,"value_into","","",64,[[],["result",4]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::in_memory","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"into_iter","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"approx_from","","",65,[[],["result",4]]],[11,"approx_into","","",65,[[],["result",4]]],[11,"value_from","","",65,[[],["result",4]]],[11,"value_into","","",65,[[],["result",4]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"into_iter","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"approx_from","","",66,[[],["result",4]]],[11,"approx_into","","",66,[[],["result",4]]],[11,"value_from","","",66,[[],["result",4]]],[11,"value_into","","",66,[[],["result",4]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"approx_from","","",67,[[],["result",4]]],[11,"approx_into","","",67,[[],["result",4]]],[11,"value_from","","",67,[[],["result",4]]],[11,"value_into","","",67,[[],["result",4]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"into_iter","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"approx_from","","",68,[[],["result",4]]],[11,"approx_into","","",68,[[],["result",4]]],[11,"value_from","","",68,[[],["result",4]]],[11,"value_into","","",68,[[],["result",4]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::aes","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"approx_from","","",69,[[],["result",4]]],[11,"approx_into","","",69,[[],["result",4]]],[11,"value_from","","",69,[[],["result",4]]],[11,"value_into","","",69,[[],["result",4]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::fixedseahash","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"approx_from","","",70,[[],["result",4]]],[11,"approx_into","","",70,[[],["result",4]]],[11,"value_from","","",70,[[],["result",4]]],[11,"value_into","","",70,[[],["result",4]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::seahash","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"approx_from","","",71,[[],["result",4]]],[11,"approx_into","","",71,[[],["result",4]]],[11,"value_from","","",71,[[],["result",4]]],[11,"value_into","","",71,[[],["result",4]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::wyhash","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"approx_from","","",72,[[],["result",4]]],[11,"approx_into","","",72,[[],["result",4]]],[11,"value_from","","",72,[[],["result",4]]],[11,"value_into","","",72,[[],["result",4]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::wyrand","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"approx_from","","",73,[[],["result",4]]],[11,"approx_into","","",73,[[],["result",4]]],[11,"value_from","","",73,[[],["result",4]]],[11,"value_into","","",73,[[],["result",4]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::xxhash","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"approx_from","","",74,[[],["result",4]]],[11,"approx_into","","",74,[[],["result",4]]],[11,"value_from","","",74,[[],["result",4]]],[11,"value_into","","",74,[[],["result",4]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"approx_from","","",75,[[],["result",4]]],[11,"approx_into","","",75,[[],["result",4]]],[11,"value_from","","",75,[[],["result",4]]],[11,"value_into","","",75,[[],["result",4]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"approx_from","","",76,[[],["result",4]]],[11,"approx_into","","",76,[[],["result",4]]],[11,"value_from","","",76,[[],["result",4]]],[11,"value_into","","",76,[[],["result",4]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::speciation_probability::uniform","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"approx_from","","",77,[[],["result",4]]],[11,"approx_into","","",77,[[],["result",4]]],[11,"value_from","","",77,[[],["result",4]]],[11,"value_into","","",77,[[],["result",4]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"approx_from","","",78,[[],["result",4]]],[11,"approx_into","","",78,[[],["result",4]]],[11,"value_from","","",78,[[],["result",4]]],[11,"value_into","","",78,[[],["result",4]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::turnover_rate::uniform","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"approx_from","","",79,[[],["result",4]]],[11,"approx_into","","",79,[[],["result",4]]],[11,"value_from","","",79,[[],["result",4]]],[11,"value_into","","",79,[[],["result",4]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"approx_from","","",80,[[],["result",4]]],[11,"approx_into","","",80,[[],["result",4]]],[11,"value_from","","",80,[[],["result",4]]],[11,"value_into","","",80,[[],["result",4]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::equal","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"approx_from","","",81,[[],["result",4]]],[11,"approx_into","","",81,[[],["result",4]]],[11,"value_from","","",81,[[],["result",4]]],[11,"value_into","","",81,[[],["result",4]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::modulo","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"approx_from","","",82,[[],["result",4]]],[11,"approx_into","","",82,[[],["result",4]]],[11,"value_from","","",82,[[],["result",4]]],[11,"value_into","","",82,[[],["result",4]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::monolithic","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"approx_from","","",83,[[],["result",4]]],[11,"approx_into","","",83,[[],["result",4]]],[11,"value_from","","",83,[[],["result",4]]],[11,"value_into","","",83,[[],["result",4]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::radial","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"approx_from","","",84,[[],["result",4]]],[11,"approx_into","","",84,[[],["result",4]]],[11,"value_from","","",84,[[],["result",4]]],[11,"value_into","","",84,[[],["result",4]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::independent::reporter","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"approx_from","","",86,[[],["result",4]]],[11,"approx_into","","",86,[[],["result",4]]],[11,"value_from","","",86,[[],["result",4]]],[11,"value_into","","",86,[[],["result",4]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::live","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"approx_from","","",87,[[],["result",4]]],[11,"approx_into","","",87,[[],["result",4]]],[11,"value_from","","",87,[[],["result",4]]],[11,"value_into","","",87,[[],["result",4]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::recorded","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"approx_from","","",88,[[],["result",4]]],[11,"approx_into","","",88,[[],["result",4]]],[11,"value_from","","",88,[[],["result",4]]],[11,"value_into","","",88,[[],["result",4]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::independent::monolithic::reporter","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"approx_from","","",95,[[],["result",4]]],[11,"approx_into","","",95,[[],["result",4]]],[11,"value_from","","",95,[[],["result",4]]],[11,"value_into","","",95,[[],["result",4]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::independent","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"approx_from","","",91,[[],["result",4]]],[11,"approx_into","","",91,[[],["result",4]]],[11,"value_from","","",91,[[],["result",4]]],[11,"value_into","","",91,[[],["result",4]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"approx_from","","",92,[[],["result",4]]],[11,"approx_into","","",92,[[],["result",4]]],[11,"value_from","","",92,[[],["result",4]]],[11,"value_into","","",92,[[],["result",4]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"approx_from","","",93,[[],["result",4]]],[11,"approx_into","","",93,[[],["result",4]]],[11,"value_from","","",93,[[],["result",4]]],[11,"value_into","","",93,[[],["result",4]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::monolithic::reporter","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"approx_from","","",94,[[],["result",4]]],[11,"approx_into","","",94,[[],["result",4]]],[11,"value_from","","",94,[[],["result",4]]],[11,"value_into","","",94,[[],["result",4]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",6,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",8,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",10,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","Creates a new <code>InMemoryAliasDispersalSampler</code> from the …",21,[[["array2d",3]]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","Creates a new <code>InMemoryCumulativeDispersalSampler</code> from the …",22,[[["array2d",3]]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","Creates a new <code>InMemoryPackedAliasDispersalSampler</code> from the…",23,[[["array2d",3]]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","Creates a new <code>InMemorySeparableAliasDispersalSampler</code> from …",25,[[["array2d",3]]]],[11,"__contracts_impl_should_lineage_emigrate","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",32,[[["positivef64",3],["indexedlocation",3]],["bool",15]]],[11,"__contracts_impl_should_lineage_emigrate","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",33,[[["positivef64",3],["indexedlocation",3]],["bool",15]]],[11,"__contracts_impl_get_event_rate_at_location","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",39,[[["location",3],["gillespiepartialsimulation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_get_event_rate_at_location","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",40,[[["location",3],["gillespiepartialsimulation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::equal","",81,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",81,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","ContractsPre-condition - debug: habitat has a matching …",81,[[["location",3]],["u32",15]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::modulo","",82,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",82,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","",82,[[["location",3]],["u32",15]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::monolithic","",83,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",83,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","",83,[[["location",3]],["u32",15]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::radial","",84,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",84,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","",84,[[["location",3]],["u32",15]]],[11,"__contracts_impl_new","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::live","",87,[[["usize",15]]]],[11,"__contracts_impl_water_level","","",87,[[],["nonnegativef64",3]]],[11,"__contracts_impl_advance_water_level","","",87,[[["nonnegativef64",3]]]],[11,"__contracts_impl_local_partition","","",87,[[]]],[11,"__contracts_impl_new","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::recorded","",88,[[["usize",15]]]],[11,"__contracts_impl_water_level","","",88,[[],["nonnegativef64",3]]],[11,"__contracts_impl_advance_water_level","","",88,[[["nonnegativef64",3]]]],[11,"__contracts_impl_local_partition","","",88,[[]]],[11,"deref","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",67,[[]]],[11,"deref_mut","","",67,[[]]],[11,"fmt","necsim_impls_no_std::alias::packed","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",6,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",8,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",10,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",15,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::coalescence_sampler::independent","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",18,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",19,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",21,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",22,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",23,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",25,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",27,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",29,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::domain","",31,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",32,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",33,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::independent","",35,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::never","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",39,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",40,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::independent","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::unconditional","",45,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::almost_infinite","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::in_memory","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::non_spatial","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::spatially_implicit","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::immigration_entry::buffered","",54,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::immigration_entry::never","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_reference::in_memory","",57,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",58,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",59,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",60,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::independent","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",63,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::decomposition","",64,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::in_memory","",65,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",66,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",67,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",68,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::aes","",69,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::fixedseahash","",70,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::seahash","",71,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::wyhash","",72,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::wyrand","",73,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::xxhash","",74,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",75,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::speciation_probability::uniform","",77,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::turnover_rate::uniform","",79,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::equal","",81,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::modulo","",82,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::monolithic","",83,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::radial","",84,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::parallelisation::independent::reporter","",86,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::live","",87,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::recorded","",88,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::parallelisation::independent","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::parallelisation::monolithic::reporter","",94,[[["formatter",3]],["result",6]]],[11,"eq","necsim_impls_no_std::cogs::lineage_reference::in_memory","",57,[[["inmemorylineagereference",3]],["bool",15]]],[11,"ne","","",57,[[["inmemorylineagereference",3]],["bool",15]]],[11,"drop","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::live","",87,[[]]],[11,"index","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","ContractsPre-condition - debug: lineage reference is …",58,[[["inmemorylineagereference",3]]]],[11,"index","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","ContractsPre-condition - debug: lineage reference is …",59,[[["inmemorylineagereference",3]]]],[11,"index","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","ContractsPre-condition - debug: lineage reference is …",60,[[["inmemorylineagereference",3]]]],[11,"hash","necsim_impls_no_std::cogs::lineage_reference::in_memory","",57,[[]]],[11,"from","","",57,[[["usize",15]]]],[11,"next","necsim_impls_no_std::cogs::emigration_exit::domain","",31,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",63,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::decomposition","",64,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::in_memory","",65,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",66,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",68,[[],["option",4]]],[11,"clone","necsim_impls_no_std::alias::packed","",0,[[],["aliasmethodsampleratom",3]]],[11,"clone","necsim_impls_no_std::alias","",1,[[],["aliasmethodsampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[],["expeventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",6,[[],["fixedeventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",8,[[],["geometriceventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",10,[[],["poissoneventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::lineage_reference::in_memory","",57,[[],["inmemorylineagereference",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::aes","",69,[[],["aesrng",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::fixedseahash","",70,[[],["fixedseahash",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::seahash","",71,[[],["seahash",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::wyhash","",72,[[],["wyhash",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::wyrand","",73,[[],["wyrand",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::xxhash","",74,[[],["xxhash",3]]],[11,"default","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",6,[[]]],[11,"default","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",15,[[]]],[11,"default","necsim_impls_no_std::cogs::coalescence_sampler::independent","",16,[[]]],[11,"default","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",18,[[]]],[11,"default","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",27,[[]]],[11,"default","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",32,[[]]],[11,"default","necsim_impls_no_std::cogs::emigration_exit::never","",36,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",39,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",40,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::independent","",43,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::unconditional","",45,[[]]],[11,"default","necsim_impls_no_std::cogs::habitat::almost_infinite","",46,[[]]],[11,"default","necsim_impls_no_std::cogs::immigration_entry::buffered","",54,[[]]],[11,"default","necsim_impls_no_std::cogs::immigration_entry::never","",55,[[]]],[11,"default","necsim_impls_no_std::cogs::lineage_store::independent","",61,[[]]],[11,"default","necsim_impls_no_std::cogs::turnover_rate::uniform","",79,[[]]],[11,"default","necsim_impls_no_std::decomposition::monolithic","",83,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",13,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",15,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::coalescence_sampler::independent","",16,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",18,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",19,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",21,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",22,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",23,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",25,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",27,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",29,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::domain","",31,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",32,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",33,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::independent","",35,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::never","",36,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",39,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",40,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::independent","",43,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::unconditional","",45,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::almost_infinite","",46,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::in_memory","",48,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::non_spatial","",50,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::spatially_implicit","",52,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::immigration_entry::buffered","",54,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::immigration_entry::never","",55,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_reference::in_memory","",57,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",58,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",59,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",60,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::independent","",61,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::aes","",69,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::fixedseahash","",70,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::seahash","",71,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::wyhash","",72,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::wyrand","",73,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::xxhash","",74,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",75,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::speciation_probability::uniform","",77,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::turnover_rate::uniform","",79,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::equal","",81,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::modulo","",82,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::monolithic","",83,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::radial","",84,[[]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::almost_infinite","",46,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",46,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",46,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",46,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::in_memory","",48,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",48,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",48,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",48,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::non_spatial","",50,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",50,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",50,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",50,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::spatially_implicit","",52,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",52,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",52,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",52,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",63,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",63,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::decomposition","",64,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",64,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::in_memory","",65,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",65,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",66,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",66,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",68,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",68,[[],["u64",15]]],[11,"__contracts_impl_get_speciation_probability_at_location","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","ContractsPre-condition - debug: location is inside either …",75,[[["location",3],["spatiallyimplicithabitat",3]],["closedunitf64",3]]],[11,"__contracts_impl_get_speciation_probability_at_location","necsim_impls_no_std::cogs::speciation_probability::uniform","",77,[[["location",3]],["closedunitf64",3]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::aes","",69,[[]]],[11,"sample_u64","","",69,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::fixedseahash","",70,[[]]],[11,"sample_u64","","",70,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::seahash","",71,[[]]],[11,"sample_u64","","",71,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::wyhash","",72,[[]]],[11,"sample_u64","","",72,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::wyrand","",73,[[]]],[11,"sample_u64","","",73,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::xxhash","",74,[[]]],[11,"sample_u64","","",74,[[],["u64",15]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::aes","",69,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::fixedseahash","",70,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::seahash","",71,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::wyhash","",72,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::xxhash","",74,[[["u64",15]]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",19,[[["location",3],["almostinfinitehabitat",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",21,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",22,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",23,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",25,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",27,[[["nonspatialhabitat",3],["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","ContractsPre-condition - debug: location is inside either …",29,[[["location",3],["spatiallyimplicithabitat",3]],["location",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",19,[[["location",3],["almostinfinitehabitat",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","",19,[[["location",3],["almostinfinitehabitat",3]],["closedunitf64",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",25,[[["location",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside …",25,[[["location",3]],["closedunitf64",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","ContractsPre-condition - debug: a different, non-self …",27,[[["nonspatialhabitat",3],["location",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","",27,[[["nonspatialhabitat",3],["location",3]],["closedunitf64",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","ContractsPre-condition - debug: location is inside either …",29,[[["location",3],["spatiallyimplicithabitat",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside either …",29,[[["location",3],["spatiallyimplicithabitat",3]],["closedunitf64",3]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",58,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",58,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",58,[[]]],[11,"__contracts_impl_get","","",58,[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",59,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",59,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",59,[[]]],[11,"__contracts_impl_get","","",59,[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",60,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",60,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",60,[[]]],[11,"__contracts_impl_get","","",60,[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::independent","",61,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",61,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",61,[[]]],[11,"__contracts_impl_get","","",61,[[["globallineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_get_active_global_lineage_reference_at_indexed_location","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","ContractsPre-condition - debug: only one lineage per …",58,[[["almostinfinitehabitat",3],["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","","ContractsPre-condition - debug: only one lineage per …",58,[[["almostinfinitehabitat",3],["indexedlocation",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_extract_lineage_from_its_location_locally_coherent","","ContractsPre-condition - debug: only one lineage per …",58,[[["positivef64",3],["almostinfinitehabitat",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_emigrate","","",58,[[["inmemorylineagereference",3]],["globallineagereference",3]]],[11,"__contracts_impl_immigrate_locally_coherent","","",58,[[["positivef64",3],["almostinfinitehabitat",3],["globallineagereference",3],["indexedlocation",3]],["inmemorylineagereference",3]]],[11,"__contracts_impl_get_active_global_lineage_reference_at_indexed_location","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",59,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","","",59,[[["indexedlocation",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_extract_lineage_from_its_location_locally_coherent","","",59,[[["positivef64",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_emigrate","","",59,[[["inmemorylineagereference",3]],["globallineagereference",3]]],[11,"__contracts_impl_immigrate_locally_coherent","","",59,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]],["inmemorylineagereference",3]]],[11,"__contracts_impl_get_active_global_lineage_reference_at_indexed_location","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",60,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","","",60,[[["indexedlocation",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_extract_lineage_from_its_location_locally_coherent","","",60,[[["positivef64",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_emigrate","","",60,[[["inmemorylineagereference",3]],["globallineagereference",3]]],[11,"__contracts_impl_immigrate_locally_coherent","","",60,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]],["inmemorylineagereference",3]]],[11,"__contracts_impl_iter_active_locations","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",58,[[["almostinfinitehabitat",3]]]],[11,"__contracts_impl_get_active_local_lineage_references_at_location_unordered","","",58,[[["location",3],["almostinfinitehabitat",3]]]],[11,"__contracts_impl_iter_active_locations","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",59,[[]]],[11,"__contracts_impl_get_active_local_lineage_references_at_location_unordered","","",59,[[["location",3]]]],[11,"__contracts_impl_optionally_emigrate","necsim_impls_no_std::cogs::emigration_exit::domain","ContractsPost-condition - debug: lineage only emigrates …",31,[[["nonnegativef64",3],["location",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],["option",4]]],[11,"__contracts_impl_optionally_emigrate","necsim_impls_no_std::cogs::emigration_exit::independent","ContractsPre-condition - debug: can only hold one emigrant",35,[[["positivef64",3],["partialsimulation",3],["location",3],["nonnegativef64",3],["globallineagereference",3],["indexedlocation",3]],["option",4]]],[11,"__contracts_impl_optionally_emigrate","necsim_impls_no_std::cogs::emigration_exit::never","ContractsPost-condition - debug: lineage never emigrates",36,[[["nonnegativef64",3],["location",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],["option",4]]],[11,"__contracts_impl_sample_interaction_at_location","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",15,[[["location",3],["coalescencerngsample",3]]]],[11,"__contracts_impl_sample_interaction_at_location","necsim_impls_no_std::cogs::coalescence_sampler::independent","ContractsPost-condition - debug: always reports maybe",16,[[["coalescencerngsample",3],["location",3],["independentlineagestore",3]]]],[11,"__contracts_impl_sample_interaction_at_location","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",18,[[["location",3],["coalescencerngsample",3]]]],[11,"__contracts_impl_get_turnover_rate_at_location","necsim_impls_no_std::cogs::turnover_rate::uniform","",79,[[["location",3]],["nonnegativef64",3]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","ContractsPost-condition - debug: event occurs for …",39,[[["partialsimulation",3],["nonnegativef64",3],["indexedlocation",3],["positivef64",3]],[["packedevent",3],["option",4]]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","ContractsPost-condition - debug: event occurs for …",40,[[["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],[["packedevent",3],["option",4]]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::independent","",43,[[["positivef64",3],["partialsimulation",3],["nonnegativef64",3],["globallineagereference",3],["indexedlocation",3]],[["packedevent",3],["option",4]]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::unconditional","ContractsPost-condition - debug: event occurs for …",45,[[["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],[["packedevent",3],["option",4]]]],[11,"replace_min_speciation","necsim_impls_no_std::cogs::event_sampler::independent","",43,[[["speciationsample",3],["option",4]],[["speciationsample",3],["option",4]]]],[11,"__contracts_impl_next_optional_immigration","necsim_impls_no_std::cogs::immigration_entry::buffered","",54,[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_peek_next_immigration","","",54,[[],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_next_optional_immigration","necsim_impls_no_std::cogs::immigration_entry::never","ContractsPost-condition - debug: no lineage ever …",55,[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_peek_next_immigration","","ContractsPost-condition - debug: no lineage ever …",55,[[],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_number_active_lineages","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[],["usize",15]]],[11,"__contracts_impl_get_last_event_time","","",3,[[],["nonnegativef64",3]]],[11,"__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","","",3,[[["partialsimulation",3]],["option",4]]],[11,"__contracts_impl_push_active_lineage_to_indexed_location","","",3,[[["partialsimulation",3],["indexedlocation",3],["positivef64",3]]]],[11,"__contracts_impl_insert_new_lineage_to_indexed_location","","",3,[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]]],[11,"__contracts_impl_number_active_lineages","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",13,[[],["usize",15]]],[11,"__contracts_impl_get_last_event_time","","",13,[[],["nonnegativef64",3]]],[11,"__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","","",13,[[["partialsimulation",3]],["option",4]]],[11,"__contracts_impl_push_active_lineage_to_indexed_location","","ContractsPre-condition - debug: does not overwrite the …",13,[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]]],[11,"__contracts_impl_insert_new_lineage_to_indexed_location","","",13,[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]]],[11,"replace_active_lineage","","",13,[[["option",4],["lineage",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_peek_time_of_next_event","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[["uniformturnoverrate",3]],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[11,"__contracts_impl_peek_time_of_next_event","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",13,[[],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[11,"deserialize","necsim_impls_no_std::parallelisation::independent","",91,[[],["result",4]]],[11,"deserialize","","",92,[[],["result",4]]],[11,"deserialize","","",93,[[],["result",4]]],[11,"report_speciation","necsim_impls_no_std::parallelisation::independent::reporter","",86,[[["maybeused",3]]]],[11,"report_dispersal","","",86,[[["maybeused",3]]]],[11,"report_progress","","",86,[[["maybeused",3]]]],[11,"report_speciation","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::live","",87,[[["maybeused",3]]]],[11,"report_dispersal","","",87,[[["maybeused",3]]]],[11,"report_progress","","",87,[[["maybeused",3]]]],[11,"report_speciation","necsim_impls_no_std::parallelisation::independent::monolithic::reporter::recorded","",88,[[["maybeused",3]]]],[11,"report_dispersal","","",88,[[["maybeused",3]]]],[11,"report_progress","","",88,[[["maybeused",3]]]],[11,"report_speciation","necsim_impls_no_std::parallelisation::monolithic::reporter","",94,[[["maybeused",3]]]],[11,"report_dispersal","","",94,[[["maybeused",3]]]],[11,"report_progress","","",94,[[["maybeused",3]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",4,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",6,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",6,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",8,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",8,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",10,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",10,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",13,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",13,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::coalescence_sampler::independent","",16,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",16,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",19,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",19,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",23,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",23,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",27,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",27,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",29,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",29,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::emigration_exit::never","",36,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",36,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::event_sampler::independent","",43,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",43,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::almost_infinite","",46,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",46,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::in_memory","",48,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",48,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::non_spatial","",50,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",50,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::spatially_implicit","",52,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",52,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::immigration_entry::never","",55,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",55,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::lineage_store::independent","",61,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",61,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",75,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",75,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::speciation_probability::uniform","",77,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",77,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::turnover_rate::uniform","",79,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",79,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"explicit_only_valid_targets_dispersal_contract","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",22,[[],["bool",15]]],[11,"area","necsim_impls_no_std::decomposition::equal","ErrorsReturns <code>Ok(Self)</code> iff the <code>habitat</code> can be partitioned …",81,[[["u32",15],["nonzerou32",3]],["result",4]]],[11,"weight","","ErrorsReturns <code>Ok(Self)</code> iff the <code>habitat</code> can be partitioned …",81,[[["u32",15],["nonzerou32",3]],["result",4]]]],"p":[[3,"AliasMethodSamplerAtom"],[3,"AliasMethodSampler"],[3,"DirectMappedCache"],[3,"ClassicalActiveLineageSampler"],[3,"ExpEventTimeSampler"],[3,"ExpEventTimeSamplerCudaRepresentation"],[3,"FixedEventTimeSampler"],[3,"FixedEventTimeSamplerCudaRepresentation"],[3,"GeometricEventTimeSampler"],[3,"GeometricEventTimeSamplerCudaRepresentation"],[3,"PoissonEventTimeSampler"],[3,"PoissonEventTimeSamplerCudaRepresentation"],[8,"EventTimeSampler"],[3,"IndependentActiveLineageSampler"],[3,"IndependentActiveLineageSamplerCudaRepresentation"],[3,"ConditionalCoalescenceSampler"],[3,"IndependentCoalescenceSampler"],[3,"IndependentCoalescenceSamplerCudaRepresentation"],[3,"UnconditionalCoalescenceSampler"],[3,"AlmostInfiniteNormalDispersalSampler"],[3,"AlmostInfiniteNormalDispersalSamplerCudaRepresentation"],[3,"InMemoryAliasDispersalSampler"],[3,"InMemoryCumulativeDispersalSampler"],[3,"InMemoryPackedAliasDispersalSampler"],[3,"InMemoryPackedAliasDispersalSamplerCudaRepresentation"],[3,"InMemorySeparableAliasDispersalSampler"],[8,"InMemoryDispersalSampler"],[3,"NonSpatialDispersalSampler"],[3,"NonSpatialDispersalSamplerCudaRepresentation"],[3,"SpatiallyImplicitDispersalSampler"],[3,"SpatiallyImplicitDispersalSamplerCudaRepresentation"],[3,"DomainEmigrationExit"],[3,"AlwaysEmigrationChoice"],[3,"ProbabilisticEmigrationChoice"],[8,"EmigrationChoice"],[3,"IndependentEmigrationExit"],[3,"NeverEmigrationExit"],[3,"NeverEmigrationExitCudaRepresentation"],[3,"ProbabilityAtLocation"],[3,"ConditionalGillespieEventSampler"],[3,"UnconditionalGillespieEventSampler"],[8,"GillespieEventSampler"],[3,"GillespiePartialSimulation"],[3,"IndependentEventSampler"],[3,"IndependentEventSamplerCudaRepresentation"],[3,"UnconditionalEventSampler"],[3,"AlmostInfiniteHabitat"],[3,"AlmostInfiniteHabitatCudaRepresentation"],[3,"InMemoryHabitat"],[3,"InMemoryHabitatCudaRepresentation"],[3,"NonSpatialHabitat"],[3,"NonSpatialHabitatCudaRepresentation"],[3,"SpatiallyImplicitHabitat"],[3,"SpatiallyImplicitHabitatCudaRepresentation"],[3,"BufferedImmigrationEntry"],[3,"NeverImmigrationEntry"],[3,"NeverImmigrationEntryCudaRepresentation"],[3,"InMemoryLineageReference"],[3,"AlmostInfiniteLineageStore"],[3,"GillespieLineageStore"],[3,"ClassicalLineageStore"],[3,"IndependentLineageStore"],[3,"IndependentLineageStoreCudaRepresentation"],[3,"AlmostInfiniteOriginSampler"],[3,"DecompositionOriginSampler"],[3,"InMemoryOriginSampler"],[3,"NonSpatialOriginSampler"],[3,"OriginPreSampler"],[3,"SpatiallyImplicitOriginSampler"],[3,"AesRng"],[3,"FixedSeaHash"],[3,"SeaHash"],[3,"WyHash"],[3,"WyRand"],[3,"XxHash"],[3,"SpatiallyImplicitSpeciationProbability"],[3,"SpatiallyImplicitSpeciationProbabilityCudaRepresentation"],[3,"UniformSpeciationProbability"],[3,"UniformSpeciationProbabilityCudaRepresentation"],[3,"UniformTurnoverRate"],[3,"UniformTurnoverRateCudaRepresentation"],[3,"EqualDecomposition"],[3,"ModuloDecomposition"],[3,"MonolithicDecomposition"],[3,"RadialDecomposition"],[8,"Decomposition"],[3,"IgnoreProgressReporterProxy"],[3,"LiveWaterLevelReporterProxy"],[3,"RecordedWaterLevelReporterProxy"],[8,"WaterLevelReporterProxy"],[8,"WaterLevelReporterConstructor"],[3,"AbsoluteDedupCache"],[3,"RelativeDedupCache"],[4,"DedupCache"],[3,"BufferingReporterProxy"],[4,"WaterLevelReporterStrategy"]]},\
"necsim_impls_std":{"doc":"","i":[[0,"cogs","necsim_impls_std","",null,null],[0,"active_lineage_sampler","necsim_impls_std::cogs","",null,null],[0,"gillespie","necsim_impls_std::cogs::active_lineage_sampler","",null,null],[0,"event_time","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",null,null],[3,"EventTime","necsim_impls_std::cogs::active_lineage_sampler::gillespie::event_time","",null,null],[12,"0","","",0,null],[0,"sampler","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",null,null],[3,"GillespieActiveLineageSampler","","",null,null],[12,"active_locations","","",1,null],[12,"number_active_lineages","","",1,null],[12,"last_event_time","","",1,null],[12,"marker","","",1,null],[11,"new","","",1,[[["gillespiepartialsimulation",3]]]],[0,"dispersal_sampler","necsim_impls_std::cogs","",null,null],[0,"in_memory","necsim_impls_std::cogs::dispersal_sampler","",null,null],[0,"error","necsim_impls_std::cogs::dispersal_sampler::in_memory","",null,null],[4,"InMemoryDispersalSamplerError","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",null,null],[13,"InconsistentDispersalMapSize","","",2,null],[13,"InconsistentDispersalProbabilities","","",2,null],[8,"InMemoryDispersalSampler","necsim_impls_std::cogs::dispersal_sampler::in_memory","",null,null],[11,"new","","ContractsPost-condition - debug: returns …",3,[[["array2d",3]],[["result",4],["inmemorydispersalsamplererror",4]]]],[0,"rng","necsim_impls_std::cogs","",null,null],[0,"pcg","necsim_impls_std::cogs::rng","",null,null],[3,"Pcg","necsim_impls_std::cogs::rng::pcg","",null,null],[12,"0","","",4,null],[0,"std","necsim_impls_std::cogs::rng","",null,null],[3,"StdRng","necsim_impls_std::cogs::rng::std","",null,null],[12,"0","","",5,null],[0,"event_log","necsim_impls_std","",null,null],[0,"recorder","necsim_impls_std::event_log","",null,null],[3,"EventLogRecorder","necsim_impls_std::event_log::recorder","",null,null],[12,"segment_size","","",6,null],[12,"directory","","",6,null],[12,"segment_index","","",6,null],[12,"buffer","","",6,null],[12,"record_speciation","","",6,null],[12,"record_dispersal","","",6,null],[11,"try_new","","ErrorsFails to construct iff <code>path</code> is not a writable …",6,[[["path",3]],["result",6]]],[11,"directory","","",6,[[],["path",3]]],[11,"set_event_filter","","",6,[[["bool",15]]]],[11,"record_speciation","","",6,[[["speciationevent",3]]]],[11,"record_dispersal","","",6,[[["dispersalevent",3]]]],[11,"sort_and_write_segment","","",6,[[],["result",6]]],[0,"replay","necsim_impls_std::event_log","",null,null],[0,"globbed","necsim_impls_std::event_log::replay","",null,null],[3,"GlobbedSortedSegments","necsim_impls_std::event_log::replay::globbed","",null,null],[12,"segments","","",7,null],[0,"segment","necsim_impls_std::event_log::replay","",null,null],[3,"SortedSegment","necsim_impls_std::event_log::replay::segment","",null,null],[12,"header","","",8,null],[12,"reader","","",8,null],[12,"buffer","","",8,null],[12,"capacity","","",8,null],[11,"try_new","","ErrorsFails if the path cannot be read as an event log …",8,[[["usize",15],["path",3]],["result",6]]],[11,"header","","",8,[[],["eventlogheader",3]]],[11,"length","","",8,[[],["usize",15]]],[0,"sorted_segments","necsim_impls_std::event_log::replay","",null,null],[3,"SortedSortedSegments","necsim_impls_std::event_log::replay::sorted_segments","",null,null],[12,"segments","","",9,null],[12,"next","","",9,null],[11,"new","","",9,[[["sortedsegment",3],["vec",3]]]],[11,"length","","",9,[[],["usize",15]]],[3,"EventLogReplay","necsim_impls_std::event_log::replay","",null,null],[12,"frontier","","",10,null],[12,"with_speciation","","",10,null],[12,"with_dispersal","","",10,null],[11,"length","","",10,[[],["usize",15]]],[11,"with_speciation","","",10,[[],["bool",15]]],[11,"with_dispersal","","",10,[[],["bool",15]]],[3,"EventLogHeader","necsim_impls_std::event_log","",null,null],[12,"min_time","","",11,null],[12,"max_time","","",11,null],[12,"length","","",11,null],[12,"with_speciation","","",11,null],[12,"with_dispersal","","",11,null],[11,"new","","",11,[[["usize",15],["positivef64",3],["bool",15]]]],[11,"min_time","","",11,[[],["positivef64",3]]],[11,"max_time","","",11,[[],["positivef64",3]]],[11,"length","","",11,[[],["usize",15]]],[11,"with_speciation","","",11,[[],["bool",15]]],[11,"with_dispersal","","",11,[[],["bool",15]]],[11,"from","necsim_impls_std::cogs::active_lineage_sampler::gillespie::event_time","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"equivalent","","",0,[[],["bool",15]]],[11,"vzip","","",0,[[]]],[11,"from","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"peek_optional_time_of_next_event","","",1,[[],[["option",4],["positivef64",3]]]],[11,"peek_optional_time_of_next_event","","",1,[[],[["option",4],["positivef64",3]]]],[11,"vzip","","",1,[[]]],[11,"from","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","necsim_impls_std::cogs::rng::pcg","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","necsim_impls_std::cogs::rng::std","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","necsim_impls_std::event_log::recorder","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","necsim_impls_std::event_log::replay::globbed","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","necsim_impls_std::event_log::replay::segment","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"equivalent","","",8,[[],["bool",15]]],[11,"vzip","","",8,[[]]],[11,"from","necsim_impls_std::event_log::replay::sorted_segments","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"equivalent","","",9,[[],["bool",15]]],[11,"vzip","","",9,[[]]],[11,"from","necsim_impls_std::event_log::replay","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"vzip","","",10,[[]]],[11,"from","necsim_impls_std::event_log","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"approx_from","","",11,[[],["result",4]]],[11,"approx_into","","",11,[[],["result",4]]],[11,"value_from","","",11,[[],["result",4]]],[11,"value_into","","",11,[[],["result",4]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"equivalent","","",11,[[],["bool",15]]],[11,"vzip","","",11,[[]]],[11,"drop","necsim_impls_std::event_log::recorder","",6,[[]]],[11,"from","necsim_impls_std::cogs::active_lineage_sampler::gillespie::event_time","",0,[[["nonnegativef64",3]]]],[11,"from","","",0,[[["positivef64",3]]]],[11,"into_iter","necsim_impls_std::event_log::replay::globbed","",7,[[]]],[11,"next","necsim_impls_std::event_log::replay::segment","",8,[[],["option",4]]],[11,"next","necsim_impls_std::event_log::replay::sorted_segments","",9,[[],["option",4]]],[11,"next","necsim_impls_std::event_log::replay","",10,[[],["option",4]]],[11,"clone","necsim_impls_std::cogs::active_lineage_sampler::gillespie::event_time","",0,[[],["eventtime",3]]],[11,"clone","necsim_impls_std::cogs::rng::pcg","",4,[[]]],[11,"clone","necsim_impls_std::cogs::rng::std","",5,[[],["stdrng",3]]],[11,"cmp","necsim_impls_std::cogs::active_lineage_sampler::gillespie::event_time","",0,[[],["ordering",4]]],[11,"cmp","necsim_impls_std::event_log::replay::segment","",8,[[],["ordering",4]]],[11,"cmp","necsim_impls_std::event_log::replay::sorted_segments","",9,[[],["ordering",4]]],[11,"eq","necsim_impls_std::cogs::active_lineage_sampler::gillespie::event_time","",0,[[["eventtime",3]],["bool",15]]],[11,"ne","","",0,[[["eventtime",3]],["bool",15]]],[11,"eq","necsim_impls_std::event_log::replay::segment","",8,[[],["bool",15]]],[11,"eq","necsim_impls_std::event_log::replay::sorted_segments","",9,[[],["bool",15]]],[11,"eq","necsim_impls_std::event_log","",11,[[["eventlogheader",3]],["bool",15]]],[11,"ne","","",11,[[["eventlogheader",3]],["bool",15]]],[11,"partial_cmp","necsim_impls_std::cogs::active_lineage_sampler::gillespie::event_time","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_impls_std::event_log::replay::segment","",8,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_impls_std::event_log::replay::sorted_segments","",9,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_impls_std::event_log","",11,[[],[["option",4],["ordering",4]]]],[11,"fmt","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",2,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::rng::pcg","",4,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::rng::std","",5,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log::recorder","",6,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log::replay::segment","",8,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log::replay::sorted_segments","",9,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log::replay","",10,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log","",11,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",2,[[["formatter",3]],["result",6]]],[11,"try_from","necsim_impls_std::event_log::recorder","",6,[[["pathbuf",3]],["result",6]]],[11,"try_from","necsim_impls_std::event_log::replay","",10,[[["vec",3],["globbedsortedsegments",3]],["result",4]]],[11,"deserialize","necsim_impls_std::event_log::recorder","",6,[[],["result",4]]],[11,"deserialize","necsim_impls_std::event_log::replay::globbed","",7,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_impls_std::event_log::replay","",10,[[],["result",4]]],[11,"deserialize","necsim_impls_std::event_log","",11,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",1,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_std::cogs::rng::pcg","",4,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_std::cogs::rng::std","",5,[[]]],[11,"from_seed","necsim_impls_std::cogs::rng::pcg","",4,[[]]],[11,"sample_u64","","",4,[[],["u64",15]]],[11,"from_seed","necsim_impls_std::cogs::rng::std","",5,[[]]],[11,"sample_u64","","",5,[[],["u64",15]]],[11,"split","necsim_impls_std::cogs::rng::pcg","",4,[[]]],[11,"split_to_stream","","",4,[[["u64",15]]]],[11,"__contracts_impl_number_active_lineages","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",1,[[],["usize",15]]],[11,"__contracts_impl_get_last_event_time","","",1,[[],["nonnegativef64",3]]],[11,"__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","","",1,[[["partialsimulation",3]],["option",4]]],[11,"__contracts_impl_push_active_lineage_to_indexed_location","","ContractsPre-condition - debug: location has habitat …",1,[[["partialsimulation",3],["positivef64",3],["indexedlocation",3]]]],[11,"__contracts_impl_insert_new_lineage_to_indexed_location","","",1,[[["partialsimulation",3],["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[11,"__contracts_impl_peek_time_of_next_event","","",1,[[],[["emptyactivelineagesamplererror",3],["positivef64",3],["result",4]]]]],"p":[[3,"EventTime"],[3,"GillespieActiveLineageSampler"],[4,"InMemoryDispersalSamplerError"],[8,"InMemoryDispersalSampler"],[3,"Pcg"],[3,"StdRng"],[3,"EventLogRecorder"],[3,"GlobbedSortedSegments"],[3,"SortedSegment"],[3,"SortedSortedSegments"],[3,"EventLogReplay"],[3,"EventLogHeader"]]},\
"necsim_partitioning_core":{"doc":"","i":[[0,"context","necsim_partitioning_core","",null,null],[8,"ReporterContext","necsim_partitioning_core::context","",null,null],[16,"Reporter","","",0,null],[10,"try_build","","ErrorsReturn any error which occured while building the …",0,[[],[["filteredreporter",3],["result",6]]]],[0,"iterator","necsim_partitioning_core","",null,null],[3,"ImmigrantPopIterator","necsim_partitioning_core::iterator","",null,null],[12,"immigrants","","",1,null],[11,"new","","",1,[[["vec",3]]]],[8,"Partitioning","necsim_partitioning_core","",null,null],[16,"LocalPartition","","",2,null],[16,"Auxiliary","","",2,null],[11,"is_monolithic","","",2,[[],["bool",15]]],[11,"is_root","","ContractsPost-condition - debug: monolithic partition is …",2,[[],["bool",15]]],[11,"get_number_of_partitions","","ContractsPost-condition - debug: there is only one …",2,[[],["nonzerou32",3]]],[11,"get_rank","","ContractsPost-condition - debug: rank is in range [0, …",2,[[],["u32",15]]],[11,"into_local_partition","","",2,[[["reportercontext",8]],["result",6]]],[4,"MigrationMode","","",null,null],[13,"Force","","",3,null],[13,"Default","","",3,null],[13,"Hold","","",3,null],[8,"LocalPartition","","",null,null],[16,"Reporter","","",4,null],[16,"IsLive","","",4,null],[16,"ImmigrantIterator","","",4,null],[11,"get_reporter","","",4,[[]]],[11,"is_root","","",4,[[],["bool",15]]],[11,"get_partition_rank","","ContractsPost-condition - debug: partition rank is in …",4,[[],["u32",15]]],[11,"get_number_of_partitions","","",4,[[],["nonzerou32",3]]],[11,"migrate_individuals","","",4,[[["migrationmode",4]]]],[11,"reduce_vote_continue","","",4,[[["bool",15]],["bool",15]]],[11,"reduce_vote_min_time","","",4,[[["positivef64",3]],[["result",4],["positivef64",3]]]],[11,"wait_for_termination","","",4,[[],["bool",15]]],[11,"reduce_global_time_steps","","",4,[[["nonnegativef64",3],["u64",15]]]],[11,"report_progress_sync","","",4,[[["u64",15]]]],[11,"finalise_reporting","","",4,[[]]],[11,"borrow","necsim_partitioning_core::iterator","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"into_iter","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","necsim_partitioning_core","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"next","necsim_partitioning_core::iterator","",1,[[],["option",4]]],[11,"clone","necsim_partitioning_core","",3,[[],["migrationmode",4]]]],"p":[[8,"ReporterContext"],[3,"ImmigrantPopIterator"],[8,"Partitioning"],[4,"MigrationMode"],[8,"LocalPartition"]]},\
"necsim_partitioning_monolithic":{"doc":"","i":[[0,"live","necsim_partitioning_monolithic","",null,null],[3,"LiveMonolithicPartitioning","necsim_partitioning_monolithic::live","",null,null],[12,"0","","",0,null],[3,"LiveMonolithicLocalPartition","","",null,null],[12,"reporter","","",1,null],[12,"loopback","","",1,null],[11,"from_reporter","","",1,[[["true",3],["filteredreporter",3]]]],[11,"try_from_context","","ErrorsReturns any error which occured while building the …",1,[[["reportercontext",8]],["result",6]]],[0,"recorded","necsim_partitioning_monolithic","",null,null],[3,"RecordedMonolithicLocalPartition","necsim_partitioning_monolithic::recorded","",null,null],[12,"reporter","","",2,null],[12,"recorder","","",2,null],[12,"loopback","","",2,null],[11,"try_from_context_and_recorder","","ErrorsReturns any error which occured while building the …",2,[[["reportercontext",8],["eventlogrecorder",3]],["result",6]]],[11,"from","necsim_partitioning_monolithic::live","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","necsim_partitioning_monolithic::recorded","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"default","necsim_partitioning_monolithic::live","",0,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_partitioning_monolithic::recorded","",2,[[["formatter",3]],["result",6]]],[11,"report_speciation","","",2,[[["maybeused",3]]]],[11,"report_dispersal","","",2,[[["maybeused",3]]]],[11,"report_progress","","",2,[[["maybeused",3]]]],[11,"__contracts_impl_is_monolithic","necsim_partitioning_monolithic::live","",0,[[],["bool",15]]],[11,"__contracts_impl_is_root","","",0,[[],["bool",15]]],[11,"__contracts_impl_get_number_of_partitions","","",0,[[],["nonzerou32",3]]],[11,"__contracts_impl_get_rank","","",0,[[],["u32",15]]],[11,"__contracts_impl_into_local_partition","","",0,[[["reportercontext",8]],["result",6]]],[11,"__contracts_impl_get_reporter","","",1,[[]]],[11,"__contracts_impl_is_root","","",1,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",1,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",1,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",1,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",1,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",1,[[["positivef64",3]],[["result",4],["positivef64",3]]]],[11,"__contracts_impl_wait_for_termination","","",1,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",1,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",1,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",1,[[]]],[11,"__contracts_impl_get_reporter","necsim_partitioning_monolithic::recorded","",2,[[]]],[11,"__contracts_impl_is_root","","",2,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",2,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",2,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",2,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",2,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",2,[[["positivef64",3]],[["positivef64",3],["result",6]]]],[11,"__contracts_impl_wait_for_termination","","",2,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",2,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",2,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",2,[[]]]],"p":[[3,"LiveMonolithicPartitioning"],[3,"LiveMonolithicLocalPartition"],[3,"RecordedMonolithicLocalPartition"]]},\
"necsim_partitioning_mpi":{"doc":"","i":[[0,"partition","necsim_partitioning_mpi","",null,null],[0,"parallel","necsim_partitioning_mpi::partition","",null,null],[7,"MPI_LOCAL_CONTINUE","necsim_partitioning_mpi::partition::parallel","",null,null],[7,"MPI_GLOBAL_CONTINUE","","",null,null],[7,"MPI_LOCAL_REMAINING","","",null,null],[7,"MPI_MIGRATION_BUFFERS","","",null,null],[3,"MpiParallelPartition","","",null,null],[12,"_universe","","",0,null],[12,"world","","",0,null],[12,"last_report_time","","",0,null],[12,"progress","","",0,null],[12,"migration_buffers","","",0,null],[12,"last_migration_times","","",0,null],[12,"emigration_requests","","",0,null],[12,"barrier","","",0,null],[12,"communicated_since_last_barrier","","",0,null],[12,"recorder","","",0,null],[12,"_marker","","",0,null],[18,"MPI_MIGRATION_WAIT_TIME","","",0,null],[18,"MPI_PROGRESS_WAIT_TIME","","",0,null],[11,"new","","",0,[[["systemcommunicator",3],["universe",3],["eventlogrecorder",3]]]],[0,"root","necsim_partitioning_mpi::partition","",null,null],[7,"MPI_LOCAL_CONTINUE","necsim_partitioning_mpi::partition::root","",null,null],[7,"MPI_GLOBAL_CONTINUE","","",null,null],[7,"MPI_MIGRATION_BUFFERS","","",null,null],[3,"MpiRootPartition","","",null,null],[12,"_universe","","",1,null],[12,"world","","",1,null],[12,"last_report_time","","",1,null],[12,"all_remaining","","",1,null],[12,"migration_buffers","","",1,null],[12,"last_migration_times","","",1,null],[12,"emigration_requests","","",1,null],[12,"reporter","","",1,null],[12,"recorder","","",1,null],[12,"barrier","","",1,null],[12,"communicated_since_last_barrier","","",1,null],[12,"finalised","","",1,null],[18,"MPI_MIGRATION_WAIT_TIME","","",1,null],[18,"MPI_PROGRESS_WAIT_TIME","","",1,null],[11,"new","","",1,[[["universe",3],["eventlogrecorder",3],["systemcommunicator",3],["true",3],["false",3],["filteredreporter",3]]]],[4,"MpiLocalPartition","necsim_partitioning_mpi::partition","",null,null],[13,"LiveMonolithic","","",2,null],[13,"RecordedMonolithic","","",2,null],[13,"Root","","",2,null],[13,"Parallel","","",2,null],[4,"MpiLocalPartition","necsim_partitioning_mpi","",null,null],[13,"LiveMonolithic","","",2,null],[13,"RecordedMonolithic","","",2,null],[13,"Root","","",2,null],[13,"Parallel","","",2,null],[3,"MpiParallelPartition","","",null,null],[12,"_universe","","",0,null],[12,"world","","",0,null],[12,"last_report_time","","",0,null],[12,"progress","","",0,null],[12,"migration_buffers","","",0,null],[12,"last_migration_times","","",0,null],[12,"emigration_requests","","",0,null],[12,"barrier","","",0,null],[12,"communicated_since_last_barrier","","",0,null],[12,"recorder","","",0,null],[12,"_marker","","",0,null],[3,"MpiRootPartition","","",null,null],[12,"_universe","","",1,null],[12,"world","","",1,null],[12,"last_report_time","","",1,null],[12,"all_remaining","","",1,null],[12,"migration_buffers","","",1,null],[12,"last_migration_times","","",1,null],[12,"emigration_requests","","",1,null],[12,"reporter","","",1,null],[12,"recorder","","",1,null],[12,"barrier","","",1,null],[12,"communicated_since_last_barrier","","",1,null],[12,"finalised","","",1,null],[4,"MpiPartitioningError","","",null,null],[13,"AlreadyInitialised","","",3,null],[4,"MpiLocalPartitionError","","",null,null],[13,"MissingEventLog","","",4,null],[3,"MpiPartitioning","","",null,null],[12,"universe","","",5,null],[12,"world","","",5,null],[18,"MPI_MIGRATION_TAG","","",5,null],[18,"MPI_PROGRESS_TAG","","",5,null],[18,"ROOT_RANK","","",5,null],[11,"initialise","","ErrorsReturns <code>AlreadyInitialised</code> if MPI was already …",5,[[],[["result",4],["mpipartitioningerror",4]]]],[11,"update_message_buffer_size","","",5,[[["usize",15]]]],[11,"from","necsim_partitioning_mpi::partition::parallel","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","necsim_partitioning_mpi::partition::root","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","necsim_partitioning_mpi::partition","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","necsim_partitioning_mpi","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"drop","necsim_partitioning_mpi::partition::parallel","",0,[[]]],[11,"drop","necsim_partitioning_mpi::partition::root","",1,[[]]],[11,"fmt","necsim_partitioning_mpi::partition::parallel","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_partitioning_mpi::partition::root","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_partitioning_mpi::partition","",2,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_partitioning_mpi","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"report_speciation","necsim_partitioning_mpi::partition::parallel","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"report_speciation","necsim_partitioning_mpi::partition::root","",1,[[["maybeused",3]]]],[11,"report_dispersal","","",1,[[["maybeused",3]]]],[11,"report_progress","","",1,[[["maybeused",3]]]],[11,"report_speciation","necsim_partitioning_mpi::partition","",2,[[["maybeused",3]]]],[11,"report_dispersal","","",2,[[["maybeused",3]]]],[11,"report_progress","","",2,[[["maybeused",3]]]],[11,"__contracts_impl_get_reporter","necsim_partitioning_mpi::partition::parallel","",0,[[]]],[11,"__contracts_impl_is_root","","",0,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",0,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",0,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",0,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",0,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",0,[[["positivef64",3]],[["positivef64",3],["result",4]]]],[11,"__contracts_impl_wait_for_termination","","",0,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",0,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",0,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",0,[[]]],[11,"__contracts_impl_get_reporter","necsim_partitioning_mpi::partition::root","",1,[[]]],[11,"__contracts_impl_is_root","","",1,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",1,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",1,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",1,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",1,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",1,[[["positivef64",3]],[["positivef64",3],["result",4]]]],[11,"__contracts_impl_wait_for_termination","","",1,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",1,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",1,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",1,[[]]],[11,"__contracts_impl_get_reporter","necsim_partitioning_mpi::partition","",2,[[]]],[11,"__contracts_impl_is_root","","",2,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",2,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",2,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",2,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",2,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",2,[[["positivef64",3]],[["positivef64",3],["result",4]]]],[11,"__contracts_impl_wait_for_termination","","",2,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",2,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",2,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",2,[[]]],[11,"__contracts_impl_is_monolithic","necsim_partitioning_mpi","",5,[[],["bool",15]]],[11,"__contracts_impl_is_root","","",5,[[],["bool",15]]],[11,"__contracts_impl_get_number_of_partitions","","",5,[[],["nonzerou32",3]]],[11,"__contracts_impl_get_rank","","",5,[[],["u32",15]]],[11,"__contracts_impl_into_local_partition","","ErrorsReturns <code>MissingEventLog</code> if the local partition is …",5,[[["reportercontext",8]],["result",6]]]],"p":[[3,"MpiParallelPartition"],[3,"MpiRootPartition"],[4,"MpiLocalPartition"],[4,"MpiPartitioningError"],[4,"MpiLocalPartitionError"],[3,"MpiPartitioning"]]},\
"necsim_plugins_common":{"doc":"","i":[[0,"biodiversity","necsim_plugins_common","",null,null],[3,"BiodiversityReporter","necsim_plugins_common::biodiversity","",null,null],[12,"last_event","","",0,null],[12,"biodiversity","","",0,null],[0,"event_counter","necsim_plugins_common","",null,null],[3,"EventCounterReporter","necsim_plugins_common::event_counter","",null,null],[12,"last_parent_prior_time","","",1,null],[12,"last_speciation_event","","",1,null],[12,"last_dispersal_event","","",1,null],[12,"raw_total","","",1,null],[12,"speciation","","",1,null],[12,"out_dispersal","","",1,null],[12,"self_dispersal","","",1,null],[12,"out_coalescence","","",1,null],[12,"self_coalescence","","",1,null],[12,"late_dispersal","","",1,null],[12,"late_coalescence","","",1,null],[0,"execution_time","necsim_plugins_common","",null,null],[3,"ExecutionTimeReporter","necsim_plugins_common::execution_time","",null,null],[12,"init_time","","",2,null],[12,"start_time","","",2,null],[12,"end_time","","",2,null],[0,"progress","necsim_plugins_common","",null,null],[3,"ProgressUpdater","necsim_plugins_common::progress","",null,null],[12,"thread","","",3,null],[12,"sender","","",3,null],[3,"ProgressReporter","","",null,null],[12,"updater","","",4,null],[12,"last_remaining","","",4,null],[12,"last_total","","",4,null],[5,"display_progress","","",null,[[["u64",15]]]],[0,"verbose","necsim_plugins_common","",null,null],[3,"VerboseReporter","necsim_plugins_common::verbose","",null,null],[12,"0","","",5,null],[11,"from","necsim_plugins_common::biodiversity","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","necsim_plugins_common::event_counter","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","necsim_plugins_common::execution_time","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","necsim_plugins_common::progress","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"from","necsim_plugins_common::verbose","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"drop","necsim_plugins_common::progress","",4,[[]]],[11,"default","necsim_plugins_common::biodiversity","ContractsPost-condition - debug: biodiversity initialised …",0,[[]]],[11,"default","necsim_plugins_common::event_counter","",1,[[]]],[11,"default","necsim_plugins_common::execution_time","ContractsPost-condition - debug: initialises start_time …",2,[[]]],[11,"default","necsim_plugins_common::progress","",4,[[]]],[11,"default","necsim_plugins_common::verbose","",5,[[]]],[11,"fmt","necsim_plugins_common::biodiversity","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::event_counter","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::execution_time","",2,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::progress","",4,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::verbose","",5,[[["formatter",3]],["result",6]]],[11,"deserialize","necsim_plugins_common::biodiversity","",0,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::event_counter","",1,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::execution_time","",2,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::progress","",4,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::verbose","",5,[[["deserializer",8]],["result",4]]],[11,"report_speciation","necsim_plugins_common::biodiversity","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]],[11,"report_speciation","necsim_plugins_common::event_counter","",1,[[["maybeused",3]]]],[11,"report_dispersal","","",1,[[["maybeused",3]]]],[11,"report_progress","","",1,[[["maybeused",3]]]],[11,"finalise","","",1,[[]]],[11,"finalise_boxed","","",1,[[["box",3]]]],[11,"report_speciation","necsim_plugins_common::execution_time","",2,[[["maybeused",3]]]],[11,"report_dispersal","","",2,[[["maybeused",3]]]],[11,"report_progress","","ContractsPost-condition - debug: start_time is set after …",2,[[["maybeused",3]]]],[11,"finalise","","",2,[[]]],[11,"finalise_boxed","","",2,[[["box",3]]]],[11,"initialise","","",2,[[],[["string",3],["result",4]]]],[11,"report_speciation","necsim_plugins_common::progress","",4,[[["maybeused",3]]]],[11,"report_dispersal","","",4,[[["maybeused",3]]]],[11,"report_progress","","",4,[[["maybeused",3]]]],[11,"finalise","","",4,[[]]],[11,"finalise_boxed","","",4,[[["box",3]]]],[11,"initialise","","",4,[[],[["string",3],["result",4]]]],[11,"report_speciation","necsim_plugins_common::verbose","",5,[[["maybeused",3]]]],[11,"report_dispersal","","",5,[[["maybeused",3]]]],[11,"report_progress","","",5,[[["maybeused",3]]]]],"p":[[3,"BiodiversityReporter"],[3,"EventCounterReporter"],[3,"ExecutionTimeReporter"],[3,"ProgressUpdater"],[3,"ProgressReporter"],[3,"VerboseReporter"]]},\
"necsim_plugins_core":{"doc":"","i":[[0,"export","necsim_plugins_core","",null,null],[3,"ReporterPluginDeclaration","necsim_plugins_core::export","",null,null],[12,"rustc_version","","",0,null],[12,"core_version","","",0,null],[12,"init","","",0,null],[12,"deserialise","","",0,null],[12,"drop","","",0,null],[3,"ReporterPluginFilter","","",null,null],[12,"report_speciation","","",1,null],[12,"report_dispersal","","",1,null],[12,"report_progress","","",1,null],[11,"from_reporter","","",1,[[]]],[3,"UnsafeReporterPlugin","","",null,null],[12,"reporter","","",2,null],[12,"filter","","",2,null],[0,"import","necsim_plugins_core","",null,null],[0,"combinator","necsim_plugins_core::import","",null,null],[3,"ReporterPluginVec","necsim_plugins_core::import::combinator","",null,null],[12,"plugins","","",3,null],[12,"marker","","",3,null],[11,"internal_filter","","",3,[[]]],[4,"AnyReporterPluginVec","","",null,null],[13,"IgnoreSpeciationIgnoreDispersalIgnoreProgress","","",4,null],[13,"IgnoreSpeciationIgnoreDispersalReportProgress","","",4,null],[13,"IgnoreSpeciationReportDispersalIgnoreProgress","","",4,null],[13,"IgnoreSpeciationReportDispersalReportProgress","","",4,null],[13,"ReportSpeciationIgnoreDispersalIgnoreProgress","","",4,null],[13,"ReportSpeciationIgnoreDispersalReportProgress","","",4,null],[13,"ReportSpeciationReportDispersalIgnoreProgress","","",4,null],[13,"ReportSpeciationReportDispersalReportProgress","","",4,null],[0,"plugin","necsim_plugins_core::import","",null,null],[3,"ReporterPlugin","necsim_plugins_core::import::plugin","",null,null],[12,"library","","",5,null],[12,"reporter","","",5,null],[12,"filter","","",5,null],[12,"finalised","","",5,null],[11,"finalise","","",5,[[]]],[0,"serde","necsim_plugins_core::import","",null,null],[3,"ReporterPluginLibrary","necsim_plugins_core::import::serde","",null,null],[12,"library","","",6,null],[12,"reporters","","",6,null],[11,"library","","",6,[[],["library",3]]],[3,"PluginLibrary","","",null,null],[12,"library","","",7,null],[12,"declaration","","",7,null],[3,"RcPluginLibrary","","",null,null],[12,"0","","",8,null],[4,"ReporterPluginLibraryField","","",null,null],[13,"Library","","",9,null],[13,"Reporters","","",9,null],[3,"ReporterPluginLibraryVisitor","","",null,null],[3,"ReporterPluginLibrary","necsim_plugins_core::import","",null,null],[12,"library","","",6,null],[12,"reporters","","",6,null],[4,"AnyReporterPluginVec","","",null,null],[13,"IgnoreSpeciationIgnoreDispersalIgnoreProgress","","",4,null],[13,"IgnoreSpeciationIgnoreDispersalReportProgress","","",4,null],[13,"IgnoreSpeciationReportDispersalIgnoreProgress","","",4,null],[13,"IgnoreSpeciationReportDispersalReportProgress","","",4,null],[13,"ReportSpeciationIgnoreDispersalIgnoreProgress","","",4,null],[13,"ReportSpeciationIgnoreDispersalReportProgress","","",4,null],[13,"ReportSpeciationReportDispersalIgnoreProgress","","",4,null],[13,"ReportSpeciationReportDispersalReportProgress","","",4,null],[3,"ReporterPluginVec","","",null,null],[12,"plugins","","",3,null],[12,"marker","","",3,null],[3,"ReporterPlugin","","",null,null],[12,"library","","",5,null],[12,"reporter","","",5,null],[12,"filter","","",5,null],[12,"finalised","","",5,null],[7,"CORE_VERSION","necsim_plugins_core","",null,null],[7,"RUSTC_VERSION","","",null,null],[14,"export_plugin","","",null,null],[14,"match_any_reporter_plugin_vec","","",null,null],[11,"from","necsim_plugins_core::export","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","necsim_plugins_core::import::combinator","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"from","necsim_plugins_core::import::plugin","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"from","necsim_plugins_core::import::serde","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"drop","necsim_plugins_core::import::plugin","",5,[[]]],[11,"from","necsim_plugins_core::export","",2,[[]]],[11,"into_iter","necsim_plugins_core::import::serde","",6,[[]]],[11,"clone","necsim_plugins_core::export","",1,[[],["reporterpluginfilter",3]]],[11,"fmt","necsim_plugins_core::import::combinator","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_core::import::plugin","",5,[[["formatter",3]],["result",6]]],[11,"try_from","necsim_plugins_core::import::serde","",7,[[["pathbuf",3]],["result",4]]],[11,"from_iter","necsim_plugins_core::import::combinator","",4,[[["intoiterator",8]]]],[11,"deserialize","necsim_plugins_core::import::serde","",8,[[["deserializer",8]],["result",4]]],[11,"expecting","","",10,[[["formatter",3]],["result",6]]],[11,"visit_seq","","",10,[[],[["result",4],["reporterpluginlibrary",3]]]],[11,"visit_map","","",10,[[],[["result",4],["reporterpluginlibrary",3]]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"report_speciation","necsim_plugins_core::import::combinator","",3,[[["maybeused",3]]]],[11,"report_dispersal","","",3,[[["maybeused",3]]]],[11,"report_progress","","",3,[[["maybeused",3]]]],[11,"finalise","","",3,[[]]],[11,"finalise_boxed","","",3,[[["box",3]]]],[11,"initialise","","",3,[[],[["string",3],["result",4]]]]],"p":[[3,"ReporterPluginDeclaration"],[3,"ReporterPluginFilter"],[3,"UnsafeReporterPlugin"],[3,"ReporterPluginVec"],[4,"AnyReporterPluginVec"],[3,"ReporterPlugin"],[3,"ReporterPluginLibrary"],[3,"PluginLibrary"],[3,"RcPluginLibrary"],[4,"ReporterPluginLibraryField"],[3,"ReporterPluginLibraryVisitor"]]},\
"necsim_plugins_csv":{"doc":"","i":[[3,"CsvReporter","necsim_plugins_csv","",null,null],[12,"output","","",0,null],[12,"writer","","",0,null],[3,"CsvReporterArgs","","",null,null],[12,"output","","",1,null],[11,"write_event","","",0,[[["f64",15],["char",15],["globallineagereference",3],["indexedlocation",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"try_from","","",0,[[["csvreporterargs",3]],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"report_speciation","","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]],[11,"initialise","","",0,[[],[["result",4],["string",3]]]]],"p":[[3,"CsvReporter"],[3,"CsvReporterArgs"]]},\
"necsim_plugins_metacommunity":{"doc":"","i":[[3,"MetacommunityMigrationReporter","necsim_plugins_metacommunity","",null,null],[12,"last_event","","",0,null],[12,"metacommunity","","",0,null],[12,"seed","","",0,null],[12,"migrations","","",0,null],[4,"Metacommunity","","",null,null],[13,"Infinite","","",1,null],[13,"Finite","","",1,null],[3,"MetacommunityMigrationReporterArgs","","",null,null],[12,"metacommunity","","",2,null],[12,"seed","","",2,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","","",0,[[["metacommunitymigrationreporterargs",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"report_speciation","","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]]],"p":[[3,"MetacommunityMigrationReporter"],[4,"Metacommunity"],[3,"MetacommunityMigrationReporterArgs"]]},\
"necsim_plugins_species":{"doc":"","i":[[3,"SpeciesLocationsReporter","necsim_plugins_species","",null,null],[12,"last_parent_prior_time","","",0,null],[12,"last_speciation_event","","",0,null],[12,"last_dispersal_event","","",0,null],[12,"output","","",0,null],[12,"table","","",0,null],[12,"connection","","",0,null],[12,"insertion","","",0,null],[12,"speciation","","",0,null],[12,"coalescence","","",0,null],[3,"SpeciesLocationsReporterArgs","","",null,null],[12,"output","","",1,null],[12,"table","","",1,null],[5,"default_table_name","","",null,[[],["string",3]]],[11,"store_individual_origin","","",0,[[["globallineagereference",3],["indexedlocation",3]]]],[11,"store_individual_speciation","","",0,[[["speciationevent",3]]]],[11,"store_individual_coalescence","","",0,[[["globallineagereference",3]]]],[5,"seahash_diffuse","","",null,[[["u64",15]],["u64",15]]],[5,"extend_statement","","",null,[[["statement",3]],["statement",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"try_from","","",0,[[["specieslocationsreporterargs",3]],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"report_speciation","","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]],[11,"initialise","","",0,[[],[["string",3],["result",4]]]]],"p":[[3,"SpeciesLocationsReporter"],[3,"SpeciesLocationsReporterArgs"]]},\
"necsim_plugins_statistics":{"doc":"","i":[[0,"coverage","necsim_plugins_statistics","",null,null],[3,"GlobalCoverageReporter","necsim_plugins_statistics::coverage","",null,null],[12,"last_dispersal_event","","",0,null],[12,"output","","",0,null],[12,"writer","","",0,null],[3,"GlobalCoverageReporterArgs","","",null,null],[12,"output","","",1,null],[0,"speciation","necsim_plugins_statistics","",null,null],[3,"GlobalSpeciationReporter","necsim_plugins_statistics::speciation","",null,null],[12,"last_speciation_event","","",2,null],[12,"output","","",2,null],[12,"writer","","",2,null],[3,"GlobalSpeciationReporterArgs","","",null,null],[12,"output","","",3,null],[0,"turnover","necsim_plugins_statistics","",null,null],[3,"GlobalTurnoverReporter","necsim_plugins_statistics::turnover","",null,null],[12,"last_speciation_event","","",4,null],[12,"last_dispersal_event","","",4,null],[12,"output","","",4,null],[12,"writer","","",4,null],[3,"GlobalTurnoverReporterArgs","","",null,null],[12,"output","","",5,null],[11,"write_turnover","","",4,[[["f64",15]]]],[11,"from","necsim_plugins_statistics::coverage","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","necsim_plugins_statistics::speciation","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"from","necsim_plugins_statistics::turnover","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"fmt","necsim_plugins_statistics::coverage","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_statistics::speciation","",2,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_statistics::turnover","",4,[[["formatter",3]],["result",6]]],[11,"try_from","necsim_plugins_statistics::coverage","",0,[[["globalcoveragereporterargs",3]],["result",4]]],[11,"try_from","necsim_plugins_statistics::speciation","",2,[[["globalspeciationreporterargs",3]],["result",4]]],[11,"try_from","necsim_plugins_statistics::turnover","",4,[[["globalturnoverreporterargs",3]],["result",4]]],[11,"deserialize","necsim_plugins_statistics::coverage","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","necsim_plugins_statistics::speciation","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","necsim_plugins_statistics::turnover","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"report_speciation","necsim_plugins_statistics::coverage","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]],[11,"initialise","","",0,[[],[["result",4],["string",3]]]],[11,"report_speciation","necsim_plugins_statistics::speciation","",2,[[["maybeused",3]]]],[11,"report_dispersal","","",2,[[["maybeused",3]]]],[11,"report_progress","","",2,[[["maybeused",3]]]],[11,"finalise","","",2,[[]]],[11,"finalise_boxed","","",2,[[["box",3]]]],[11,"initialise","","",2,[[],[["result",4],["string",3]]]],[11,"report_speciation","necsim_plugins_statistics::turnover","",4,[[["maybeused",3]]]],[11,"report_dispersal","","",4,[[["maybeused",3]]]],[11,"report_progress","","",4,[[["maybeused",3]]]],[11,"finalise","","",4,[[]]],[11,"finalise_boxed","","",4,[[["box",3]]]],[11,"initialise","","",4,[[],[["result",4],["string",3]]]]],"p":[[3,"GlobalCoverageReporter"],[3,"GlobalCoverageReporterArgs"],[3,"GlobalSpeciationReporter"],[3,"GlobalSpeciationReporterArgs"],[3,"GlobalTurnoverReporter"],[3,"GlobalTurnoverReporterArgs"]]},\
"ptx_builder":{"doc":"<code>build.rs</code> helper crate for your CUDA experiments.","i":[[0,"error","ptx_builder","Error handling.",null,null],[6,"Result","ptx_builder::error","",null,null],[3,"Error","","",null,null],[12,"inner","","",0,null],[4,"BuildErrorKind","","",null,null],[13,"CommandNotFound","","",1,null],[12,"command","ptx_builder::error::BuildErrorKind","",2,null],[12,"hint","","",2,null],[13,"CommandFailed","ptx_builder::error","",1,null],[12,"command","ptx_builder::error::BuildErrorKind","",3,null],[12,"code","","",3,null],[12,"stderr","","",3,null],[13,"CommandVersionNotFulfilled","ptx_builder::error","",1,null],[12,"command","ptx_builder::error::BuildErrorKind","",4,null],[12,"current","","",4,null],[12,"required","","",4,null],[12,"hint","","",4,null],[13,"InvalidCratePath","ptx_builder::error","",1,null],[13,"BuildFailed","","",1,null],[13,"InvalidCrateType","","",1,null],[13,"MissingCrateType","","",1,null],[13,"InternalError","","",1,null],[13,"OtherError","","",1,null],[11,"kind","","",0,[[],["builderrorkind",4]]],[0,"executable","ptx_builder","External executables that are needed to build CUDA crates.",null,null],[0,"runner","ptx_builder::executable","",null,null],[3,"ExecutableRunner","ptx_builder::executable::runner","",null,null],[12,"command","","",5,null],[12,"executable","","",5,null],[3,"Output","","",null,null],[12,"stdout","","",6,null],[12,"stderr","","",6,null],[11,"new","","",5,[[]]],[11,"with_args","","",5,[[]]],[11,"with_env","","",5,[[]]],[11,"with_cwd","","",5,[[]]],[11,"run","","",5,[[],[["result",6],["output",3]]]],[11,"check_version","","",5,[[],["result",6]]],[5,"parse_executable_version","","",null,[[],[["result",6],["version",3]]]],[8,"Executable","ptx_builder::executable","Details and requirements for executables.",null,null],[10,"get_name","","Returns executable name in <code>PATH</code>.",7,[[],["string",3]]],[10,"get_verification_hint","","Returns message about how to install missing executable.",7,[[],["string",3]]],[10,"get_version_hint","","Returns message about how to update outdated executable.",7,[[],["string",3]]],[10,"get_required_version","","Executable version constraint.",7,[[],[["option",4],["versionreq",3]]]],[11,"get_current_version","","Returns the current version of the executable.",7,[[],[["result",6],["version",3]]]],[3,"Cargo","","<code>cargo</code> command.",null,null],[3,"Linker","","<code>ptx-linker</code> command.",null,null],[0,"builder","ptx_builder","Build helpers.",null,null],[17,"LAST_BUILD_CMD","ptx_builder::builder","",null,null],[17,"TARGET_NAME","","",null,null],[3,"Builder","","Core of the crate - PTX assembly build controller.",null,null],[12,"source_crate","","",8,null],[12,"profile","","",8,null],[12,"colors","","",8,null],[12,"crate_type","","",8,null],[3,"BuildOutput","","Successful build output.",null,null],[12,"builder","","",9,null],[12,"output_path","","",9,null],[12,"file_suffix","","",9,null],[4,"BuildStatus","","Non-failed build status.",null,null],[13,"Success","","The CUDA crate building was performed without errors.",10,null],[13,"NotNeeded","","The CUDA crate building is not needed. Can happend in …",10,null],[4,"Profile","","Debug / Release profile.",null,null],[13,"Debug","","Equivalent for <code>cargo-build</code> <strong>without</strong> <code>--release</code> flag.",11,null],[13,"Release","","Equivalent for <code>cargo-build</code> <strong>with</strong> <code>--release</code> flag.",11,null],[4,"CrateType","","Build specified crate type.",null,null],[13,"Library","","",12,null],[13,"Binary","","",12,null],[11,"new","","Construct a builder for device crate at <code>path</code>.",8,[[["asref",8],["path",3]],["result",6]]],[11,"is_build_needed","","Returns bool indicating whether the actual build is …",8,[[],["bool",15]]],[11,"disable_colors","","Disable colors for internal calls to <code>cargo</code>.",8,[[]]],[11,"set_profile","","Set build profile.",8,[[["profile",4]]]],[11,"set_crate_type","","Set crate type that needs to be built.",8,[[["cratetype",4]]]],[11,"build","","Performs an actual build: runs <code>cargo</code> with proper flags and…",8,[[],[["result",6],["buildstatus",4]]]],[11,"prepare_output","","",8,[[["pathbuf",3],["str",15]],[["result",6],["buildoutput",3]]]],[11,"output_is_not_verbose","","",8,[[["str",15]],["bool",15]]],[11,"load_cached_build_command","","",8,[[["path",3]],[["buildcommand",4],["option",4]]]],[11,"store_cached_build_command","","",8,[[["path",3],["str",15]],["result",6]]],[11,"new","","",9,[[["builder",3],["pathbuf",3],["string",3]]]],[11,"get_assembly_path","","Returns path to PTX assembly file.",9,[[],["pathbuf",3]]],[11,"dependencies","","Returns a list of crate dependencies.",9,[[],[["result",6],["vec",3]]]],[11,"get_deps_file_contents","","",9,[[],[["result",6],["string",3]]]],[4,"BuildCommand","","",null,null],[13,"Realtime","","",13,null],[13,"Cached","","",13,null],[0,"reporter","ptx_builder","Build reporting helpers.",null,null],[3,"CargoAdapter","ptx_builder::reporter","Cargo integration adapter.",null,null],[12,"env_name","","",14,null],[11,"with_env_var","","Creates an instance of the adapter that will provide PTX …",14,[[["asref",8],["str",15]]]],[11,"build","","Runs build process and reports artifacts to Cargo.",14,[[["builder",3]]]],[11,"build_inner","","",14,[[["builder",3]],["result",6]]],[3,"ErrorLogPrinter","","Nice error log printer.",null,null],[12,"error","","",15,null],[12,"colors","","",15,null],[11,"print","","Creates instance of the printer.",15,[[["error",3]]]],[11,"disable_colors","","Controls whether colors should be used in the error log.",15,[[]]],[8,"StringExt","","",null,null],[10,"prefix_each_line","","",16,[[]]],[0,"source","ptx_builder","",null,null],[4,"FilePrefix","ptx_builder::source","",null,null],[13,"Library","","",17,null],[13,"Binary","","",17,null],[13,"Mixed","","",17,null],[12,"lib","ptx_builder::source::FilePrefix","",18,null],[12,"bin","","",18,null],[3,"Crate","ptx_builder::source","Information about CUDA crate.",null,null],[12,"name","","",19,null],[12,"path","","",19,null],[12,"output_file_prefix","","",19,null],[12,"deps_file_prefix","","",19,null],[11,"analyse","","Try to locate a crate at the <code>path</code> and collect needed …",19,[[["asref",8],["path",3]],["result",6]]],[11,"get_output_file_prefix","","Returns PTX assmbly filename prefix.",19,[[],["str",15]]],[11,"get_deps_file_prefix","","Returns deps file filename prefix.",19,[[["option",4],["cratetype",4]],[["result",6],["string",3]]]],[11,"get_name","","Returns crate name.",19,[[],["str",15]]],[11,"get_path","","Returns crate root path.",19,[[],["path",3]]],[11,"get_output_path","","Returns temporary crate build location.",19,[[],[["result",6],["pathbuf",3]]]],[11,"get_hash","","",19,[[],["u64",15]]],[0,"prelude","ptx_builder","Convenient re-exports of mostly used types.",null,null],[14,"bail","","",null,null],[11,"from","ptx_builder::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"as_fail","","",0,[[],["fail",8]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"as_fail","","",1,[[],["fail",8]]],[11,"from","ptx_builder::executable::runner","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","ptx_builder::executable","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","ptx_builder::builder","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","ptx_builder::reporter","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","ptx_builder::source","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"get_name","ptx_builder::executable","",20,[[],["string",3]]],[11,"get_verification_hint","","",20,[[],["string",3]]],[11,"get_version_hint","","",20,[[],["string",3]]],[11,"get_required_version","","",20,[[],[["option",4],["versionreq",3]]]],[11,"get_current_version","","",20,[[],[["result",6],["version",3]]]],[11,"get_name","","",21,[[],["string",3]]],[11,"get_verification_hint","","",21,[[],["string",3]]],[11,"get_version_hint","","",21,[[],["string",3]]],[11,"get_required_version","","",21,[[],[["option",4],["versionreq",3]]]],[11,"from","ptx_builder::error","",0,[[["builderrorkind",4]],["error",3]]],[11,"from","","",0,[[["builderrorkind",4],["context",3]],["error",3]]],[11,"from","","",0,[[["context",3],["string",3]],["error",3]]],[11,"from","","",0,[[["context",3],["str",15]],["error",3]]],[11,"clone","","",1,[[],["builderrorkind",4]]],[11,"clone","ptx_builder::builder","",11,[[],["profile",4]]],[11,"clone","","",12,[[],["cratetype",4]]],[11,"clone","ptx_builder::source","",17,[[],["fileprefix",4]]],[11,"clone","","",19,[[],["crate",3]]],[11,"eq","ptx_builder::error","",1,[[["builderrorkind",4]],["bool",15]]],[11,"ne","","",1,[[["builderrorkind",4]],["bool",15]]],[11,"eq","ptx_builder::builder","",11,[[["profile",4]],["bool",15]]],[11,"deref","","",13,[[],["str",15]]],[11,"fmt","ptx_builder::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ptx_builder::executable::runner","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ptx_builder::builder","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","ptx_builder::source","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","ptx_builder::error","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","ptx_builder::builder","",11,[[["formatter",3]],["result",6]]],[11,"fmt","ptx_builder::reporter","",15,[[["formatter",3]],["result",6]]],[11,"hash","ptx_builder::source","",17,[[]]],[11,"hash","","",19,[[]]],[11,"name","ptx_builder::error","",1,[[],[["option",4],["str",15]]]],[11,"cause","","",1,[[],[["option",4],["fail",8]]]],[11,"backtrace","","",1,[[],[["backtrace",3],["option",4]]]],[11,"name","","",0,[[],[["option",4],["str",15]]]],[11,"cause","","",0,[[],[["fail",8],["option",4]]]],[11,"backtrace","","",0,[[],[["option",4],["backtrace",3]]]]],"p":[[3,"Error"],[4,"BuildErrorKind"],[13,"CommandNotFound"],[13,"CommandFailed"],[13,"CommandVersionNotFulfilled"],[3,"ExecutableRunner"],[3,"Output"],[8,"Executable"],[3,"Builder"],[3,"BuildOutput"],[4,"BuildStatus"],[4,"Profile"],[4,"CrateType"],[4,"BuildCommand"],[3,"CargoAdapter"],[3,"ErrorLogPrinter"],[8,"StringExt"],[4,"FilePrefix"],[13,"Mixed"],[3,"Crate"],[3,"Cargo"],[3,"Linker"]]},\
"ron":{"doc":"RON is a simple config format which looks similar to Rust …","i":[[0,"de","ron","",null,null],[0,"id","ron::de","",null,null],[3,"IdDeserializer","ron::de::id","",null,null],[12,"d","","",0,null],[11,"new","","",0,[[["deserializer",3]]]],[0,"tag","ron::de","",null,null],[3,"TagDeserializer","ron::de::tag","",null,null],[12,"d","","",1,null],[11,"new","","",1,[[["deserializer",3]]]],[0,"value","ron::de","",null,null],[3,"ValueVisitor","ron::de::value","",null,null],[3,"Position","ron::de","",null,null],[12,"line","","",2,null],[12,"col","","",2,null],[3,"Deserializer","","The RON deserializer.",null,null],[12,"bytes","","",3,null],[12,"newtype_variant","","",3,null],[11,"from_str","","",3,[[["str",15]],["result",6]]],[11,"from_bytes","","",3,[[],["result",6]]],[11,"remainder","","",3,[[],[["str",15],["cow",4]]]],[5,"from_reader","","A convenience function for reading data from a reader and …",null,[[],["result",6]]],[5,"from_str","","A convenience function for building a deserializer and …",null,[[["str",15]],["result",6]]],[5,"from_bytes","","A convenience function for building a deserializer and …",null,[[],["result",6]]],[11,"end","","Check if the remaining bytes are whitespace only, …",3,[[],["result",6]]],[11,"handle_any_struct","","Called from <code>deserialize_any</code> when a struct was detected. …",3,[[],["result",6]]],[3,"CommaSeparated","","",null,null],[12,"de","","",4,null],[12,"terminator","","",4,null],[12,"had_comma","","",4,null],[11,"new","","",4,[[["deserializer",3],["u8",15]]]],[11,"err","","",4,[[["errorcode",4]],["result",6]]],[11,"has_element","","",4,[[],[["bool",15],["result",6]]]],[3,"Enum","","",null,null],[12,"de","","",5,null],[11,"new","","",5,[[["deserializer",3]]]],[0,"ser","ron","",null,null],[0,"value","ron::ser","",null,null],[5,"to_writer","","Serializes <code>value</code> into <code>writer</code>",null,[[],["result",6]]],[5,"to_writer_pretty","","Serializes <code>value</code> into <code>writer</code> in a pretty way.",null,[[["prettyconfig",3]],["result",6]]],[5,"to_string","","Serializes <code>value</code> and returns it as string.",null,[[],[["string",3],["result",6]]]],[5,"to_string_pretty","","Serializes <code>value</code> in the recommended RON layout in a …",null,[[["prettyconfig",3]],[["string",3],["result",6]]]],[3,"Pretty","","Pretty serializer state",null,null],[12,"indent","","",6,null],[12,"sequence_index","","",6,null],[3,"PrettyConfig","","Pretty serializer configuration.",null,null],[12,"depth_limit","","Limit the pretty-ness up to the given depth.",7,null],[12,"new_line","","New line string",7,null],[12,"indentor","","Indentation string",7,null],[12,"separate_tuple_members","","Separate tuple members with indentation",7,null],[12,"enumerate_arrays","","Enumerate array items in comments",7,null],[12,"decimal_floats","","Always include the decimal in floats",7,null],[12,"extensions","","Enable extensions. Only configures ‘implicit_some’ …",7,null],[11,"new","","Creates a default <code>PrettyConfig</code>.",7,[[]]],[11,"with_depth_limit","","Limits the pretty-formatting based on the number of …",7,[[["usize",15]]]],[11,"with_new_line","","Configures the newlines used for serialization.",7,[[["string",3]]]],[11,"with_indentor","","Configures the string sequence used for indentation.",7,[[["string",3]]]],[11,"with_separate_tuple_members","","Configures whether tuples are single- or multi-line. If …",7,[[["bool",15]]]],[11,"with_enumerate_arrays","","Configures whether a comment shall be added to every …",7,[[["bool",15]]]],[11,"with_decimal_floats","","Configures whether floats should always include a decimal.…",7,[[["bool",15]]]],[11,"with_extensions","","Configures extensions",7,[[["extensions",3]]]],[5,"default_depth_limit","","",null,[[],["usize",15]]],[5,"default_new_line","","",null,[[],["string",3]]],[5,"default_decimal_floats","","",null,[[],["bool",15]]],[5,"default_indentor","","",null,[[],["string",3]]],[5,"default_separate_tuple_members","","",null,[[],["bool",15]]],[5,"default_enumerate_arrays","","",null,[[],["bool",15]]],[3,"Serializer","","The RON serializer.",null,null],[12,"output","","",8,null],[12,"pretty","","",8,null],[12,"struct_names","","",8,null],[12,"is_empty","","",8,null],[11,"new","","Creates a new <code>Serializer</code>.",8,[[["prettyconfig",3],["option",4],["bool",15]],["result",6]]],[11,"is_pretty","","",8,[[],["bool",15]]],[11,"separate_tuple_members","","",8,[[],["bool",15]]],[11,"decimal_floats","","",8,[[],["bool",15]]],[11,"extensions","","",8,[[],["extensions",3]]],[11,"start_indent","","",8,[[],["result",6]]],[11,"indent","","",8,[[],["result",6]]],[11,"end_indent","","",8,[[],["result",6]]],[11,"serialize_escaped_str","","",8,[[["str",15]],["result",6]]],[4,"State","","",null,null],[13,"First","","",9,null],[13,"Rest","","",9,null],[4,"Compound","","",null,null],[13,"Map","","",10,null],[12,"ser","ron::ser::Compound","",11,null],[12,"state","","",11,null],[0,"error","ron","",null,null],[3,"Position","ron::error","",null,null],[12,"line","","",2,null],[12,"col","","",2,null],[3,"Error","","This type represents all possible errors that can occur …",null,null],[12,"code","","",12,null],[12,"position","","",12,null],[6,"Result","","",null,null],[4,"ErrorCode","","",null,null],[13,"Io","","",13,null],[13,"Message","","",13,null],[13,"Base64Error","","",13,null],[13,"Eof","","",13,null],[13,"ExpectedArray","","",13,null],[13,"ExpectedArrayEnd","","",13,null],[13,"ExpectedAttribute","","",13,null],[13,"ExpectedAttributeEnd","","",13,null],[13,"ExpectedBoolean","","",13,null],[13,"ExpectedComma","","",13,null],[13,"ExpectedChar","","",13,null],[13,"ExpectedFloat","","",13,null],[13,"ExpectedInteger","","",13,null],[13,"ExpectedOption","","",13,null],[13,"ExpectedOptionEnd","","",13,null],[13,"ExpectedMap","","",13,null],[13,"ExpectedMapColon","","",13,null],[13,"ExpectedMapEnd","","",13,null],[13,"ExpectedStruct","","",13,null],[13,"ExpectedStructEnd","","",13,null],[13,"ExpectedUnit","","",13,null],[13,"ExpectedString","","",13,null],[13,"ExpectedStringEnd","","",13,null],[13,"ExpectedIdentifier","","",13,null],[13,"InvalidEscape","","",13,null],[13,"IntegerOutOfBounds","","",13,null],[13,"NoSuchExtension","","",13,null],[13,"UnclosedBlockComment","","",13,null],[13,"UnderscoreAtBeginning","","",13,null],[13,"UnexpectedByte","","",13,null],[13,"Utf8Error","","",13,null],[13,"TrailingCharacters","","",13,null],[0,"value","ron","Value module.",null,null],[3,"Map","ron::value","A <code>Value</code> to <code>Value</code> map.",null,null],[12,"0","","",14,null],[11,"new","","Creates a new, empty <code>Map</code>.",14,[[],["map",3]]],[11,"len","","Returns the number of elements in the map.",14,[[],["usize",15]]],[11,"is_empty","","Returns <code>true</code> if <code>self.len() == 0</code>, <code>false</code> otherwise.",14,[[],["usize",15]]],[11,"insert","","Inserts a new element, returning the previous element …",14,[[["value",4]],[["option",4],["value",4]]]],[11,"remove","","Removes an element by its <code>key</code>.",14,[[["value",4]],[["option",4],["value",4]]]],[11,"iter","","Iterate all key-value pairs.",14,[[]]],[11,"iter_mut","","Iterate all key-value pairs mutably.",14,[[]]],[11,"keys","","Iterate all keys.",14,[[]]],[11,"values","","Iterate all values.",14,[[]]],[11,"values_mut","","Iterate all values mutably.",14,[[]]],[6,"MapInner","","",null,null],[4,"Number","","A wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.",null,null],[13,"Integer","","",15,null],[13,"Float","","",15,null],[3,"Float","","A wrapper for <code>f64</code>, which guarantees that the inner value …",null,null],[12,"0","","",16,null],[11,"new","","Construct a new <code>Float</code>.",16,[[["f64",15]]]],[11,"get","","Returns the wrapped float.",16,[[],["f64",15]]],[11,"new","","Construct a new number.",15,[[]]],[11,"into_f64","","Returns the <code>f64</code> representation of the number regardless …",15,[[],["f64",15]]],[11,"as_f64","","If the <code>Number</code> is a float, return it. Otherwise return <code>None</code>…",15,[[],[["f64",15],["option",4]]]],[11,"as_i64","","If the <code>Number</code> is an integer, return it. Otherwise return …",15,[[],[["i64",15],["option",4]]]],[11,"map_to","","Map this number to a single type using the appropriate …",15,[[]]],[4,"Value","","",null,null],[13,"Bool","","",17,null],[13,"Char","","",17,null],[13,"Map","","",17,null],[13,"Number","","",17,null],[13,"Option","","",17,null],[13,"String","","",17,null],[13,"Seq","","",17,null],[13,"Unit","","",17,null],[11,"into_rust","","Tries to deserialize this <code>Value</code> into <code>T</code>.",17,[[],["result",6]]],[3,"MapAccessor","","",null,null],[12,"keys","","",18,null],[12,"values","","",18,null],[3,"Seq","","",null,null],[12,"seq","","",19,null],[0,"extensions","ron","",null,null],[3,"Extensions","ron::extensions","",null,null],[12,"bits","","",20,null],[18,"UNWRAP_NEWTYPES","","",20,null],[18,"IMPLICIT_SOME","","",20,null],[11,"empty","","Returns an empty set of flags",20,[[],["extensions",3]]],[11,"all","","Returns the set containing all flags.",20,[[],["extensions",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",20,[[],["usize",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",20,[[["usize",15]],[["option",4],["extensions",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",20,[[["usize",15]],["extensions",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",20,[[["usize",15]],["extensions",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",20,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",20,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",20,[[["extensions",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",20,[[["extensions",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",20,[[["extensions",3]]]],[11,"remove","","Removes the specified flags in-place.",20,[[["extensions",3]]]],[11,"toggle","","Toggles the specified flags in-place.",20,[[["extensions",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",20,[[["bool",15],["extensions",3]]]],[11,"from_ident","","Creates an extension flag from an ident.",20,[[],[["extensions",3],["option",4]]]],[0,"parse","ron","",null,null],[17,"INT_CHAR","ron::parse","",null,null],[17,"FLOAT_CHAR","","",null,null],[17,"IDENT_FIRST_CHAR","","",null,null],[17,"IDENT_OTHER_CHAR","","",null,null],[17,"WHITESPACE_CHAR","","",null,null],[17,"DIGIT","","",null,null],[17,"ABCDF","","",null,null],[17,"UNDER","","",null,null],[17,"E____","","",null,null],[17,"G2Z__","","",null,null],[17,"PUNCT","","",null,null],[17,"WS___","","",null,null],[17,"_____","","",null,null],[17,"ENCODINGS","","",null,null],[5,"is_int_char","","",null,[[["u8",15]],["bool",15]]],[5,"is_float_char","","",null,[[["u8",15]],["bool",15]]],[5,"is_ident_first_char","","",null,[[["u8",15]],["bool",15]]],[5,"is_ident_other_char","","",null,[[["u8",15]],["bool",15]]],[5,"is_whitespace_char","","",null,[[["u8",15]],["bool",15]]],[4,"AnyNum","","",null,null],[13,"F32","","",21,null],[13,"F64","","",21,null],[13,"I8","","",21,null],[13,"U8","","",21,null],[13,"I16","","",21,null],[13,"U16","","",21,null],[13,"I32","","",21,null],[13,"U32","","",21,null],[13,"I64","","",21,null],[13,"U64","","",21,null],[13,"I128","","",21,null],[13,"U128","","",21,null],[3,"Bytes","","",null,null],[12,"exts","","Bits set according to <code>Extension</code> enum.",22,null],[12,"bytes","","",22,null],[12,"column","","",22,null],[12,"line","","",22,null],[11,"new","","",22,[[],["result",6]]],[11,"advance","","",22,[[["usize",15]],["result",6]]],[11,"advance_single","","",22,[[],["result",6]]],[11,"any_integer","","",22,[[["i8",15]],[["num",8],["result",6]]]],[11,"any_num","","",22,[[],[["result",6],["anynum",4]]]],[11,"bool","","",22,[[],[["bool",15],["result",6]]]],[11,"bytes","","",22,[[]]],[11,"char","","",22,[[],[["result",6],["char",15]]]],[11,"comma","","",22,[[],[["bool",15],["result",6]]]],[11,"check_ident","","Only returns true if the char after <code>ident</code> cannot belong …",22,[[["str",15]],["bool",15]]],[11,"check_ident_other_char","","",22,[[["usize",15]],["bool",15]]],[11,"check_tuple_struct","","Should only be used on a working copy",22,[[],[["bool",15],["result",6]]]],[11,"consume_ident","","Only returns true if the char after <code>ident</code> cannot belong …",22,[[["str",15]],["bool",15]]],[11,"consume","","",22,[[["str",15]],["bool",15]]],[11,"consume_all","","",22,[[],[["bool",15],["result",6]]]],[11,"eat_byte","","",22,[[],[["result",6],["u8",15]]]],[11,"err","","",22,[[["errorcode",4]],["result",6]]],[11,"error","","",22,[[["errorcode",4]],["error",3]]],[11,"expect_byte","","",22,[[["errorcode",4],["u8",15]],["result",6]]],[11,"extensions","","Returns the extensions bit mask.",22,[[],[["extensions",3],["result",6]]]],[11,"float","","",22,[[],["result",6]]],[11,"identifier","","",22,[[],["result",6]]],[11,"identifier_len","","",22,[[],[["usize",15],["result",6]]]],[11,"next_bytes_contained_in","","",22,[[],["usize",15]]],[11,"next_bytes_is_float","","",22,[[],["bool",15]]],[11,"skip_ws","","",22,[[],["result",6]]],[11,"peek","","",22,[[],[["option",4],["u8",15]]]],[11,"peek_or_eof","","",22,[[],[["result",6],["u8",15]]]],[11,"signed_integer","","",22,[[],["result",6]]],[11,"string","","",22,[[],[["result",6],["parsedstr",4]]]],[11,"escaped_string","","",22,[[],[["result",6],["parsedstr",4]]]],[11,"raw_string","","",22,[[],[["result",6],["parsedstr",4]]]],[11,"test_for","","",22,[[["str",15]],["bool",15]]],[11,"unsigned_integer","","",22,[[],[["num",8],["result",6]]]],[11,"decode_ascii_escape","","",22,[[],[["result",6],["u8",15]]]],[11,"decode_hex","","",22,[[["u8",15]],[["result",6],["u8",15]]]],[11,"parse_escape","","",22,[[],[["result",6],["char",15]]]],[11,"skip_comment","","",22,[[],[["bool",15],["result",6]]]],[8,"Num","","",null,null],[10,"from_u8","","",23,[[["u8",15]]]],[10,"checked_mul_ext","","Returns <code>true</code> on overflow",23,[[["u8",15]],["bool",15]]],[10,"checked_add_ext","","Returns <code>true</code> on overflow",23,[[["u8",15]],["bool",15]]],[10,"checked_sub_ext","","Returns <code>true</code> on overflow",23,[[["u8",15]],["bool",15]]],[4,"ParsedStr","","",null,null],[13,"Allocated","","",24,null],[13,"Slice","","",24,null],[3,"Position","","",null,null],[12,"line","","",2,null],[12,"col","","",2,null],[11,"from","ron::de::id","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","ron::de::tag","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","ron::de::value","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"fmt","","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","ron::de","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","ron::ser","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","ron::error","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","ron::value","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","ron::extensions","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","ron::parse","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","ron::error","",13,[[["utf8error",3]]]],[11,"from","","",13,[[["fromutf8error",3]]]],[11,"from","","",12,[[["utf8error",3]]]],[11,"from","","",12,[[["error",3]]]],[11,"from","ron::value","",15,[[["f64",15]],["number",4]]],[11,"from","","",15,[[["i64",15]],["number",4]]],[11,"from","","",15,[[["i32",15]],["number",4]]],[11,"from","","",15,[[["u64",15]],["number",4]]],[11,"extend","ron::extensions","",20,[[["intoiterator",8]]]],[11,"clone","ron::ser","",7,[[],["prettyconfig",3]]],[11,"clone","ron::error","",12,[[],["error",3]]],[11,"clone","","",13,[[],["errorcode",4]]],[11,"clone","ron::value","",14,[[],["map",3]]],[11,"clone","","",15,[[],["number",4]]],[11,"clone","","",16,[[],["float",3]]],[11,"clone","","",17,[[],["value",4]]],[11,"clone","ron::extensions","",20,[[],["extensions",3]]],[11,"clone","ron::parse","",21,[[],["anynum",4]]],[11,"clone","","",22,[[],["bytes",3]]],[11,"clone","","",24,[[],["parsedstr",4]]],[11,"clone","ron::de","",2,[[],["position",3]]],[11,"default","ron::ser","",7,[[]]],[11,"default","ron::value","",14,[[],["map",3]]],[11,"default","ron::extensions","",20,[[]]],[11,"cmp","ron::value","",14,[[["map",3]],["ordering",4]]],[11,"cmp","","",15,[[["number",4]],["ordering",4]]],[11,"cmp","","",16,[[],["ordering",4]]],[11,"cmp","","",17,[[["value",4]],["ordering",4]]],[11,"cmp","ron::extensions","",20,[[["extensions",3]],["ordering",4]]],[11,"eq","ron::error","",12,[[["error",3]],["bool",15]]],[11,"ne","","",12,[[["error",3]],["bool",15]]],[11,"eq","","",13,[[["errorcode",4]],["bool",15]]],[11,"ne","","",13,[[["errorcode",4]],["bool",15]]],[11,"eq","ron::value","",14,[[["map",3]],["bool",15]]],[11,"eq","","",15,[[["number",4]],["bool",15]]],[11,"ne","","",15,[[["number",4]],["bool",15]]],[11,"eq","","",16,[[],["bool",15]]],[11,"eq","","",17,[[["value",4]],["bool",15]]],[11,"ne","","",17,[[["value",4]],["bool",15]]],[11,"eq","ron::extensions","",20,[[["extensions",3]],["bool",15]]],[11,"ne","","",20,[[["extensions",3]],["bool",15]]],[11,"eq","ron::parse","",21,[[["anynum",4]],["bool",15]]],[11,"ne","","",21,[[["anynum",4]],["bool",15]]],[11,"eq","ron::de","",2,[[["position",3]],["bool",15]]],[11,"ne","","",2,[[["position",3]],["bool",15]]],[11,"partial_cmp","ron::value","",14,[[["map",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",15,[[["number",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",16,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",17,[[["value",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ron::extensions","",20,[[["extensions",3]],[["option",4],["ordering",4]]]],[11,"fmt","ron::ser","",7,[[["formatter",3]],["result",6]]],[11,"fmt","ron::error","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","ron::value","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","ron::extensions","",20,[[["formatter",3]],["result",6]]],[11,"fmt","ron::parse","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","ron::de","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ron::error","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","ron::de","",2,[[["formatter",3]],["fmtresult",6]]],[11,"sub","ron::extensions","Returns the set difference of the two sets of flags.",20,[[["extensions",3]],["extensions",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",20,[[["extensions",3]]]],[11,"not","","Returns the complement of this set of flags.",20,[[],["extensions",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",20,[[["extensions",3]],["extensions",3]]],[11,"bitor","","Returns the union of the two sets of flags.",20,[[["extensions",3]],["extensions",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",20,[[["extensions",3]],["extensions",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",20,[[["extensions",3]]]],[11,"bitor_assign","","Adds the set of flags.",20,[[["extensions",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",20,[[["extensions",3]]]],[11,"index","ron::value","",14,[[["value",4]]]],[11,"index_mut","","",14,[[["value",4]]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","ron::extensions","",20,[[]]],[11,"from_str","ron::value","Creates a value from a string reference.",17,[[["str",15]],["result",6]]],[11,"from_iter","","",14,[[["intoiterator",8]]]],[11,"from_iter","ron::extensions","",20,[[["intoiterator",8]],["extensions",3]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"deserialize_bool","ron::value","",17,[[],["result",4]]],[11,"deserialize_f32","","",17,[[],["result",4]]],[11,"deserialize_f64","","",17,[[],["result",4]]],[11,"deserialize_char","","",17,[[],["result",4]]],[11,"deserialize_str","","",17,[[],["result",4]]],[11,"deserialize_string","","",17,[[],["result",4]]],[11,"deserialize_bytes","","",17,[[],["result",4]]],[11,"deserialize_byte_buf","","",17,[[],["result",4]]],[11,"deserialize_option","","",17,[[],["result",4]]],[11,"deserialize_unit","","",17,[[],["result",4]]],[11,"deserialize_unit_struct","","",17,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",17,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",17,[[],["result",4]]],[11,"deserialize_tuple","","",17,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",17,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",17,[[],["result",4]]],[11,"deserialize_struct","","",17,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",17,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",17,[[],["result",4]]],[11,"deserialize_ignored_any","","",17,[[],["result",4]]],[11,"deserialize_any","","",17,[[],["result",6]]],[11,"deserialize_i8","","",17,[[],["result",6]]],[11,"deserialize_i16","","",17,[[],["result",6]]],[11,"deserialize_i32","","",17,[[],["result",6]]],[11,"deserialize_i64","","",17,[[],["result",6]]],[11,"deserialize_u8","","",17,[[],["result",6]]],[11,"deserialize_u16","","",17,[[],["result",6]]],[11,"deserialize_u32","","",17,[[],["result",6]]],[11,"deserialize_u64","","",17,[[],["result",6]]],[11,"next_key_seed","ron::de","",4,[[],[["result",6],["option",4]]]],[11,"next_value_seed","","",4,[[],["result",6]]],[11,"next_key_seed","ron::value","",18,[[],[["result",6],["option",4]]]],[11,"next_value_seed","","",18,[[],["result",6]]],[11,"unit_variant","ron::de","",5,[[],["result",6]]],[11,"newtype_variant_seed","","",5,[[],["result",6]]],[11,"tuple_variant","","",5,[[["usize",15]],["result",6]]],[11,"struct_variant","","",5,[[],["result",6]]],[11,"expecting","ron::de::value","",25,[[["formatter",3]],["result",6]]],[11,"visit_bool","","",25,[[["bool",15]],["result",4]]],[11,"visit_i64","","",25,[[["i64",15]],["result",4]]],[11,"visit_i128","","",25,[[["i128",15]],["result",4]]],[11,"visit_u64","","",25,[[["u64",15]],["result",4]]],[11,"visit_u128","","",25,[[["u128",15]],["result",4]]],[11,"visit_f64","","",25,[[["f64",15]],["result",4]]],[11,"visit_char","","",25,[[["char",15]],["result",4]]],[11,"visit_str","","",25,[[["str",15]],["result",4]]],[11,"visit_string","","",25,[[["string",3]],["result",4]]],[11,"visit_bytes","","",25,[[],["result",4]]],[11,"visit_byte_buf","","",25,[[["vec",3],["u8",15]],["result",4]]],[11,"visit_none","","",25,[[],["result",4]]],[11,"visit_some","","",25,[[],["result",4]]],[11,"visit_unit","","",25,[[],["result",4]]],[11,"visit_newtype_struct","","",25,[[],["result",4]]],[11,"visit_seq","","",25,[[],["result",4]]],[11,"visit_map","","",25,[[],["result",4]]],[11,"next_element_seed","ron::de","",4,[[],[["option",4],["result",6]]]],[11,"next_element_seed","ron::value","",19,[[],[["option",4],["result",6]]]],[11,"custom","ron::error","",12,[[["display",8]]]],[11,"serialize","ron::value","",17,[[],["result",4]]],[11,"serialize","ron::ser","",7,[[],["result",4]]],[11,"serialize","ron::value","",14,[[],["result",4]]],[11,"serialize","ron::extensions","",20,[[],["result",4]]],[11,"serialize_element","ron::ser","",10,[[],["result",6]]],[11,"end","","",10,[[],["result",6]]],[11,"serialize_key","","",10,[[],["result",6]]],[11,"serialize_value","","",10,[[],["result",6]]],[11,"end","","",10,[[],["result",6]]],[11,"serialize_element","","",10,[[],["result",6]]],[11,"end","","",10,[[],["result",6]]],[11,"serialize_field","","",10,[[["str",15]],["result",6]]],[11,"end","","",10,[[],["result",6]]],[11,"serialize_field","","",10,[[["str",15]],["result",6]]],[11,"end","","",10,[[],["result",6]]],[11,"serialize_field","","",10,[[],["result",6]]],[11,"end","","",10,[[],["result",6]]],[11,"serialize_field","","",10,[[],["result",6]]],[11,"end","","",10,[[],["result",6]]],[11,"deserialize","ron::value","",17,[[],["result",4]]],[11,"deserialize","ron::ser","",7,[[],["result",4]]],[11,"deserialize","ron::value","",14,[[],["result",4]]],[11,"deserialize","ron::extensions","",20,[[],["result",4]]],[11,"variant_seed","ron::de","",5,[[],["result",6]]],[11,"custom","ron::error","",12,[[["display",8]]]]],"p":[[3,"IdDeserializer"],[3,"TagDeserializer"],[3,"Position"],[3,"Deserializer"],[3,"CommaSeparated"],[3,"Enum"],[3,"Pretty"],[3,"PrettyConfig"],[3,"Serializer"],[4,"State"],[4,"Compound"],[13,"Map"],[3,"Error"],[4,"ErrorCode"],[3,"Map"],[4,"Number"],[3,"Float"],[4,"Value"],[3,"MapAccessor"],[3,"Seq"],[3,"Extensions"],[4,"AnyNum"],[3,"Bytes"],[8,"Num"],[4,"ParsedStr"],[3,"ValueVisitor"]]},\
"rust_cuda":{"doc":"","i":[[0,"common","rust_cuda","",null,null],[24,"RustToCuda","rust_cuda::common","",null,null],[8,"RustToCuda","","SafetyThis is an internal trait and should ONLY be …",null,null],[16,"CudaRepresentation","","",0,null],[16,"CudaAllocation","","",0,null],[11,"borrow","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",0,[[["cudaalloc",8]],["cudaresult",6]]],[10,"borrow_mut","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",0,[[["cudaalloc",8]],["cudaresult",6]]],[10,"un_borrow_mut","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",0,[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]]],[8,"CudaAsRust","","SafetyThis is an internal trait and should NEVER be …",null,null],[16,"RustRepresentation","","",1,null],[3,"DeviceOwnedSlice","","",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[11,"from","","",2,[[["devicebuffer",3]]]],[3,"DeviceBoxConst","","",null,null],[12,"0","","",3,null],[11,"from","","",3,[[["devicebox",3]]]],[3,"DeviceBoxMut","","",null,null],[12,"0","","",4,null],[11,"from","","",4,[[["devicebox",3]]]],[0,"host","rust_cuda","",null,null],[0,"private","rust_cuda::host","",null,null],[0,"alloc","rust_cuda::host::private","",null,null],[8,"Sealed","rust_cuda::host::private::alloc","",null,null],[0,"drop","rust_cuda::host::private","",null,null],[8,"Sealed","rust_cuda::host::private::drop","",null,null],[10,"drop","","",5,[[],["result",4]]],[0,"empty","rust_cuda::host::private","",null,null],[8,"Sealed","rust_cuda::host::private::empty","",null,null],[24,"LendToCuda","rust_cuda::host","",null,null],[8,"LendToCuda","","SafetyThis trait should ONLY be derived automatically …",null,null],[10,"lend_to_cuda","","Lends an immutable copy of <code>&self</code> to CUDA:",6,[[["fnonce",8]],["cudaresult",6]]],[10,"lend_to_cuda_mut","","Lends a mutable copy of <code>&mut self</code> to CUDA:",6,[[["fnonce",8]],["cudaresult",6]]],[8,"EmptyCudaAlloc","","",null,null],[8,"CudaAlloc","","",null,null],[3,"NullCudaAlloc","","",null,null],[3,"CombinedCudaAlloc","","",null,null],[12,"0","","",7,null],[12,"1","","",7,null],[11,"new","","",7,[[]]],[11,"split","","",7,[[]]],[3,"CudaDropWrapper","","",null,null],[12,"0","","",8,null],[3,"HostDeviceBoxMut","","",null,null],[12,"device_box","","",9,null],[12,"host_ref","","",9,null],[11,"new","","",9,[[["devicebox",3]]]],[11,"for_device","","",9,[[],["deviceboxmut",3]]],[11,"for_host","","",9,[[]]],[3,"HostDeviceBoxConst","","",null,null],[12,"device_box","","",10,null],[12,"host_ref","","",10,null],[11,"new","","",10,[[["devicebox",3]]]],[11,"for_device","","",10,[[],["deviceboxconst",3]]],[11,"for_host","","",10,[[]]],[0,"utils","rust_cuda","",null,null],[0,"exchange","rust_cuda::utils","",null,null],[0,"buffer","rust_cuda::utils::exchange","",null,null],[0,"common","rust_cuda::utils::exchange::buffer","",null,null],[0,"host","","",null,null],[3,"CudaExchangeBufferHost","rust_cuda::utils::exchange::buffer::host","",null,null],[12,"host_buffer","","",11,null],[12,"device_buffer","","",11,null],[11,"new","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",11,[[["usize",15]],["cudaresult",6]]],[3,"CudaExchangeBuffer","rust_cuda::utils::exchange::buffer","",null,null],[12,"host_buffer","","",11,null],[12,"device_buffer","","",11,null],[0,"wrapper","rust_cuda::utils::exchange","",null,null],[3,"ExchangeWithCudaWrapper","rust_cuda::utils::exchange::wrapper","",null,null],[12,"value","","",12,null],[12,"device_box","","",12,null],[3,"ExchangeWithHostWrapper","","",null,null],[12,"value","","",13,null],[12,"device_box","","",13,null],[12,"cuda_repr","","",13,null],[12,"null_alloc","","",13,null],[11,"new","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",12,[[],["cudaresult",6]]],[11,"move_to_cuda","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",12,[[],[["exchangewithhostwrapper",3],["cudaresult",6]]]],[11,"move_to_host","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",13,[[],[["exchangewithcudawrapper",3],["cudaresult",6]]]],[11,"as_ref","","",13,[[],["hostdeviceboxconst",3]]],[11,"as_mut","","",13,[[],["hostdeviceboxmut",3]]],[11,"borrow","rust_cuda::common","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"borrow","rust_cuda::host","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"borrow","rust_cuda::utils::exchange::buffer::host","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"borrow","rust_cuda::utils::exchange::wrapper","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"borrow_mut","rust_cuda::utils::exchange::buffer::host","",11,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",11,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"deref","rust_cuda::host","",8,[[]]],[11,"deref","rust_cuda::utils::exchange::buffer::host","",11,[[]]],[11,"deref","rust_cuda::utils::exchange::wrapper","",12,[[]]],[11,"deref_mut","rust_cuda::host","",8,[[]]],[11,"deref_mut","rust_cuda::utils::exchange::buffer::host","",11,[[]]],[11,"deref_mut","rust_cuda::utils::exchange::wrapper","",12,[[]]],[11,"fmt","rust_cuda::common","",2,[[["formatter",3]],["result",6]]],[11,"drop","rust_cuda::host","",8,[[]]],[11,"from","","",8,[[]]],[11,"clone","rust_cuda::common","",3,[[]]]],"p":[[8,"RustToCuda"],[8,"CudaAsRust"],[3,"DeviceOwnedSlice"],[3,"DeviceBoxConst"],[3,"DeviceBoxMut"],[8,"Sealed"],[8,"LendToCuda"],[3,"CombinedCudaAlloc"],[3,"CudaDropWrapper"],[3,"HostDeviceBoxMut"],[3,"HostDeviceBoxConst"],[3,"CudaExchangeBufferHost"],[3,"ExchangeWithCudaWrapper"],[3,"ExchangeWithHostWrapper"],[3,"NullCudaAlloc"]]},\
"rust_cuda_derive":{"doc":"","i":[[0,"generics","rust_cuda_derive","",null,null],[5,"expand_cuda_struct_generics_where_requested_in_attrs","rust_cuda_derive::generics","",null,[[["deriveinput",3]]]],[0,"lend_to_cuda","rust_cuda_derive","",null,null],[5,"impl_lend_to_cuda","rust_cuda_derive::lend_to_cuda","",null,[[["deriveinput",3]],["tokenstream",3]]],[0,"rust_to_cuda","rust_cuda_derive","",null,null],[0,"field_copy","rust_cuda_derive::rust_to_cuda","",null,null],[5,"impl_field_copy_init_and_expand_alloc_type","rust_cuda_derive::rust_to_cuda::field_copy","",null,[[["usize",15],["option",4],["vec",3],["field",3],["cudareprfieldty",4],["tokenstream",3]],["tokenstream",3]]],[0,"field_ty","rust_cuda_derive::rust_to_cuda","",null,null],[4,"CudaReprFieldTy","rust_cuda_derive::rust_to_cuda::field_ty","",null,null],[13,"BoxedSlice","","",0,null],[13,"Embedded","","",0,null],[13,"Eval","","",0,null],[13,"Phantom","","",0,null],[5,"swap_field_type_and_get_cuda_repr_ty","","",null,[[["field",3]],[["option",4],["cudareprfieldty",4]]]],[0,"impl","rust_cuda_derive::rust_to_cuda","",null,null],[5,"cuda_struct_declaration","rust_cuda_derive::rust_to_cuda::impl","",null,[[["fields",4],["semi",3],["ident",3],["generics",3],["option",4],["visibility",4]],["tokenstream",3]]],[5,"rust_to_cuda_trait","","",null,[[["tokenstream",3],["generics",3],["ident",3],["fields",4]],["tokenstream",3]]],[5,"cuda_as_rust_trait","","",null,[[["generics",3],["fields",4],["ident",3]],["tokenstream",3]]],[5,"get_cuda_repr_ident","rust_cuda_derive::rust_to_cuda","",null,[[["ident",3]],["ident",3]]],[5,"impl_rust_to_cuda","","",null,[[["deriveinput",3]],["tokenstream",3]]],[24,"RustToCuda","rust_cuda_derive","",null,null],[24,"LendToCuda","","",null,null],[11,"from","rust_cuda_derive::rust_to_cuda::field_ty","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]]],"p":[[4,"CudaReprFieldTy"]]},\
"rustacuda":{"doc":"This crate provides a safe, user-friendly wrapper around …","i":[[0,"context","rustacuda","CUDA context managementMost CUDA functions require a …",null,null],[4,"CacheConfig","rustacuda::context","This enumeration represents configuration settings for …",null,null],[13,"PreferNone","","No preference for shared memory or L1 (default)",0,null],[13,"PreferShared","","Prefer larger shared memory and smaller L1 cache",0,null],[13,"PreferL1","","Prefer larger L1 cache and smaller shared memory",0,null],[13,"PreferEqual","","Prefer equal-sized L1 cache and shared memory",0,null],[4,"ResourceLimit","","This enumeration represents the limited resources which …",null,null],[13,"StackSize","","The size in bytes of each GPU thread stack",1,null],[13,"PrintfFifoSize","","The size in bytes of the FIFO used by the <code>printf()</code> device …",1,null],[13,"MallocHeapSize","","The size in bytes of the heap used by the <code>malloc()</code> and …",1,null],[13,"DeviceRuntimeSynchronizeDepth","","The maximum nesting depth of a grid at which a thread can …",1,null],[13,"DeviceRuntimePendingLaunchCount","","The maximum number of outstanding device runtime launches …",1,null],[13,"MaxL2FetchGranularity","","L2 cache fetch granularity",1,null],[4,"SharedMemoryConfig","","This enumeration represents the options for configuring …",null,null],[13,"DefaultBankSize","","Set shared-memory bank size to the default.",2,null],[13,"FourByteBankSize","","Set shared-memory bank width to four bytes",2,null],[13,"EightByteBankSize","","Set shared-memory bank width to eight bytes",2,null],[3,"ContextFlags","","Bit flags for initializing the CUDA context.",null,null],[12,"bits","","",3,null],[18,"SCHED_SPIN","","Instructs CUDA to actively spin when waiting for results …",3,null],[18,"SCHED_YIELD","","Instructs CUDA to yield its thread when waiting for …",3,null],[18,"SCHED_BLOCKING_SYNC","","Instructs CUDA to block the CPU thread on a …",3,null],[18,"SCHED_AUTO","","Instructs CUDA to automatically choose whether to yield …",3,null],[18,"MAP_HOST","","Instructs CUDA to support mapped pinned allocations. This …",3,null],[18,"LMEM_RESIZE_TO_MAX","","Instruct CUDA not to reduce local memory after resizing …",3,null],[11,"empty","","Returns an empty set of flags",3,[[],["contextflags",3]]],[11,"all","","Returns the set containing all flags.",3,[[],["contextflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",3,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",3,[[["u32",15]],[["option",4],["contextflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",3,[[["u32",15]],["contextflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",3,[[["u32",15]],["contextflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",3,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",3,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",3,[[["contextflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",3,[[["contextflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",3,[[["contextflags",3]]]],[11,"remove","","Removes the specified flags in-place.",3,[[["contextflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",3,[[["contextflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",3,[[["bool",15],["contextflags",3]]]],[3,"Context","","Owned handle to a CUDA context.",null,null],[12,"inner","","",4,null],[11,"create_and_push","","Create a CUDA context for the given device.",4,[[["device",3],["contextflags",3]],[["cudaresult",6],["context",3]]]],[11,"get_api_version","","Get the API version used to create this context.",4,[[],[["cudaapiversion",3],["cudaresult",6]]]],[11,"get_unowned","","Returns an non-owning handle to this context.",4,[[],["unownedcontext",3]]],[11,"drop","","Destroy a <code>Context</code>, returning an error.",4,[[["context",3]],[["context",3],["dropresult",6]]]],[8,"ContextHandle","","Sealed trait for <code>Context</code> and <code>UnownedContext</code>. Not intended …",null,null],[3,"UnownedContext","","Non-owning handle to a CUDA context.",null,null],[12,"inner","","",5,null],[11,"get_api_version","","Get the API version used to create this context.",5,[[],[["cudaapiversion",3],["cudaresult",6]]]],[3,"ContextStack","","Type used to represent the thread-local context stack.",null,null],[11,"pop","","Pop the current context off the stack and return the …",6,[[],[["unownedcontext",3],["cudaresult",6]]]],[11,"push","","Push the given context to the top of the stack",6,[[],["cudaresult",6]]],[3,"StreamPriorityRange","","Struct representing a range of stream priorities.",null,null],[12,"least","","The least stream priority",7,null],[12,"greatest","","The greatest stream priority",7,null],[3,"CurrentContext","","Type representing the top context in the thread-local …",null,null],[11,"get_cache_config","","Returns the preferred cache configuration for the current …",8,[[],[["cudaresult",6],["cacheconfig",4]]]],[11,"get_device","","Return the device ID for the current context.",8,[[],[["device",3],["cudaresult",6]]]],[11,"get_flags","","Return the context flags for the current context.",8,[[],[["contextflags",3],["cudaresult",6]]]],[11,"get_resource_limit","","Return resource limits for the current context.",8,[[["resourcelimit",4]],[["usize",15],["cudaresult",6]]]],[11,"get_shared_memory_config","","Return resource limits for the current context.",8,[[],[["cudaresult",6],["sharedmemoryconfig",4]]]],[11,"get_stream_priority_range","","Return the least and greatest stream priorities.",8,[[],[["cudaresult",6],["streampriorityrange",3]]]],[11,"set_cache_config","","Sets the preferred cache configuration for the current …",8,[[["cacheconfig",4]],["cudaresult",6]]],[11,"set_resource_limit","","Sets a requested resource limit for the current context.",8,[[["resourcelimit",4],["usize",15]],["cudaresult",6]]],[11,"set_shared_memory_config","","Sets the preferred shared memory configuration for the …",8,[[["sharedmemoryconfig",4]],["cudaresult",6]]],[11,"get_current","","Returns a non-owning handle to the current context.",8,[[],[["unownedcontext",3],["cudaresult",6]]]],[11,"set_current","","Set the given context as the current context for this …",8,[[],["cudaresult",6]]],[11,"synchronize","","Block to wait for a context’s tasks to complete.",8,[[],["cudaresult",6]]],[0,"device","rustacuda","Functions and types for enumerating CUDA devices and …",null,null],[4,"DeviceAttribute","rustacuda::device","All supported device attributes for Device::get_attribute",null,null],[13,"MaxThreadsPerBlock","","Maximum number of threads per block",9,null],[13,"MaxBlockDimX","","Maximum x-dimension of a block",9,null],[13,"MaxBlockDimY","","Maximum y-dimension of a block",9,null],[13,"MaxBlockDimZ","","Maximum z-dimension of a block",9,null],[13,"MaxGridDimX","","Maximum x-dimension of a grid",9,null],[13,"MaxGridDimY","","Maximum y-dimension of a grid",9,null],[13,"MaxGridDimZ","","Maximum z-dimension of a grid",9,null],[13,"MaxSharedMemoryPerBlock","","Maximum amount of shared memory available to a thread …",9,null],[13,"TotalConstantMemory","","Memory available on device for constant variables in a …",9,null],[13,"WarpSize","","Warp size in threads",9,null],[13,"MaxPitch","","Maximum pitch in bytes allowed by the memory copy …",9,null],[13,"MaxRegistersPerBlock","","Maximum number of 32-bit registers available to a thread …",9,null],[13,"ClockRate","","Typical clock frequency in kilohertz",9,null],[13,"TextureAlignment","","Alignment requirement for textures",9,null],[13,"MultiprocessorCount","","Number of multiprocessors on device.",9,null],[13,"KernelExecTimeout","","Specifies whether there is a run time limit on kernels",9,null],[13,"Integrated","","Device is integrated with host memory",9,null],[13,"CanMapHostMemory","","Device can map host memory into CUDA address space",9,null],[13,"ComputeMode","","Compute Mode",9,null],[13,"MaximumTexture1DWidth","","Maximum 1D texture width",9,null],[13,"MaximumTexture2DWidth","","Maximum 2D texture width",9,null],[13,"MaximumTexture2DHeight","","Maximum 2D texture height",9,null],[13,"MaximumTexture3DWidth","","Maximum 3D texture width",9,null],[13,"MaximumTexture3DHeight","","Maximum 3D texture height",9,null],[13,"MaximumTexture3DDepth","","Maximum 3D texture depth",9,null],[13,"MaximumTexture2DLayeredWidth","","Maximum 2D layered texture width",9,null],[13,"MaximumTexture2DLayeredHeight","","Maximum 2D layered texture height",9,null],[13,"MaximumTexture2DLayeredLayers","","Maximum layers in a 2D layered texture",9,null],[13,"SurfaceAlignment","","Alignment requirement for surfaces",9,null],[13,"ConcurrentKernels","","Device can possibly execute multiple kernels concurrently",9,null],[13,"EccEnabled","","Device has ECC support enabled",9,null],[13,"PciBusId","","PCI bus ID of the device",9,null],[13,"PciDeviceId","","PCI device ID of the device",9,null],[13,"TccDriver","","Device is using TCC driver model",9,null],[13,"MemoryClockRate","","Peak memory clock frequency in kilohertz",9,null],[13,"GlobalMemoryBusWidth","","Global memory bus width in bits",9,null],[13,"L2CacheSize","","Size of L2 cache in bytes.",9,null],[13,"MaxThreadsPerMultiprocessor","","Maximum resident threads per multiprocessor",9,null],[13,"AsyncEngineCount","","Number of asynchronous engines",9,null],[13,"UnifiedAddressing","","Device shares a unified address space with the host",9,null],[13,"MaximumTexture1DLayeredWidth","","Maximum 1D layered texture width",9,null],[13,"MaximumTexture1DLayeredLayers","","Maximum layers in a 1D layered texture",9,null],[13,"MaximumTexture2DGatherWidth","","Maximum 2D texture width if CUDA_ARRAY3D_TEXTURE_GATHER …",9,null],[13,"MaximumTexture2DGatherHeight","","Maximum 2D texture height if CUDA_ARRAY3D_TEXTURE_GATHER …",9,null],[13,"MaximumTexture3DWidthAlternate","","Alternate maximum 3D texture width",9,null],[13,"MaximumTexture3DHeightAlternate","","Alternate maximum 3D texture height",9,null],[13,"MaximumTexture3DDepthAlternate","","Alternate maximum 3D texture depth",9,null],[13,"PciDomainId","","PCI domain ID of the device",9,null],[13,"TexturePitchAlignment","","Pitch alignment requirement for textures",9,null],[13,"MaximumTextureCubemapWidth","","Maximum cubemap texture width/height",9,null],[13,"MaximumTextureCubemapLayeredWidth","","Maximum cubemap layered texture width/height",9,null],[13,"MaximumTextureCubemapLayeredLayers","","Maximum layers in a cubemap layered texture",9,null],[13,"MaximumSurface1DWidth","","Maximum 1D surface width",9,null],[13,"MaximumSurface2DWidth","","Maximum 2D surface width",9,null],[13,"MaximumSurface2DHeight","","Maximum 2D surface height",9,null],[13,"MaximumSurface3DWidth","","Maximum 3D surface width",9,null],[13,"MaximumSurface3DHeight","","Maximum 3D surface height",9,null],[13,"MaximumSurface3DDepth","","Maximum 3D surface depth",9,null],[13,"MaximumSurface1DLayeredWidth","","Maximum 1D layered surface width",9,null],[13,"MaximumSurface1DLayeredLayers","","Maximum layers in a 1D layered surface",9,null],[13,"MaximumSurface2DLayeredWidth","","Maximum 2D layered surface width",9,null],[13,"MaximumSurface2DLayeredHeight","","Maximum 2D layered surface height",9,null],[13,"MaximumSurface2DLayeredLayers","","Maximum layers in a 2D layered surface",9,null],[13,"MaximumSurfacecubemapWidth","","Maximum cubemap surface width",9,null],[13,"MaximumSurfacecubemapLayeredWidth","","Maximum cubemap layered surface width",9,null],[13,"MaximumSurfacecubemapLayeredLayers","","Maximum layers in a cubemap layered surface",9,null],[13,"MaximumTexture1DLinearWidth","","Maximum 1D linear texture width",9,null],[13,"MaximumTexture2DLinearWidth","","Maximum 2D linear texture width",9,null],[13,"MaximumTexture2DLinearHeight","","Maximum 2D linear texture height",9,null],[13,"MaximumTexture2DLinearPitch","","Maximum 2D linear texture pitch in bytes",9,null],[13,"MaximumTexture2DMipmappedWidth","","Maximum mipmapped 2D texture height",9,null],[13,"MaximumTexture2DMipmappedHeight","","Maximum mipmapped 2D texture width",9,null],[13,"ComputeCapabilityMajor","","Major compute capability version number",9,null],[13,"ComputeCapabilityMinor","","Minor compute capability version number",9,null],[13,"MaximumTexture1DMipmappedWidth","","Maximum mipammed 1D texture width",9,null],[13,"StreamPrioritiesSupported","","Device supports stream priorities",9,null],[13,"GlobalL1CacheSupported","","Device supports caching globals in L1",9,null],[13,"LocalL1CacheSupported","","Device supports caching locals in L1",9,null],[13,"MaxSharedMemoryPerMultiprocessor","","Maximum shared memory available per multiprocessor in …",9,null],[13,"MaxRegistersPerMultiprocessor","","Maximum number of 32-bit registers available per …",9,null],[13,"ManagedMemory","","Device can allocate managed memory on this system",9,null],[13,"MultiGpuBoard","","Device is on a multi-GPU board",9,null],[13,"MultiGpuBoardGroupId","","Unique ID for a group of devices on the same multi-GPU …",9,null],[13,"HostNativeAtomicSupported","","Link between the device and the host supports native …",9,null],[13,"SingleToDoublePrecisionPerfRatio","","Ratio of single precision performance (in floating-point …",9,null],[13,"PageableMemoryAccess","","Device supports coherently accessing pageable memory …",9,null],[13,"ConcurrentManagedAccess","","Device can coherently access managed memory concurrently …",9,null],[13,"ComputePreemptionSupported","","Device supports compute preemption",9,null],[13,"CanUseHostPointerForRegisteredMem","","Device can access host registered memory at the same …",9,null],[3,"Device","","Opaque handle to a CUDA device.",null,null],[12,"device","","",10,null],[11,"num_devices","","Get the number of CUDA-capable devices.",10,[[],[["u32",15],["cudaresult",6]]]],[11,"get_device","","Get a handle to the <code>ordinal</code>’th CUDA device.",10,[[["u32",15]],[["device",3],["cudaresult",6]]]],[11,"devices","","Return an iterator over all CUDA devices.",10,[[],[["cudaresult",6],["devices",3]]]],[11,"total_memory","","Returns the total amount of memory available on the …",10,[[],[["usize",15],["cudaresult",6]]]],[11,"name","","Returns the name of this device.",10,[[],[["cudaresult",6],["string",3]]]],[11,"get_attribute","","Returns information about this device.",10,[[["deviceattribute",4]],[["cudaresult",6],["i32",15]]]],[11,"into_inner","","",10,[[],["cudevice",6]]],[3,"Devices","","Iterator over all available CUDA devices. See the …",null,null],[12,"range","","",11,null],[0,"error","rustacuda","Types for error handling",null,null],[4,"CudaError","rustacuda::error","Error enum which represents all the potential errors …",null,null],[13,"InvalidValue","","",12,null],[13,"OutOfMemory","","",12,null],[13,"NotInitialized","","",12,null],[13,"Deinitialized","","",12,null],[13,"ProfilerDisabled","","",12,null],[13,"ProfilerNotInitialized","","",12,null],[13,"ProfilerAlreadyStarted","","",12,null],[13,"ProfilerAlreadyStopped","","",12,null],[13,"NoDevice","","",12,null],[13,"InvalidDevice","","",12,null],[13,"InvalidImage","","",12,null],[13,"InvalidContext","","",12,null],[13,"ContextAlreadyCurrent","","",12,null],[13,"MapFailed","","",12,null],[13,"UnmapFailed","","",12,null],[13,"ArrayIsMapped","","",12,null],[13,"AlreadyMapped","","",12,null],[13,"NoBinaryForGpu","","",12,null],[13,"AlreadyAcquired","","",12,null],[13,"NotMapped","","",12,null],[13,"NotMappedAsArray","","",12,null],[13,"NotMappedAsPointer","","",12,null],[13,"EccUncorrectable","","",12,null],[13,"UnsupportedLimit","","",12,null],[13,"ContextAlreadyInUse","","",12,null],[13,"PeerAccessUnsupported","","",12,null],[13,"InvalidPtx","","",12,null],[13,"InvalidGraphicsContext","","",12,null],[13,"NvlinkUncorrectable","","",12,null],[13,"InvalidSouce","","",12,null],[13,"FileNotFound","","",12,null],[13,"SharedObjectSymbolNotFound","","",12,null],[13,"SharedObjectInitFailed","","",12,null],[13,"OperatingSystemError","","",12,null],[13,"InvalidHandle","","",12,null],[13,"NotFound","","",12,null],[13,"NotReady","","",12,null],[13,"IllegalAddress","","",12,null],[13,"LaunchOutOfResources","","",12,null],[13,"LaunchTimeout","","",12,null],[13,"LaunchIncompatibleTexturing","","",12,null],[13,"PeerAccessAlreadyEnabled","","",12,null],[13,"PeerAccessNotEnabled","","",12,null],[13,"PrimaryContextActive","","",12,null],[13,"ContextIsDestroyed","","",12,null],[13,"AssertError","","",12,null],[13,"TooManyPeers","","",12,null],[13,"HostMemoryAlreadyRegistered","","",12,null],[13,"HostMemoryNotRegistered","","",12,null],[13,"HardwareStackError","","",12,null],[13,"IllegalInstruction","","",12,null],[13,"MisalignedAddress","","",12,null],[13,"InvalidAddressSpace","","",12,null],[13,"InvalidProgramCounter","","",12,null],[13,"LaunchFailed","","",12,null],[13,"NotPermitted","","",12,null],[13,"NotSupported","","",12,null],[13,"UnknownError","","",12,null],[13,"InvalidMemoryAllocation","","",12,null],[6,"CudaResult","","Result type for most CUDA functions.",null,null],[6,"DropResult","","Special result type for <code>drop</code> functions which includes the …",null,null],[8,"IntoResult","","",null,null],[10,"into_result","","",13,[[],["cudaresult",6]]],[0,"event","rustacuda","Events can be used to track status and dependencies, as …",null,null],[3,"EventFlags","rustacuda::event","Bit flags for configuring a CUDA Event.",null,null],[12,"bits","","",14,null],[18,"DEFAULT","","The default event creation flag.",14,null],[18,"BLOCKING_SYNC","","Specify that the created event should busy-wait on …",14,null],[18,"DISABLE_TIMING","","Specify that the created event does not need to record …",14,null],[18,"INTERPROCESS","","Specify that the created event may be used as an …",14,null],[11,"empty","","Returns an empty set of flags",14,[[],["eventflags",3]]],[11,"all","","Returns the set containing all flags.",14,[[],["eventflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",14,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",14,[[["u32",15]],[["option",4],["eventflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",14,[[["u32",15]],["eventflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",14,[[["u32",15]],["eventflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",14,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",14,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",14,[[["eventflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",14,[[["eventflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",14,[[["eventflags",3]]]],[11,"remove","","Removes the specified flags in-place.",14,[[["eventflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",14,[[["eventflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",14,[[["bool",15],["eventflags",3]]]],[4,"EventStatus","","Status enum that represents the current status of an …",null,null],[13,"Ready","","Ready indicates that all work captured by the event has …",15,null],[13,"NotReady","","<code>EventStatus::NotReady</code> indicates that the work captured by …",15,null],[3,"Event","","An event to track work submitted to a stream.",null,null],[12,"0","","",16,null],[11,"new","","Create a new event with the specified flags.",16,[[["eventflags",3]],["cudaresult",6]]],[11,"record","","Add the event to the given stream of work. The event will …",16,[[["stream",3]],["cudaresult",6]]],[11,"query","","Return whether the stream this event was recorded on (see …",16,[[],[["eventstatus",4],["cudaresult",6]]]],[11,"synchronize","","Wait for an event to complete.",16,[[],["cudaresult",6]]],[11,"elapsed_time_f32","","Return the duration between two events.",16,[[],[["cudaresult",6],["f32",15]]]],[11,"as_inner","","",16,[[],["cuevent",6]]],[11,"drop","","Destroy an <code>Event</code> returning an error.",16,[[["event",3]],[["event",3],["dropresult",6]]]],[0,"function","rustacuda","Functions and types for working with CUDA kernels.",null,null],[3,"GridSize","rustacuda::function","Dimensions of a grid, or the number of thread blocks in a …",null,null],[12,"x","","Width of grid in blocks",17,null],[12,"y","","Height of grid in blocks",17,null],[12,"z","","Depth of grid in blocks",17,null],[11,"x","","Create a one-dimensional grid of <code>x</code> blocks",17,[[["u32",15]],["gridsize",3]]],[11,"xy","","Create a two-dimensional grid of <code>x * y</code> blocks",17,[[["u32",15]],["gridsize",3]]],[11,"xyz","","Create a three-dimensional grid of <code>x * y * z</code> blocks",17,[[["u32",15]],["gridsize",3]]],[3,"BlockSize","","Dimensions of a thread block, or the number of threads in …",null,null],[12,"x","","X dimension of each thread block",18,null],[12,"y","","Y dimension of each thread block",18,null],[12,"z","","Z dimension of each thread block",18,null],[11,"x","","Create a one-dimensional block of <code>x</code> threads",18,[[["u32",15]],["blocksize",3]]],[11,"xy","","Create a two-dimensional block of <code>x * y</code> threads",18,[[["u32",15]],["blocksize",3]]],[11,"xyz","","Create a three-dimensional block of <code>x * y * z</code> threads",18,[[["u32",15]],["blocksize",3]]],[4,"FunctionAttribute","","All supported function attributes for …",null,null],[13,"MaxThreadsPerBlock","","The maximum number of threads per block, beyond which a …",19,null],[13,"SharedMemorySizeBytes","","The size in bytes of the statically-allocated shared …",19,null],[13,"ConstSizeBytes","","The size in bytes of the constant memory required by this …",19,null],[13,"LocalSizeBytes","","The size in bytes of local memory used by each thread of …",19,null],[13,"NumRegisters","","The number of registers used by each thread of this …",19,null],[13,"PtxVersion","","The PTX virtual architecture version for which the …",19,null],[13,"BinaryVersion","","The binary architecture version for which the function …",19,null],[13,"CacheModeCa","","The attribute to indicate whether the function has been …",19,null],[3,"Function","","Handle to a global kernel function.",null,null],[12,"inner","","",20,null],[12,"module","","",20,null],[11,"new","","",20,[[["module",3],["cufunction",6]],["function",3]]],[11,"get_attribute","","Returns information about a function.",20,[[["functionattribute",4]],[["cudaresult",6],["i32",15]]]],[11,"set_cache_config","","Sets the preferred cache configuration for this function.",20,[[["cacheconfig",4]],["cudaresult",6]]],[11,"set_shared_memory_config","","Sets the preferred shared memory configuration for this …",20,[[["sharedmemoryconfig",4]],["cudaresult",6]]],[11,"to_inner","","",20,[[],["cufunction",6]]],[0,"memory","rustacuda","Access to CUDA’s memory allocation and transfer …",null,null],[0,"array","rustacuda::memory","Routines for allocating and using CUDA Array Objects.",null,null],[4,"ArrayFormat","rustacuda::memory::array","Describes the format used for a CUDA Array.",null,null],[13,"UnsignedInt8","","Unsigned 8-bit integer",21,null],[13,"UnsignedInt16","","Unsigned 16-bit integer",21,null],[13,"UnsignedInt32","","Unsigned 32-bit integer",21,null],[13,"SignedInt8","","Signed 8-bit integer",21,null],[13,"SignedInt16","","Signed 16-bit integer",21,null],[13,"SignedInt32","","Signed 32-bit integer",21,null],[13,"Half","","Half-precision floating point number",21,null],[13,"Float","","Single-precision floating point number",21,null],[11,"from_raw","","Creates ArrayFormat from the CUDA Driver API enum",21,[[["cuarray_format",4]]]],[11,"to_raw","","Converts ArrayFormat to the CUDA Driver API enum",21,[[],["cuarray_format",4]]],[3,"ArrayObjectFlags","","Flags which modify the behavior of CUDA array creation.",null,null],[12,"bits","","",22,null],[18,"LAYERED","","Enables creation of layered CUDA arrays. When this flag …",22,null],[18,"SURFACE_LDST","","Enables surface references to be bound to the CUDA array.",22,null],[18,"CUBEMAP","","Enables creation of cubemaps. If this flag is set, Width …",22,null],[18,"TEXTURE_GATHER","","Indicates that the CUDA array will be used for texture …",22,null],[11,"empty","","Returns an empty set of flags",22,[[],["arrayobjectflags",3]]],[11,"all","","Returns the set containing all flags.",22,[[],["arrayobjectflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",22,[[],["c_uint",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",22,[[["c_uint",6]],[["arrayobjectflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",22,[[["c_uint",6]],["arrayobjectflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",22,[[["c_uint",6]],["arrayobjectflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",22,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",22,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",22,[[["arrayobjectflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",22,[[["arrayobjectflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",22,[[["arrayobjectflags",3]]]],[11,"remove","","Removes the specified flags in-place.",22,[[["arrayobjectflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",22,[[["arrayobjectflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",22,[[["arrayobjectflags",3],["bool",15]]]],[11,"new","","Creates a default flags object with no flags set.",22,[[]]],[3,"ArrayDescriptor","","Describes a CUDA Array",null,null],[12,"desc","","",23,null],[11,"from_raw","","Constructs an ArrayDescriptor from a CUDA Driver API …",23,[[["cuda_array3d_descriptor",6]]]],[11,"new","","Constructs an ArrayDescriptor from dimensions, format, …",23,[[["arrayformat",4],["arrayobjectflags",3],["c_uint",6]]]],[11,"from_dims_format","","Creates a new ArrayDescriptor from a set of dimensions …",23,[[["arrayformat",4]]]],[11,"dims","","Returns the dimensions of the ArrayDescriptor",23,[[]]],[11,"set_dims","","Sets the dimensions of the ArrayDescriptor",23,[[]]],[11,"width","","Returns the width of the ArrayDescripor",23,[[],["usize",15]]],[11,"set_width","","Sets the width of the ArrayDescriptor",23,[[["usize",15]]]],[11,"height","","Returns the height of the ArrayDescripor",23,[[],["usize",15]]],[11,"set_height","","Sets the height of the ArrayDescriptor",23,[[["usize",15]]]],[11,"depth","","Returns the depth of the ArrayDescripor",23,[[],["usize",15]]],[11,"set_depth","","Sets the depth of the ArrayDescriptor",23,[[["usize",15]]]],[11,"format","","Returns the format of the ArrayDescripor",23,[[],["arrayformat",4]]],[11,"set_format","","Sets the format of the ArrayDescriptor",23,[[["arrayformat",4]]]],[11,"num_channels","","Returns the number of channels in the ArrayDescriptor",23,[[],["c_uint",6]]],[11,"set_num_channels","","Sets the number of channels in the ArrayDescriptor",23,[[["c_uint",6]]]],[11,"flags","","Returns the flags of the ArrayDescriptor",23,[[],["arrayobjectflags",3]]],[11,"set_flags","","Sets the flags of the ArrayDescriptor.",23,[[["arrayobjectflags",3]]]],[3,"ArrayObject","","A CUDA Array. Can be bound to a texture or surface.",null,null],[12,"handle","","",24,null],[11,"from_descriptor","","Constructs a generic ArrayObject from an <code>ArrayDescriptor</code>.",24,[[["arraydescriptor",3]],["cudaresult",6]]],[11,"new","","Allocates a new CUDA Array that is up to 3-dimensions.",24,[[["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_1d","","Allocates a new 1D CUDA Array.",24,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_2d","","Allocates a new CUDA Array that is up to 2-dimensions.",24,[[["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_layered","","Creates a new Layered 1D or 2D CUDA Array.",24,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_layered_1d","","Creates a new Layered 1D CUDA Array.",24,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_cubemap","","Creates a new Cubemap CUDA Array. The array is …",24,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_layered_cubemap","","Creates a new Layered Cubemap CUDA Array. The array is …",24,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"descriptor","","Gets the descriptor associated with this array.",24,[[],[["arraydescriptor",3],["cudaresult",6]]]],[11,"drop","","Try to destroy an <code>ArrayObject</code>. Can fail - if it does, …",24,[[["arrayobject",3]],[["dropresult",6],["arrayobject",3]]]],[0,"device","rustacuda::memory","",null,null],[0,"device_box","rustacuda::memory::device","",null,null],[3,"DeviceBox","rustacuda::memory::device::device_box","A pointer type for heap-allocation in CUDA device memory.",null,null],[12,"ptr","","",25,null],[11,"new","","Allocate device memory and place val into it.",25,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate device memory, but do not initialize it.",25,[[],["cudaresult",6]]],[11,"zeroed","","Allocate device memory and fill it with zeroes (<code>0u8</code>).",25,[[],["cudaresult",6]]],[11,"from_raw","","Constructs a DeviceBox from a raw pointer.",25,[[]]],[11,"from_device","","Constructs a DeviceBox from a DevicePointer.",25,[[["devicepointer",3]]]],[11,"into_device","","Consumes the DeviceBox, returning the wrapped …",25,[[["devicebox",3]],["devicepointer",3]]],[11,"as_device_ptr","","Returns the contained device pointer without consuming …",25,[[],["devicepointer",3]]],[11,"drop","","Destroy a <code>DeviceBox</code>, returning an error.",25,[[["devicebox",3]],[["dropresult",6],["devicebox",3]]]],[0,"device_buffer","rustacuda::memory::device","",null,null],[3,"DeviceBuffer","rustacuda::memory::device::device_buffer","Fixed-size device-side buffer. Provides basic access to …",null,null],[12,"buf","","",26,null],[12,"capacity","","",26,null],[11,"uninitialized","","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>…",26,[[["usize",15]],["cudaresult",6]]],[11,"zeroed","","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>…",26,[[["usize",15]],["cudaresult",6]]],[11,"from_raw_parts","","Creates a <code>DeviceBuffer<T></code> directly from the raw …",26,[[["usize",15],["devicepointer",3]],["devicebuffer",3]]],[11,"drop","","Destroy a <code>DeviceBuffer</code>, returning an error.",26,[[["devicebuffer",3]],[["devicebuffer",3],["dropresult",6]]]],[11,"from_slice","","Allocate a new device buffer of the same size as <code>slice</code>, …",26,[[],["cudaresult",6]]],[11,"from_slice_async","","Asynchronously allocate a new buffer of the same size as …",26,[[["stream",3]],["cudaresult",6]]],[0,"device_slice","rustacuda::memory::device","",null,null],[3,"DeviceSlice","rustacuda::memory::device::device_slice","Fixed-size device-side slice.",null,null],[12,"0","","",27,null],[11,"len","","Returns the number of elements in the slice.",27,[[],["usize",15]]],[11,"is_empty","","Returns <code>true</code> if the slice has a length of 0.",27,[[],["bool",15]]],[11,"as_ptr","","Return a raw device-pointer to the slice’s buffer.",27,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable device-pointer to the slice’s …",27,[[]]],[11,"split_at","","Divides one DeviceSlice into two at a given index.",27,[[["usize",15]]]],[11,"split_at_mut","","Divides one mutable DeviceSlice into two at a given index.",27,[[["usize",15]]]],[11,"chunks","","Returns an iterator over <code>chunk_size</code> elements of the slice …",27,[[["usize",15]],["devicechunks",3]]],[11,"chunks_mut","","Returns an iterator over <code>chunk_size</code> elements of the slice …",27,[[["usize",15]],["devicechunksmut",3]]],[11,"from_slice","","Private function used to transmute a CPU slice (which …",27,[[],["deviceslice",3]]],[11,"from_slice_mut","","Private function used to transmute a mutable CPU slice …",27,[[],["deviceslice",3]]],[11,"as_device_ptr","","Returns a <code>DevicePointer<T></code> to the buffer.",27,[[],["devicepointer",3]]],[11,"from_raw_parts","","Forms a slice from a <code>DevicePointer</code> and a length.",27,[[["usize",15],["devicepointer",3]],["deviceslice",3]]],[11,"from_raw_parts_mut","","Performs the same functionality as <code>from_raw_parts</code>, except …",27,[[["usize",15],["devicepointer",3]],["deviceslice",3]]],[3,"DeviceChunks","","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …",null,null],[12,"0","","",28,null],[3,"DeviceChunksMut","","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …",null,null],[12,"0","","",29,null],[8,"CopyDestination","rustacuda::memory::device","Sealed trait implemented by types which can be the source …",null,null],[10,"copy_from","","Copy data from <code>source</code>. <code>source</code> must be the same size as …",30,[[],["cudaresult",6]]],[10,"copy_to","","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.",30,[[],["cudaresult",6]]],[8,"AsyncCopyDestination","","Sealed trait implemented by types which can be the source …",null,null],[10,"async_copy_from","","Asynchronously copy data from <code>source</code>. <code>source</code> must be the …",31,[[["stream",3]],["cudaresult",6]]],[10,"async_copy_to","","Asynchronously copy data to <code>dest</code>. <code>dest</code> must be the same …",31,[[["stream",3]],["cudaresult",6]]],[0,"locked","rustacuda::memory","",null,null],[3,"LockedBuffer","rustacuda::memory::locked","Fixed-size host-side buffer in page-locked memory.",null,null],[12,"buf","","",32,null],[12,"capacity","","",32,null],[11,"new","","Allocate a new page-locked buffer large enough to hold …",32,[[["usize",15]],["cudaresult",6]]],[11,"from_slice","","Allocate a new page-locked buffer of the same size as …",32,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate a new page-locked buffer large enough to hold …",32,[[["usize",15]],["cudaresult",6]]],[11,"as_slice","","Extracts a slice containing the entire buffer.",32,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire buffer.",32,[[]]],[11,"from_raw_parts","","Creates a <code>LockedBuffer<T></code> directly from the raw …",32,[[["usize",15]],["lockedbuffer",3]]],[11,"drop","","Destroy a <code>LockedBuffer</code>, returning an error.",32,[[["lockedbuffer",3]],[["dropresult",6],["lockedbuffer",3]]]],[0,"malloc","rustacuda::memory","",null,null],[5,"cuda_malloc","rustacuda::memory::malloc","Unsafe wrapper around the <code>cuMemAlloc</code> function, which …",null,[[["usize",15]],[["cudaresult",6],["devicepointer",3]]]],[5,"cuda_malloc_unified","","Unsafe wrapper around the <code>cuMemAllocManaged</code> function, …",null,[[["usize",15]],[["cudaresult",6],["unifiedpointer",3]]]],[5,"cuda_free","","Free memory allocated with <code>cuda_malloc</code>.",null,[[["devicepointer",3]],["cudaresult",6]]],[5,"cuda_free_unified","","Free memory allocated with <code>cuda_malloc_unified</code>.",null,[[["unifiedpointer",3],["devicecopy",8]],["cudaresult",6]]],[5,"cuda_malloc_locked","","Unsafe wrapper around the <code>cuMemAllocHost</code> function, which …",null,[[["usize",15]],["cudaresult",6]]],[5,"cuda_free_locked","","Free page-locked memory allocated with <code>cuda_malloc_host</code>.",null,[[],["cudaresult",6]]],[0,"unified","rustacuda::memory","",null,null],[3,"UnifiedBox","rustacuda::memory::unified","A pointer type for heap-allocation in CUDA unified memory.",null,null],[12,"ptr","","",33,null],[11,"new","","Allocate unified memory and place val into it.",33,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate unified memory without initializing it.",33,[[],["cudaresult",6]]],[11,"from_raw","","Constructs a UnifiedBox from a raw pointer.",33,[[]]],[11,"from_unified","","Constructs a UnifiedBox from a UnifiedPointer.",33,[[["unifiedpointer",3]]]],[11,"into_unified","","Consumes the UnifiedBox, returning the wrapped …",33,[[["unifiedbox",3]],["unifiedpointer",3]]],[11,"as_unified_ptr","","Returns the contained unified pointer without consuming …",33,[[],["unifiedpointer",3]]],[11,"leak","","Consumes and leaks the UnifiedBox, returning a mutable …",33,[[["unifiedbox",3]]]],[11,"drop","","Destroy a <code>UnifiedBox</code>, returning an error.",33,[[["unifiedbox",3]],[["dropresult",6],["unifiedbox",3]]]],[3,"UnifiedBuffer","","Fixed-size buffer in unified memory.",null,null],[12,"buf","","",34,null],[12,"capacity","","",34,null],[11,"new","","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>…",34,[[["usize",15]],["cudaresult",6]]],[11,"from_slice","","Allocate a new unified buffer of the same size as <code>slice</code>, …",34,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>…",34,[[["usize",15]],["cudaresult",6]]],[11,"as_slice","","Extracts a slice containing the entire buffer.",34,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire buffer.",34,[[]]],[11,"as_unified_ptr","","Returns a <code>UnifiedPointer<T></code> to the buffer.",34,[[],["unifiedpointer",3]]],[11,"from_raw_parts","","Creates a <code>UnifiedBuffer<T></code> directly from the raw …",34,[[["unifiedpointer",3],["usize",15]],["unifiedbuffer",3]]],[11,"drop","","Destroy a <code>UnifiedBuffer</code>, returning an error.",34,[[["unifiedbuffer",3]],[["dropresult",6],["unifiedbuffer",3]]]],[3,"DeviceBox","rustacuda::memory","A pointer type for heap-allocation in CUDA device memory.",null,null],[12,"ptr","","",25,null],[3,"DeviceBuffer","","Fixed-size device-side buffer. Provides basic access to …",null,null],[12,"buf","","",26,null],[12,"capacity","","",26,null],[3,"DeviceSlice","","Fixed-size device-side slice.",null,null],[12,"0","","",27,null],[3,"DeviceChunks","","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …",null,null],[12,"0","","",28,null],[3,"DeviceChunksMut","","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …",null,null],[12,"0","","",29,null],[8,"CopyDestination","","Sealed trait implemented by types which can be the source …",null,null],[10,"copy_from","","Copy data from <code>source</code>. <code>source</code> must be the same size as …",30,[[],["cudaresult",6]]],[10,"copy_to","","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.",30,[[],["cudaresult",6]]],[8,"AsyncCopyDestination","","Sealed trait implemented by types which can be the source …",null,null],[10,"async_copy_from","","Asynchronously copy data from <code>source</code>. <code>source</code> must be the …",31,[[["stream",3]],["cudaresult",6]]],[10,"async_copy_to","","Asynchronously copy data to <code>dest</code>. <code>dest</code> must be the same …",31,[[["stream",3]],["cudaresult",6]]],[3,"LockedBuffer","","Fixed-size host-side buffer in page-locked memory.",null,null],[12,"buf","","",32,null],[12,"capacity","","",32,null],[5,"cuda_malloc","","Unsafe wrapper around the <code>cuMemAlloc</code> function, which …",null,[[["usize",15]],[["cudaresult",6],["devicepointer",3]]]],[5,"cuda_malloc_unified","","Unsafe wrapper around the <code>cuMemAllocManaged</code> function, …",null,[[["usize",15]],[["cudaresult",6],["unifiedpointer",3]]]],[5,"cuda_free","","Free memory allocated with <code>cuda_malloc</code>.",null,[[["devicepointer",3]],["cudaresult",6]]],[5,"cuda_free_unified","","Free memory allocated with <code>cuda_malloc_unified</code>.",null,[[["unifiedpointer",3],["devicecopy",8]],["cudaresult",6]]],[5,"cuda_malloc_locked","","Unsafe wrapper around the <code>cuMemAllocHost</code> function, which …",null,[[["usize",15]],["cudaresult",6]]],[5,"cuda_free_locked","","Free page-locked memory allocated with <code>cuda_malloc_host</code>.",null,[[],["cudaresult",6]]],[3,"UnifiedBox","","A pointer type for heap-allocation in CUDA unified memory.",null,null],[12,"ptr","","",33,null],[3,"UnifiedBuffer","","Fixed-size buffer in unified memory.",null,null],[12,"buf","","",34,null],[12,"capacity","","",34,null],[8,"DeviceCopy","","Marker trait for types which can safely be copied to or …",null,null],[24,"DeviceCopy","","",null,null],[3,"DevicePointer","","A pointer to device memory.",null,null],[12,"0","","",35,null],[3,"UnifiedPointer","","A pointer to unified memory.",null,null],[12,"0","","",36,null],[0,"module","rustacuda","Functions and types for working with CUDA modules.",null,null],[3,"Module","rustacuda::module","A compiled CUDA module, loaded into a context.",null,null],[12,"inner","","",37,null],[11,"load_from_file","","Load a module from the given file name into the current …",37,[[["cstr",3]],[["cudaresult",6],["module",3]]]],[11,"load_from_string","","Load a module from a CStr.",37,[[["cstr",3]],[["cudaresult",6],["module",3]]]],[11,"get_global","","Get a reference to a global symbol, which can then be …",37,[[["cstr",3]],[["symbol",3],["cudaresult",6]]]],[11,"get_function","","Get a reference to a kernel function which can then be …",37,[[["cstr",3]],[["cudaresult",6],["function",3]]]],[11,"drop","","Destroy a <code>Module</code>, returning an error.",37,[[["module",3]],[["dropresult",6],["module",3]]]],[3,"Symbol","","Handle to a symbol defined within a CUDA module.",null,null],[12,"ptr","","",38,null],[12,"module","","",38,null],[0,"prelude","rustacuda","This module re-exports a number of commonly-used types …",null,null],[8,"CopyDestination","rustacuda::prelude","Sealed trait implemented by types which can be the source …",null,null],[10,"copy_from","","Copy data from <code>source</code>. <code>source</code> must be the same size as …",30,[[],["cudaresult",6]]],[10,"copy_to","","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.",30,[[],["cudaresult",6]]],[3,"DeviceBuffer","","Fixed-size device-side buffer. Provides basic access to …",null,null],[12,"buf","","",26,null],[12,"capacity","","",26,null],[3,"UnifiedBuffer","","Fixed-size buffer in unified memory.",null,null],[12,"buf","","",34,null],[12,"capacity","","",34,null],[0,"stream","rustacuda","Streams of work for the device to perform.",null,null],[3,"StreamFlags","rustacuda::stream","Bit flags for configuring a CUDA Stream.",null,null],[12,"bits","","",39,null],[18,"DEFAULT","","No flags set.",39,null],[18,"NON_BLOCKING","","This stream does not synchronize with the NULL stream.",39,null],[11,"empty","","Returns an empty set of flags",39,[[],["streamflags",3]]],[11,"all","","Returns the set containing all flags.",39,[[],["streamflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",39,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",39,[[["u32",15]],[["streamflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",39,[[["u32",15]],["streamflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",39,[[["u32",15]],["streamflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",39,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",39,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",39,[[["streamflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",39,[[["streamflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",39,[[["streamflags",3]]]],[11,"remove","","Removes the specified flags in-place.",39,[[["streamflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",39,[[["streamflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",39,[[["streamflags",3],["bool",15]]]],[3,"StreamWaitEventFlags","","Bit flags for configuring a CUDA Stream waiting on an …",null,null],[12,"bits","","",40,null],[18,"DEFAULT","","No flags set.",40,null],[11,"empty","","Returns an empty set of flags",40,[[],["streamwaiteventflags",3]]],[11,"all","","Returns the set containing all flags.",40,[[],["streamwaiteventflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",40,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",40,[[["u32",15]],[["streamwaiteventflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",40,[[["u32",15]],["streamwaiteventflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",40,[[["u32",15]],["streamwaiteventflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",40,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",40,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",40,[[["streamwaiteventflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",40,[[["streamwaiteventflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",40,[[["streamwaiteventflags",3]]]],[11,"remove","","Removes the specified flags in-place.",40,[[["streamwaiteventflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",40,[[["streamwaiteventflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",40,[[["bool",15],["streamwaiteventflags",3]]]],[3,"Stream","","A stream of work for the device to perform.",null,null],[12,"inner","","",41,null],[11,"new","","Create a new stream with the given flags and optional …",41,[[["streamflags",3],["option",4],["i32",15]],["cudaresult",6]]],[11,"get_flags","","Return the flags which were used to create this stream.",41,[[],[["streamflags",3],["cudaresult",6]]]],[11,"get_priority","","Return the priority of this stream.",41,[[],[["cudaresult",6],["i32",15]]]],[11,"add_callback","","Add a callback to a stream.",41,[[["box",3]],["cudaresult",6]]],[11,"synchronize","","Wait until a stream’s tasks are completed.",41,[[],["cudaresult",6]]],[11,"wait_event","","Make the stream wait on an event.",41,[[["event",3],["streamwaiteventflags",3]],["cudaresult",6]]],[11,"as_inner","","",41,[[],["custream",6]]],[11,"drop","","Destroy a <code>Stream</code>, returning an error.",41,[[["stream",3]],[["stream",3],["dropresult",6]]]],[5,"callback_wrapper","","",null,[[["cudaerror_enum",4],["custream",6]]]],[0,"derive_compile_fail","rustacuda","This module is a dummy module. It contains doctests that …",null,null],[0,"private","","",null,null],[8,"Sealed","rustacuda::private","",null,null],[3,"CudaFlags","rustacuda","Bit flags for initializing the CUDA driver. Currently, no …",null,null],[12,"bits","","",42,null],[11,"empty","","Returns an empty set of flags",42,[[],["cudaflags",3]]],[11,"all","","Returns the set containing all flags.",42,[[],["cudaflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",42,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",42,[[["u32",15]],[["cudaflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",42,[[["u32",15]],["cudaflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",42,[[["u32",15]],["cudaflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",42,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",42,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",42,[[["cudaflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",42,[[["cudaflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",42,[[["cudaflags",3]]]],[11,"remove","","Removes the specified flags in-place.",42,[[["cudaflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",42,[[["cudaflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",42,[[["cudaflags",3],["bool",15]]]],[5,"init","","Initialize the CUDA Driver API.",null,[[["cudaflags",3]],["cudaresult",6]]],[5,"quick_init","","Shortcut for initializing the CUDA Driver API and …",null,[[],[["cudaresult",6],["context",3]]]],[3,"CudaApiVersion","","Struct representing the CUDA API version number.",null,null],[12,"version","","",43,null],[11,"get","","Returns the latest CUDA version supported by the CUDA …",43,[[],[["cudaapiversion",3],["cudaresult",6]]]],[11,"major","","Return the major version number - eg. the 9 in version 9.2",43,[[],["i32",15]]],[11,"minor","","Return the minor version number - eg. the 2 in version 9.2",43,[[],["i32",15]]],[14,"launch","","Launch a kernel function asynchronously.",null,null],[11,"from","rustacuda::context","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","rustacuda::device","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"into_iter","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","rustacuda::error","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","rustacuda::event","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","rustacuda::function","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","rustacuda::memory::array","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","rustacuda::memory::device::device_box","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","rustacuda::memory::device::device_buffer","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"borrow","rustacuda::memory::device::device_slice","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"into_iter","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","rustacuda::memory::locked","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","rustacuda::memory::unified","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","rustacuda::memory","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","rustacuda::module","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","rustacuda::stream","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","rustacuda","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"clone","rustacuda::memory","",36,[[],["unifiedpointer",3]]],[11,"clone","","",35,[[],["devicepointer",3]]],[11,"fmt","","",36,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"partial_cmp","","",36,[[["unifiedpointer",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",35,[[["devicepointer",3]],[["option",4],["ordering",4]]]],[11,"hash","","",36,[[]]],[11,"hash","","",35,[[]]],[11,"cmp","","",35,[[["devicepointer",3]],["ordering",4]]],[11,"cmp","","",36,[[["unifiedpointer",3]],["ordering",4]]],[11,"eq","","",36,[[["unifiedpointer",3]],["bool",15]]],[11,"eq","","",35,[[["devicepointer",3]],["bool",15]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",36,[[["formatter",3]],[["error",3],["result",4]]]],[11,"get_inner","rustacuda::context","",4,[[],["cucontext",6]]],[11,"get_inner","","",5,[[],["cucontext",6]]],[11,"copy_from","rustacuda::memory::device::device_box","",25,[[],["cudaresult",6]]],[11,"copy_to","","",25,[[],["cudaresult",6]]],[11,"copy_from","","",25,[[["devicebox",3]],["cudaresult",6]]],[11,"copy_to","","",25,[[["devicebox",3]],["cudaresult",6]]],[11,"copy_from","rustacuda::memory::device::device_slice","",27,[[],["cudaresult",6]]],[11,"copy_to","","",27,[[],["cudaresult",6]]],[11,"copy_from","","",27,[[["deviceslice",3]],["cudaresult",6]]],[11,"copy_to","","",27,[[["deviceslice",3]],["cudaresult",6]]],[11,"copy_from","","",27,[[["devicebuffer",3]],["cudaresult",6]]],[11,"copy_to","","",27,[[["devicebuffer",3]],["cudaresult",6]]],[11,"copy_from","rustacuda::module","",38,[[],["cudaresult",6]]],[11,"copy_to","","",38,[[],["cudaresult",6]]],[11,"async_copy_from","rustacuda::memory::device::device_box","",25,[[["stream",3],["devicebox",3]],["cudaresult",6]]],[11,"async_copy_to","","",25,[[["stream",3],["devicebox",3]],["cudaresult",6]]],[11,"async_copy_from","rustacuda::memory::device::device_slice","",27,[[["stream",3]],["cudaresult",6]]],[11,"async_copy_to","","",27,[[["stream",3]],["cudaresult",6]]],[11,"async_copy_from","","",27,[[["stream",3],["deviceslice",3]],["cudaresult",6]]],[11,"async_copy_to","","",27,[[["stream",3],["deviceslice",3]],["cudaresult",6]]],[11,"async_copy_from","","",27,[[["devicebuffer",3],["stream",3]],["cudaresult",6]]],[11,"async_copy_to","","",27,[[["devicebuffer",3],["stream",3]],["cudaresult",6]]],[11,"drop","rustacuda::context","",4,[[]]],[11,"drop","rustacuda::event","",16,[[]]],[11,"drop","rustacuda::memory::array","",24,[[]]],[11,"drop","rustacuda::memory::device::device_box","",25,[[]]],[11,"drop","rustacuda::memory::device::device_buffer","",26,[[]]],[11,"drop","rustacuda::memory::locked","",32,[[]]],[11,"drop","rustacuda::memory::unified","",33,[[]]],[11,"drop","","",34,[[]]],[11,"drop","rustacuda::module","",37,[[]]],[11,"drop","rustacuda::stream","",41,[[]]],[11,"as_mut","rustacuda::memory::locked","",32,[[]]],[11,"as_mut","rustacuda::memory::unified","",33,[[]]],[11,"as_mut","","",34,[[]]],[11,"as_ref","rustacuda::memory::locked","",32,[[]]],[11,"as_ref","rustacuda::memory::unified","",33,[[]]],[11,"as_ref","","",34,[[]]],[11,"from","rustacuda::function","",17,[[["u32",15]],["gridsize",3]]],[11,"from","","",17,[[],["gridsize",3]]],[11,"from","","",17,[[],["gridsize",3]]],[11,"from","","",17,[[["gridsize",3]],["gridsize",3]]],[11,"from","","",18,[[["u32",15]],["blocksize",3]]],[11,"from","","",18,[[],["blocksize",3]]],[11,"from","","",18,[[],["blocksize",3]]],[11,"from","","",18,[[["blocksize",3]],["blocksize",3]]],[11,"next_back","rustacuda::memory::device::device_slice","",28,[[],[["option",4],["deviceslice",3]]]],[11,"next_back","","",29,[[],[["option",4],["deviceslice",3]]]],[11,"extend","rustacuda::context","",3,[[["intoiterator",8]]]],[11,"extend","rustacuda::event","",14,[[["intoiterator",8]]]],[11,"extend","rustacuda::memory::array","",22,[[["intoiterator",8]]]],[11,"extend","rustacuda::stream","",39,[[["intoiterator",8]]]],[11,"extend","","",40,[[["intoiterator",8]]]],[11,"extend","rustacuda","",42,[[["intoiterator",8]]]],[11,"next","rustacuda::device","",11,[[],[["option",4],["cudaresult",6]]]],[11,"next","rustacuda::memory::device::device_slice","",28,[[],[["option",4],["deviceslice",3]]]],[11,"size_hint","","",28,[[]]],[11,"count","","",28,[[],["usize",15]]],[11,"nth","","",28,[[["usize",15]],["option",4]]],[11,"last","","",28,[[],["option",4]]],[11,"next","","",29,[[],[["option",4],["deviceslice",3]]]],[11,"size_hint","","",29,[[]]],[11,"count","","",29,[[],["usize",15]]],[11,"nth","","",29,[[["usize",15]],["option",4]]],[11,"last","","",29,[[],["option",4]]],[11,"clone","rustacuda::context","",0,[[],["cacheconfig",4]]],[11,"clone","","",1,[[],["resourcelimit",4]]],[11,"clone","","",2,[[],["sharedmemoryconfig",4]]],[11,"clone","","",3,[[],["contextflags",3]]],[11,"clone","","",5,[[],["unownedcontext",3]]],[11,"clone","","",7,[[],["streampriorityrange",3]]],[11,"clone","rustacuda::device","",9,[[],["deviceattribute",4]]],[11,"clone","","",10,[[],["device",3]]],[11,"clone","","",11,[[],["devices",3]]],[11,"clone","rustacuda::error","",12,[[],["cudaerror",4]]],[11,"clone","rustacuda::event","",14,[[],["eventflags",3]]],[11,"clone","","",15,[[],["eventstatus",4]]],[11,"clone","rustacuda::function","",17,[[],["gridsize",3]]],[11,"clone","","",18,[[],["blocksize",3]]],[11,"clone","","",19,[[],["functionattribute",4]]],[11,"clone","rustacuda::memory::array","",21,[[],["arrayformat",4]]],[11,"clone","","",22,[[],["arrayobjectflags",3]]],[11,"clone","","",23,[[],["arraydescriptor",3]]],[11,"clone","rustacuda::memory::device::device_slice","",28,[[],["devicechunks",3]]],[11,"clone","rustacuda::stream","",39,[[],["streamflags",3]]],[11,"clone","","",40,[[],["streamwaiteventflags",3]]],[11,"clone","rustacuda","",42,[[],["cudaflags",3]]],[11,"clone","","",43,[[],["cudaapiversion",3]]],[11,"default","rustacuda::memory::array","",22,[[],["arrayobjectflags",3]]],[11,"cmp","rustacuda::context","",3,[[["contextflags",3]],["ordering",4]]],[11,"cmp","rustacuda::event","",14,[[["eventflags",3]],["ordering",4]]],[11,"cmp","rustacuda::memory::array","",22,[[["arrayobjectflags",3]],["ordering",4]]],[11,"cmp","rustacuda::memory::unified","",33,[[["unifiedbox",3]],["ordering",4]]],[11,"cmp","rustacuda::stream","",39,[[["streamflags",3]],["ordering",4]]],[11,"cmp","","",40,[[["streamwaiteventflags",3]],["ordering",4]]],[11,"cmp","rustacuda","",42,[[["cudaflags",3]],["ordering",4]]],[11,"cmp","","",43,[[["cudaapiversion",3]],["ordering",4]]],[11,"eq","rustacuda::context","",0,[[["cacheconfig",4]],["bool",15]]],[11,"eq","","",1,[[["resourcelimit",4]],["bool",15]]],[11,"eq","","",2,[[["sharedmemoryconfig",4]],["bool",15]]],[11,"eq","","",3,[[["contextflags",3]],["bool",15]]],[11,"ne","","",3,[[["contextflags",3]],["bool",15]]],[11,"eq","","",7,[[["streampriorityrange",3]],["bool",15]]],[11,"ne","","",7,[[["streampriorityrange",3]],["bool",15]]],[11,"eq","rustacuda::device","",9,[[["deviceattribute",4]],["bool",15]]],[11,"eq","","",10,[[["device",3]],["bool",15]]],[11,"ne","","",10,[[["device",3]],["bool",15]]],[11,"eq","rustacuda::error","",12,[[["cudaerror",4]],["bool",15]]],[11,"eq","rustacuda::event","",14,[[["eventflags",3]],["bool",15]]],[11,"ne","","",14,[[["eventflags",3]],["bool",15]]],[11,"eq","","",15,[[["eventstatus",4]],["bool",15]]],[11,"eq","rustacuda::function","",17,[[["gridsize",3]],["bool",15]]],[11,"ne","","",17,[[["gridsize",3]],["bool",15]]],[11,"eq","","",18,[[["blocksize",3]],["bool",15]]],[11,"ne","","",18,[[["blocksize",3]],["bool",15]]],[11,"eq","","",19,[[["functionattribute",4]],["bool",15]]],[11,"eq","rustacuda::memory::array","",21,[[["arrayformat",4]],["bool",15]]],[11,"eq","","",22,[[["arrayobjectflags",3]],["bool",15]]],[11,"ne","","",22,[[["arrayobjectflags",3]],["bool",15]]],[11,"eq","rustacuda::memory::unified","",33,[[["unifiedbox",3]],["bool",15]]],[11,"eq","rustacuda::stream","",39,[[["streamflags",3]],["bool",15]]],[11,"ne","","",39,[[["streamflags",3]],["bool",15]]],[11,"eq","","",40,[[["streamwaiteventflags",3]],["bool",15]]],[11,"ne","","",40,[[["streamwaiteventflags",3]],["bool",15]]],[11,"eq","rustacuda","",42,[[["cudaflags",3]],["bool",15]]],[11,"ne","","",42,[[["cudaflags",3]],["bool",15]]],[11,"eq","","",43,[[["cudaapiversion",3]],["bool",15]]],[11,"ne","","",43,[[["cudaapiversion",3]],["bool",15]]],[11,"partial_cmp","rustacuda::context","",3,[[["contextflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda::event","",14,[[["eventflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda::memory::array","",22,[[["arrayobjectflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda::memory::unified","",33,[[["unifiedbox",3]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["unifiedbox",3]],["bool",15]]],[11,"le","","",33,[[["unifiedbox",3]],["bool",15]]],[11,"ge","","",33,[[["unifiedbox",3]],["bool",15]]],[11,"gt","","",33,[[["unifiedbox",3]],["bool",15]]],[11,"partial_cmp","rustacuda::stream","",39,[[["streamflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",40,[[["streamwaiteventflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda","",42,[[["cudaflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",43,[[["cudaapiversion",3]],[["option",4],["ordering",4]]]],[11,"deref","rustacuda::memory::device::device_buffer","",26,[[],["deviceslice",3]]],[11,"deref","rustacuda::memory::locked","",32,[[]]],[11,"deref","rustacuda::memory::unified","",33,[[]]],[11,"deref","","",34,[[]]],[11,"deref_mut","rustacuda::memory::device::device_buffer","",26,[[],["deviceslice",3]]],[11,"deref_mut","rustacuda::memory::locked","",32,[[]]],[11,"deref_mut","rustacuda::memory::unified","",33,[[]]],[11,"deref_mut","","",34,[[]]],[11,"fmt","rustacuda::context","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::device","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::error","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::function","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::device::device_box","",25,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::device::device_buffer","",26,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::device::device_slice","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::locked","",32,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::unified","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::module","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::error","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::unified","",33,[[["formatter",3]],["result",6]]],[11,"sub","rustacuda::context","Returns the set difference of the two sets of flags.",3,[[["contextflags",3]],["contextflags",3]]],[11,"sub","rustacuda::event","Returns the set difference of the two sets of flags.",14,[[["eventflags",3]],["eventflags",3]]],[11,"sub","rustacuda::memory::array","Returns the set difference of the two sets of flags.",22,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"sub","rustacuda::stream","Returns the set difference of the two sets of flags.",39,[[["streamflags",3]],["streamflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",40,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"sub","rustacuda","Returns the set difference of the two sets of flags.",42,[[["cudaflags",3]],["cudaflags",3]]],[11,"sub_assign","rustacuda::context","Disables all flags enabled in the set.",3,[[["contextflags",3]]]],[11,"sub_assign","rustacuda::event","Disables all flags enabled in the set.",14,[[["eventflags",3]]]],[11,"sub_assign","rustacuda::memory::array","Disables all flags enabled in the set.",22,[[["arrayobjectflags",3]]]],[11,"sub_assign","rustacuda::stream","Disables all flags enabled in the set.",39,[[["streamflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",40,[[["streamwaiteventflags",3]]]],[11,"sub_assign","rustacuda","Disables all flags enabled in the set.",42,[[["cudaflags",3]]]],[11,"not","rustacuda::context","Returns the complement of this set of flags.",3,[[],["contextflags",3]]],[11,"not","rustacuda::event","Returns the complement of this set of flags.",14,[[],["eventflags",3]]],[11,"not","rustacuda::memory::array","Returns the complement of this set of flags.",22,[[],["arrayobjectflags",3]]],[11,"not","rustacuda::stream","Returns the complement of this set of flags.",39,[[],["streamflags",3]]],[11,"not","","Returns the complement of this set of flags.",40,[[],["streamwaiteventflags",3]]],[11,"not","rustacuda","Returns the complement of this set of flags.",42,[[],["cudaflags",3]]],[11,"bitand","rustacuda::context","Returns the intersection between the two sets of flags.",3,[[["contextflags",3]],["contextflags",3]]],[11,"bitand","rustacuda::event","Returns the intersection between the two sets of flags.",14,[[["eventflags",3]],["eventflags",3]]],[11,"bitand","rustacuda::memory::array","Returns the intersection between the two sets of flags.",22,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"bitand","rustacuda::stream","Returns the intersection between the two sets of flags.",39,[[["streamflags",3]],["streamflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",40,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"bitand","rustacuda","Returns the intersection between the two sets of flags.",42,[[["cudaflags",3]],["cudaflags",3]]],[11,"bitor","rustacuda::context","Returns the union of the two sets of flags.",3,[[["contextflags",3]],["contextflags",3]]],[11,"bitor","rustacuda::event","Returns the union of the two sets of flags.",14,[[["eventflags",3]],["eventflags",3]]],[11,"bitor","rustacuda::memory::array","Returns the union of the two sets of flags.",22,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"bitor","rustacuda::stream","Returns the union of the two sets of flags.",39,[[["streamflags",3]],["streamflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",40,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"bitor","rustacuda","Returns the union of the two sets of flags.",42,[[["cudaflags",3]],["cudaflags",3]]],[11,"bitxor","rustacuda::context","Returns the left flags, but with all the right flags …",3,[[["contextflags",3]],["contextflags",3]]],[11,"bitxor","rustacuda::event","Returns the left flags, but with all the right flags …",14,[[["eventflags",3]],["eventflags",3]]],[11,"bitxor","rustacuda::memory::array","Returns the left flags, but with all the right flags …",22,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"bitxor","rustacuda::stream","Returns the left flags, but with all the right flags …",39,[[["streamflags",3]],["streamflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",40,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"bitxor","rustacuda","Returns the left flags, but with all the right flags …",42,[[["cudaflags",3]],["cudaflags",3]]],[11,"bitand_assign","rustacuda::context","Disables all flags disabled in the set.",3,[[["contextflags",3]]]],[11,"bitand_assign","rustacuda::event","Disables all flags disabled in the set.",14,[[["eventflags",3]]]],[11,"bitand_assign","rustacuda::memory::array","Disables all flags disabled in the set.",22,[[["arrayobjectflags",3]]]],[11,"bitand_assign","rustacuda::stream","Disables all flags disabled in the set.",39,[[["streamflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",40,[[["streamwaiteventflags",3]]]],[11,"bitand_assign","rustacuda","Disables all flags disabled in the set.",42,[[["cudaflags",3]]]],[11,"bitor_assign","rustacuda::context","Adds the set of flags.",3,[[["contextflags",3]]]],[11,"bitor_assign","rustacuda::event","Adds the set of flags.",14,[[["eventflags",3]]]],[11,"bitor_assign","rustacuda::memory::array","Adds the set of flags.",22,[[["arrayobjectflags",3]]]],[11,"bitor_assign","rustacuda::stream","Adds the set of flags.",39,[[["streamflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",40,[[["streamwaiteventflags",3]]]],[11,"bitor_assign","rustacuda","Adds the set of flags.",42,[[["cudaflags",3]]]],[11,"bitxor_assign","rustacuda::context","Toggles the set of flags.",3,[[["contextflags",3]]]],[11,"bitxor_assign","rustacuda::event","Toggles the set of flags.",14,[[["eventflags",3]]]],[11,"bitxor_assign","rustacuda::memory::array","Toggles the set of flags.",22,[[["arrayobjectflags",3]]]],[11,"bitxor_assign","rustacuda::stream","Toggles the set of flags.",39,[[["streamflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",40,[[["streamwaiteventflags",3]]]],[11,"bitxor_assign","rustacuda","Toggles the set of flags.",42,[[["cudaflags",3]]]],[11,"index","rustacuda::memory::device::device_slice","",27,[[["usize",15],["range",3]]]],[11,"index","","",27,[[["rangefull",3]]]],[11,"index","","",27,[[["rangefrom",3],["usize",15]]]],[11,"index","","",27,[[["usize",15],["rangeinclusive",3]]]],[11,"index","","",27,[[["rangeto",3],["usize",15]]]],[11,"index","","",27,[[["usize",15],["rangetoinclusive",3]]]],[11,"index_mut","","",27,[[["usize",15],["range",3]]]],[11,"index_mut","","",27,[[["rangefull",3]]]],[11,"index_mut","","",27,[[["rangefrom",3],["usize",15]]]],[11,"index_mut","","",27,[[["usize",15],["rangeinclusive",3]]]],[11,"index_mut","","",27,[[["rangeto",3],["usize",15]]]],[11,"index_mut","","",27,[[["usize",15],["rangetoinclusive",3]]]],[11,"hash","rustacuda::context","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",7,[[]]],[11,"hash","rustacuda::device","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","rustacuda::event","",14,[[]]],[11,"hash","rustacuda::function","",19,[[]]],[11,"hash","rustacuda::memory::array","",22,[[]]],[11,"hash","rustacuda::memory::unified","",33,[[]]],[11,"hash","rustacuda::stream","",39,[[]]],[11,"hash","","",40,[[]]],[11,"hash","rustacuda","",42,[[]]],[11,"hash","","",43,[[]]],[11,"borrow","rustacuda::memory::unified","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"from_iter","rustacuda::context","",3,[[["intoiterator",8]],["contextflags",3]]],[11,"from_iter","rustacuda::event","",14,[[["intoiterator",8]],["eventflags",3]]],[11,"from_iter","rustacuda::memory::array","",22,[[["intoiterator",8]],["arrayobjectflags",3]]],[11,"from_iter","rustacuda::stream","",39,[[["intoiterator",8]],["streamflags",3]]],[11,"from_iter","","",40,[[["intoiterator",8]],["streamwaiteventflags",3]]],[11,"from_iter","rustacuda","",42,[[["intoiterator",8]],["cudaflags",3]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",14,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",22,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",42,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",14,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",22,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",42,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",14,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",22,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",42,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",14,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",22,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",42,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::device::device_box","",25,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::unified","",33,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::module","",38,[[["formatter",3]],["result",6]]],[11,"wrap","rustacuda::memory","Wrap the given raw pointer in a DevicePointer. The given …",35,[[],["devicepointer",3]]],[11,"as_raw","","Returns the contained pointer as a raw pointer. The …",35,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer. …",35,[[]]],[11,"is_null","","Returns true if the pointer is null.",35,[[],["bool",15]]],[11,"null","","Returns a null device pointer.",35,[[],["devicepointer",3]]],[11,"offset","","Calculates the offset from a device pointer.",35,[[["isize",15]],["devicepointer",3]]],[11,"wrapping_offset","","Calculates the offset from a device pointer using …",35,[[["isize",15]],["devicepointer",3]]],[11,"add","","Calculates the offset from a pointer (convenience for …",35,[[["usize",15]],["devicepointer",3]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",35,[[["usize",15]],["devicepointer",3]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",35,[[["usize",15]],["devicepointer",3]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",35,[[["usize",15]],["devicepointer",3]]],[11,"wrap","","Wrap the given raw pointer in a UnifiedPointer. The given …",36,[[],["unifiedpointer",3]]],[11,"as_raw","","Returns the contained pointer as a raw pointer.",36,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer.",36,[[]]],[11,"is_null","","Returns true if the pointer is null.",36,[[],["bool",15]]],[11,"null","","Returns a null unified pointer.",36,[[],["unifiedpointer",3]]],[11,"offset","","Calculates the offset from a unified pointer.",36,[[["isize",15]],["unifiedpointer",3]]],[11,"wrapping_offset","","Calculates the offset from a unified pointer using …",36,[[["isize",15]],["unifiedpointer",3]]],[11,"add","","Calculates the offset from a pointer (convenience for …",36,[[["usize",15]],["unifiedpointer",3]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",36,[[["usize",15]],["unifiedpointer",3]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",36,[[["usize",15]],["unifiedpointer",3]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",36,[[["usize",15]],["unifiedpointer",3]]]],"p":[[4,"CacheConfig"],[4,"ResourceLimit"],[4,"SharedMemoryConfig"],[3,"ContextFlags"],[3,"Context"],[3,"UnownedContext"],[3,"ContextStack"],[3,"StreamPriorityRange"],[3,"CurrentContext"],[4,"DeviceAttribute"],[3,"Device"],[3,"Devices"],[4,"CudaError"],[8,"IntoResult"],[3,"EventFlags"],[4,"EventStatus"],[3,"Event"],[3,"GridSize"],[3,"BlockSize"],[4,"FunctionAttribute"],[3,"Function"],[4,"ArrayFormat"],[3,"ArrayObjectFlags"],[3,"ArrayDescriptor"],[3,"ArrayObject"],[3,"DeviceBox"],[3,"DeviceBuffer"],[3,"DeviceSlice"],[3,"DeviceChunks"],[3,"DeviceChunksMut"],[8,"CopyDestination"],[8,"AsyncCopyDestination"],[3,"LockedBuffer"],[3,"UnifiedBox"],[3,"UnifiedBuffer"],[3,"DevicePointer"],[3,"UnifiedPointer"],[3,"Module"],[3,"Symbol"],[3,"StreamFlags"],[3,"StreamWaitEventFlags"],[3,"Stream"],[3,"CudaFlags"],[3,"CudaApiVersion"]]},\
"rustacuda_core":{"doc":"RustaCUDA-core is a minimal subset of RustaCUDA which is …","i":[[0,"memory","rustacuda_core","",null,null],[0,"pointer","rustacuda_core::memory","",null,null],[3,"DevicePointer","rustacuda_core::memory::pointer","A pointer to device memory.",null,null],[12,"0","","",0,null],[11,"wrap","","Wrap the given raw pointer in a DevicePointer. The given …",0,[[]]],[11,"as_raw","","Returns the contained pointer as a raw pointer. The …",0,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer. …",0,[[]]],[11,"is_null","","Returns true if the pointer is null.",0,[[],["bool",15]]],[11,"null","","Returns a null device pointer.",0,[[]]],[11,"offset","","Calculates the offset from a device pointer.",0,[[["isize",15]]]],[11,"wrapping_offset","","Calculates the offset from a device pointer using …",0,[[["isize",15]]]],[11,"add","","Calculates the offset from a pointer (convenience for …",0,[[["usize",15]]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",0,[[["usize",15]]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",0,[[["usize",15]]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",0,[[["usize",15]]]],[3,"UnifiedPointer","","A pointer to unified memory.",null,null],[12,"0","","",1,null],[11,"wrap","","Wrap the given raw pointer in a UnifiedPointer. The given …",1,[[]]],[11,"as_raw","","Returns the contained pointer as a raw pointer.",1,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer.",1,[[]]],[11,"is_null","","Returns true if the pointer is null.",1,[[],["bool",15]]],[11,"null","","Returns a null unified pointer.",1,[[]]],[11,"offset","","Calculates the offset from a unified pointer.",1,[[["isize",15]]]],[11,"wrapping_offset","","Calculates the offset from a unified pointer using …",1,[[["isize",15]]]],[11,"add","","Calculates the offset from a pointer (convenience for …",1,[[["usize",15]]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",1,[[["usize",15]]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",1,[[["usize",15]]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",1,[[["usize",15]]]],[8,"DeviceCopy","rustacuda_core::memory","Marker trait for types which can safely be copied to or …",null,null],[3,"DevicePointer","rustacuda_core","A pointer to device memory.",null,null],[12,"0","","",0,null],[3,"UnifiedPointer","","A pointer to unified memory.",null,null],[12,"0","","",1,null],[8,"DeviceCopy","","Marker trait for types which can safely be copied to or …",null,null],[24,"DeviceCopy","","",null,null],[11,"borrow","rustacuda_core::memory::pointer","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["devicepointer",3]],["bool",15]]],[11,"eq","","",1,[[["unifiedpointer",3]],["bool",15]]],[11,"cmp","","",0,[[["devicepointer",3]],["ordering",4]]],[11,"cmp","","",1,[[["unifiedpointer",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["devicepointer",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["unifiedpointer",3]],[["option",4],["ordering",4]]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[]]],[11,"clone","","",1,[[]]]],"p":[[3,"DevicePointer"],[3,"UnifiedPointer"]]},\
"rustacuda_derive":{"doc":"","i":[[24,"DeviceCopy","rustacuda_derive","",null,null],[5,"impl_device_copy","","",null,[[["deriveinput",3]],["tokenstream",3]]],[5,"add_bound_to_generics","","",null,[[["generics",3],["tokenstream",3]],["generics",3]]],[5,"type_check_struct","","",null,[[["datastruct",3]],["tokenstream",3]]],[5,"type_check_enum","","",null,[[["dataenum",3]],["tokenstream",3]]],[5,"type_check_union","","",null,[[["dataunion",3]],["tokenstream",3]]],[5,"check_fields","","",null,[[],[["vec",3],["tokenstream",3]]]]],"p":[]},\
"rustcoalescence":{"doc":"","i":[[0,"args","rustcoalescence","",null,null],[0,"parse","rustcoalescence::args","",null,null],[5,"into_ron_args","rustcoalescence::args::parse","Transform the <code>command_args</code> into a RON <code>String</code>",null,[[["commandargs",3]],["string",3]]],[5,"try_parse_subcommand_arguments","","",null,[[["str",15],["str",15]],[["partition",3],["result",6],["deserializestate",8]]]],[4,"RustcoalescenceArgs","rustcoalescence::args","",null,null],[13,"Simulate","","",0,null],[13,"Replay","","",0,null],[3,"CommandArgs","","",null,null],[12,"args","","",1,null],[3,"SimulateArgs","","",null,null],[12,"common","","",2,null],[12,"event_log","","",2,null],[12,"scenario","","",2,null],[12,"reporters","","",2,null],[3,"SimulateArgsRaw","","",null,null],[12,"speciation_probability_per_generation","","",3,null],[12,"sample_percentage","","",3,null],[12,"seed","","",3,null],[12,"algorithm","","",3,null],[12,"event_log","","",3,null],[12,"scenario","","",3,null],[12,"reporters","","",3,null],[5,"deserialize_state_event_log","","",null,[[["partition",3]],[["option",4],["result",4]]]],[3,"CommonArgs","","",null,null],[12,"speciation_probability_per_generation","","",4,null],[12,"sample_percentage","","",4,null],[12,"seed","","",4,null],[12,"algorithm","","",4,null],[4,"Algorithm","","",null,null],[4,"Scenario","","",null,null],[13,"SpatiallyExplicit","","",5,null],[13,"NonSpatial","","",5,null],[13,"SpatiallyImplicit","","",5,null],[13,"AlmostInfinite","","",5,null],[4,"ScenarioRaw","","",null,null],[13,"SpatiallyExplicit","","",6,null],[13,"NonSpatial","","",6,null],[13,"SpatiallyImplicit","","",6,null],[13,"AlmostInfinite","","",6,null],[3,"InMemoryArgs","","",null,null],[12,"habitat_map","","",7,null],[12,"dispersal_map","","",7,null],[4,"MapLoadingMode","","",null,null],[13,"FixMe","","",8,null],[13,"OffByOne","","",8,null],[13,"Strict","","",8,null],[3,"InMemoryArgsRaw","","",null,null],[12,"habitat_map","","",9,null],[12,"dispersal_map","","",9,null],[12,"loading_mode","","",9,null],[3,"NonSpatialArgsRaw","","",null,null],[12,"area","","",10,null],[12,"deme","","",10,null],[12,"spatial","","",10,null],[3,"ReplayArgs","","",null,null],[12,"log","","",11,null],[12,"reporters","","",11,null],[4,"ReplayMode","","",null,null],[13,"Strict","","",12,null],[13,"WarnOnly","","",12,null],[3,"ReplayArgsRaw","","",null,null],[12,"logs","","",13,null],[12,"mode","","",13,null],[12,"reporters","","",13,null],[0,"cli","rustcoalescence","",null,null],[0,"replay","rustcoalescence::cli","",null,null],[5,"replay_with_logger","rustcoalescence::cli::replay","",null,[[["partitioning",8],["commandargs",3]],["result",6]]],[0,"simulate","rustcoalescence::cli","",null,null],[0,"monolithic","rustcoalescence::cli::simulate","",null,null],[5,"simulate_with_logger_monolithic","rustcoalescence::cli::simulate::monolithic","",null,[[["commandargs",3]],["result",6]]],[0,"impl","rustcoalescence::cli::simulate","",null,null],[5,"simulate_with_logger","","",null,[[["scenarioargs",4],["reporter",8],["box",3],["localpartition",8],["commonargs",3]],["result",6]]],[0,"maps","rustcoalescence","",null,null],[5,"load_dispersal_map","rustcoalescence::maps","",null,[[["path",3],["maploadingmode",4]],[["result",6],["array2d",3]]]],[5,"load_habitat_map","","",null,[[["array2d",3],["path",3],["maploadingmode",4]],[["result",6],["array2d",3]]]],[5,"fix_habitat_map","","",null,[[["array2d",3],["array2d",3]]]],[5,"fix_dispersal_map","","",null,[[["array2d",3],["array2d",3]]]],[0,"minimal_logger","rustcoalescence","",null,null],[3,"MinimalLogger","rustcoalescence::minimal_logger","",null,null],[0,"reporter","rustcoalescence","",null,null],[3,"DynamicReporterContext","rustcoalescence::reporter","",null,null],[12,"reporter","","",14,null],[11,"new","","",14,[[["reporterpluginvec",3]]]],[0,"tiff","rustcoalescence","",null,null],[0,"private","rustcoalescence::tiff","",null,null],[8,"TiffDataType","rustcoalescence::tiff::private","",null,null],[18,"BIT_WIDTH","","",15,null],[18,"SAMPLE_FORMAT","","",15,null],[10,"decoding_buffer_from_data","","",15,[[],["decodingbuffer",4]]],[8,"TiffDataType","rustcoalescence::tiff","",null,null],[5,"load_map_from_tiff","","Loads a 2D map from TIFF file at <code>path</code> with the data type <code>D</code>…",null,[[["bool",15],["path",3]],[["result",6],["array2d",3]]]],[7,"MINIMAL_LOGGER","rustcoalescence","",null,null],[5,"main","","",null,[[],["result",6]]],[14,"match_scenario_algorithm","","",null,null],[11,"from","rustcoalescence::args","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"approx_from","","",16,[[],["result",4]]],[11,"approx_into","","",16,[[],["result",4]]],[11,"value_from","","",16,[[],["result",4]]],[11,"value_into","","",16,[[],["result",4]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"vzip","","",16,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"approx_from","","",11,[[],["result",4]]],[11,"approx_into","","",11,[[],["result",4]]],[11,"value_from","","",11,[[],["result",4]]],[11,"value_into","","",11,[[],["result",4]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"approx_from","","",12,[[],["result",4]]],[11,"approx_into","","",12,[[],["result",4]]],[11,"value_from","","",12,[[],["result",4]]],[11,"value_into","","",12,[[],["result",4]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"approx_from","","",13,[[],["result",4]]],[11,"approx_into","","",13,[[],["result",4]]],[11,"value_from","","",13,[[],["result",4]]],[11,"value_into","","",13,[[],["result",4]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"vzip","","",13,[[]]],[11,"from","rustcoalescence::minimal_logger","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"approx_from","","",17,[[],["result",4]]],[11,"approx_into","","",17,[[],["result",4]]],[11,"value_from","","",17,[[],["result",4]]],[11,"value_into","","",17,[[],["result",4]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"vzip","","",17,[[]]],[11,"from","rustcoalescence::reporter","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"approx_from","","",14,[[],["result",4]]],[11,"approx_into","","",14,[[],["result",4]]],[11,"value_from","","",14,[[],["result",4]]],[11,"value_into","","",14,[[],["result",4]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"vzip","","",14,[[]]],[11,"from","rustcoalescence::args","",5,[[["scenarioraw",4]]]],[11,"clone","","",8,[[],["maploadingmode",4]]],[11,"default","","",8,[[]]],[11,"default","","",12,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence::reporter","",14,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence::args","",16,[[["formatter",3]],["result",6]]],[11,"try_from","","",7,[[["inmemoryargsraw",3]],["result",4]]],[11,"enabled","rustcoalescence::minimal_logger","",17,[[["metadata",3]],["bool",15]]],[11,"log","","",17,[[["record",3]]]],[11,"flush","","",17,[[]]],[11,"clap","rustcoalescence::args","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[],["bool",15]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[],["bool",15]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize_state","","",2,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",3,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",16,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",11,[[["partition",3]],["result",4]]],[11,"try_build","rustcoalescence::reporter","",14,[[],[["result",6],["filteredreporter",3]]]],[11,"try_parse","rustcoalescence::args","",2,[[["commandargs",3]],["result",6]]],[11,"try_parse","","",11,[[["commandargs",3]],["result",6]]]],"p":[[4,"RustcoalescenceArgs"],[3,"CommandArgs"],[3,"SimulateArgs"],[3,"SimulateArgsRaw"],[3,"CommonArgs"],[4,"Scenario"],[4,"ScenarioRaw"],[3,"InMemoryArgs"],[4,"MapLoadingMode"],[3,"InMemoryArgsRaw"],[3,"NonSpatialArgsRaw"],[3,"ReplayArgs"],[4,"ReplayMode"],[3,"ReplayArgsRaw"],[3,"DynamicReporterContext"],[8,"TiffDataType"],[4,"Algorithm"],[3,"MinimalLogger"]]},\
"rustcoalescence_algorithms":{"doc":"","i":[[8,"AlgorithmArguments","rustcoalescence_algorithms","",null,null],[16,"Arguments","","",0,null],[8,"Algorithm","","",null,null],[16,"Error","","",1,null],[16,"Rng","","",1,null],[16,"LineageReference","","",1,null],[16,"LineageStore","","",1,null],[10,"initialise_and_simulate","","ErrorsReturns a <code>Self::Error</code> if initialising or running …",1,[[["iterator",8],["originpresampler",3],["u64",15]],["result",4]]]],"p":[[8,"AlgorithmArguments"],[8,"Algorithm"]]},\
"rustcoalescence_algorithms_cuda":{"doc":"","i":[[0,"arguments","rustcoalescence_algorithms_cuda","",null,null],[3,"MonolithicParallelismMode","rustcoalescence_algorithms_cuda::arguments","",null,null],[12,"event_slice","","",0,null],[3,"IsolatedParallelismMode","","",null,null],[12,"event_slice","","",1,null],[12,"partition","","",1,null],[4,"ParallelismMode","","",null,null],[13,"Monolithic","","",2,null],[13,"IsolatedIndividuals","","",2,null],[13,"IsolatedLandscape","","",2,null],[3,"CudaArguments","","",null,null],[12,"device","","",3,null],[12,"ptx_jit","","",3,null],[12,"delta_t","","",3,null],[12,"block_size","","",3,null],[12,"grid_size","","",3,null],[12,"step_slice","","",3,null],[12,"dedup_cache","","",3,null],[12,"parallelism_mode","","",3,null],[3,"CudaArgumentsRaw","","",null,null],[12,"device","","",4,null],[12,"ptx_jit","","",4,null],[12,"delta_t","","",4,null],[12,"block_size","","",4,null],[12,"grid_size","","",4,null],[12,"step_slice","","",4,null],[12,"dedup_cache","","",4,null],[12,"parallelism_mode","","",4,null],[0,"cuda","rustcoalescence_algorithms_cuda","",null,null],[5,"with_initialised_cuda","rustcoalescence_algorithms_cuda::cuda","",null,[[["u32",15],["fnonce",8]],["result",6]]],[0,"info","rustcoalescence_algorithms_cuda","",null,null],[5,"print_context_resource_limits","rustcoalescence_algorithms_cuda::info","",null,[[]]],[5,"print_kernel_function_attributes","","",null,[[["function",3]]]],[0,"kernel","rustcoalescence_algorithms_cuda","",null,null],[0,"impl","rustcoalescence_algorithms_cuda::kernel","",null,null],[0,"launch","","",null,null],[0,"with_dimensions","rustcoalescence_algorithms_cuda::kernel::launch","",null,null],[3,"SimulationKernelWithDimensions","rustcoalescence_algorithms_cuda::kernel::launch::with_dimensions","",null,null],[12,"compiler","","",5,null],[12,"ptx_jit","","",5,null],[12,"module","","",5,null],[12,"entry_point","","",5,null],[12,"marker","","",5,null],[12,"grid_size","","",5,null],[12,"block_size","","",5,null],[12,"shared_mem_bytes","","",5,null],[0,"with_stream","rustcoalescence_algorithms_cuda::kernel::launch","",null,null],[3,"SimulationKernelWithDimensionsStream","rustcoalescence_algorithms_cuda::kernel::launch::with_stream","",null,null],[12,"compiler","","",6,null],[12,"ptx_jit","","",6,null],[12,"module","","",6,null],[12,"entry_point","","",6,null],[12,"marker","","",6,null],[12,"grid_size","","",6,null],[12,"block_size","","",6,null],[12,"shared_mem_bytes","","",6,null],[12,"stream","","",6,null],[11,"with_stream","rustcoalescence_algorithms_cuda::kernel::launch::with_dimensions","",5,[[["stream",3]],["simulationkernelwithdimensionsstream",3]]],[11,"launch_and_synchronise","rustcoalescence_algorithms_cuda::kernel::launch::with_stream","",6,[[["hostdeviceboxmut",3],["u64",15],["devicebox",3],["hostdeviceboxmut",3],["hostdeviceboxmut",3],["nonnegativef64",3],["hostdeviceboxmut",3],["hostdeviceboxmut",3]],["cudaresult",6]]],[0,"specialiser","rustcoalescence_algorithms_cuda::kernel","",null,null],[5,"get_ptx_cstr_for_specialisation","rustcoalescence_algorithms_cuda::kernel::specialiser","",null,null],[5,"get_ptx_cstr","","",null,[[],["cstr",3]]],[5,"type_name_of","","",null,[[],["cstring",3]]],[3,"SimulationKernel","rustcoalescence_algorithms_cuda::kernel","",null,null],[12,"compiler","","",7,null],[12,"ptx_jit","","",7,null],[12,"module","","",7,null],[12,"entry_point","","",7,null],[12,"marker","","",7,null],[0,"parallelisation","rustcoalescence_algorithms_cuda","",null,null],[0,"monolithic","rustcoalescence_algorithms_cuda::parallelisation","",null,null],[5,"simulate","rustcoalescence_algorithms_cuda::parallelisation::monolithic","",null,[[["lineage",3],["rusttocuda",8],["primeablerng",8],["devicecopy",8],["nonzerousize",3],["vecdeque",3],["coalescencesampler",8],["dispersalsampler",8],["immigrationentry",8],["emigrationexit",8],["minspeciationtrackingeventsampler",8],["speciationprobability",8],["lineagestore",8],["simulationkernel",3],["turnoverrate",8],["habitat",8],["lineagereference",8],["peekableactivelineagesampler",8],["stream",3],["simulation",3],["singularactivelineagesampler",8]],["result",6]]],[4,"CudaAlgorithm","rustcoalescence_algorithms_cuda","",null,null],[11,"from","rustcoalescence_algorithms_cuda::arguments","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","rustcoalescence_algorithms_cuda::kernel::launch::with_dimensions","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","rustcoalescence_algorithms_cuda::kernel::launch::with_stream","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","rustcoalescence_algorithms_cuda::kernel","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","rustcoalescence_algorithms_cuda","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"vzip","","",8,[[]]],[11,"default","rustcoalescence_algorithms_cuda::arguments","",4,[[]]],[11,"deref","rustcoalescence_algorithms_cuda::kernel","",7,[[]]],[11,"fmt","rustcoalescence_algorithms_cuda::arguments","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_cuda","",8,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]],[11,"deserialize_state","rustcoalescence_algorithms_cuda::arguments","",2,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",3,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",4,[[["partition",3]],["result",4]]],[11,"with_kernel","rustcoalescence_algorithms_cuda::kernel","",7,[[["bool",15]],["result",6]]],[11,"function","","",7,[[],["function",3]]],[11,"with_dimensions","","",7,[[["gridsize",3],["u32",15],["into",8],["into",8],["blocksize",3]],["simulationkernelwithdimensions",3]]]],"p":[[3,"MonolithicParallelismMode"],[3,"IsolatedParallelismMode"],[4,"ParallelismMode"],[3,"CudaArguments"],[3,"CudaArgumentsRaw"],[3,"SimulationKernelWithDimensions"],[3,"SimulationKernelWithDimensionsStream"],[3,"SimulationKernel"],[4,"CudaAlgorithm"]]},\
"rustcoalescence_algorithms_cuda_kernel":{"doc":"","i":[],"p":[]},\
"rustcoalescence_algorithms_cuda_kernel_ptx_jit":{"doc":"","i":[[0,"host","rustcoalescence_algorithms_cuda_kernel_ptx_jit","",null,null],[0,"arguments","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host","",null,null],[0,"compiler","","",null,null],[0,"preprocess","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",null,null],[17,"B16_ASCII_BYTES","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler::preprocess","",null,null],[17,"B32_ASCII_BYTES","","",null,null],[17,"B64_ASCII_BYTES","","",null,null],[17,"ZERO_ASCII_BYTES","","",null,null],[0,"regex","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",null,null],[3,"CONST_MARKER_REGEX","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler::regex","",null,null],[12,"__private_field","","",0,null],[3,"CONST_BASE_REGISTER_REGEX","","",null,null],[12,"__private_field","","",1,null],[3,"CONST_LOAD_INSTRUCTION_REGEX","","",null,null],[12,"__private_field","","",2,null],[0,"replace","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",null,null],[17,"R_ASCII_BYTE","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler::replace","",null,null],[17,"S_ASCII_BYTE","","",null,null],[17,"D_ASCII_BYTE","","",null,null],[6,"ByteSliceOptionalArguments","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",null,null],[3,"PtxJITCompiler","","",null,null],[12,"ptx_slices","","",3,null],[12,"last_arguments","","",3,null],[12,"last_ptx","","",3,null],[4,"PtxJITResult","","",null,null],[13,"Cached","","",4,null],[13,"Recomputed","","",4,null],[4,"PtxLoadWidth","","",null,null],[13,"B2","","",5,null],[13,"B4","","",5,null],[13,"B8","","",5,null],[4,"PtxElement","","",null,null],[13,"CopiedSource","","",6,null],[12,"ptx","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler::PtxElement","",7,null],[13,"ConstLoad","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",6,null],[12,"ptx","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler::PtxElement","",8,null],[12,"parameter_index","","",8,null],[12,"byte_offset","","",8,null],[12,"load_width","","",8,null],[12,"register","","",8,null],[14,"compilePtxJITwithArguments","rustcoalescence_algorithms_cuda_kernel_ptx_jit","",null,null],[11,"from","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler::regex","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"deref","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler::regex","",0,[[],["regex",3]]],[11,"deref","","",1,[[],["regex",3]]],[11,"deref","","",2,[[],["regex",3]]],[11,"initialize","","",0,[[]]],[11,"initialize","","",1,[[]]],[11,"initialize","","",2,[[]]],[11,"new","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",3,[[["cstr",3]]]],[11,"with_arguments","","",3,[[["option",4]],["ptxjitresult",4]]]],"p":[[3,"CONST_MARKER_REGEX"],[3,"CONST_BASE_REGISTER_REGEX"],[3,"CONST_LOAD_INSTRUCTION_REGEX"],[3,"PtxJITCompiler"],[4,"PtxJITResult"],[4,"PtxLoadWidth"],[4,"PtxElement"],[13,"CopiedSource"],[13,"ConstLoad"]]},\
"rustcoalescence_algorithms_cuda_kernel_specialiser":{"doc":"","i":[[17,"SIMULATION_SPECIALISATION_ENV","rustcoalescence_algorithms_cuda_kernel_specialiser","",null,null],[14,"specialise","","",null,null],[14,"rerun_if_specialisation_changed","","",null,null]],"p":[]},\
"rustcoalescence_algorithms_independent":{"doc":"","i":[[0,"arguments","rustcoalescence_algorithms_independent","",null,null],[3,"MonolithicParallelismMode","rustcoalescence_algorithms_independent::arguments","",null,null],[12,"event_slice","","",0,null],[3,"IsolatedParallelismMode","","",null,null],[12,"event_slice","","",1,null],[12,"partition","","",1,null],[3,"ProbabilisticParallelismMode","","",null,null],[12,"communication_probability","","",2,null],[4,"ParallelismMode","","",null,null],[13,"Monolithic","","",3,null],[13,"IsolatedIndividuals","","",3,null],[13,"IsolatedLandscape","","",3,null],[13,"Individuals","","",3,null],[13,"Landscape","","",3,null],[13,"Probabilistic","","",3,null],[3,"IndependentArguments","","",null,null],[12,"delta_t","","",4,null],[12,"step_slice","","",4,null],[12,"dedup_cache","","",4,null],[12,"parallelism_mode","","",4,null],[3,"IndependentArgumentsRaw","","",null,null],[12,"delta_t","","",5,null],[12,"step_slice","","",5,null],[12,"dedup_cache","","",5,null],[12,"parallelism_mode","","",5,null],[4,"IndependentAlgorithm","rustcoalescence_algorithms_independent","",null,null],[11,"from","rustcoalescence_algorithms_independent::arguments","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","rustcoalescence_algorithms_independent","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"default","rustcoalescence_algorithms_independent::arguments","",5,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize_state","","",3,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",4,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",5,[[["partition",3]],["result",4]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_independent","",6,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]]],"p":[[3,"MonolithicParallelismMode"],[3,"IsolatedParallelismMode"],[3,"ProbabilisticParallelismMode"],[4,"ParallelismMode"],[3,"IndependentArguments"],[3,"IndependentArgumentsRaw"],[4,"IndependentAlgorithm"]]},\
"rustcoalescence_algorithms_monolithic":{"doc":"","i":[[0,"arguments","rustcoalescence_algorithms_monolithic","",null,null],[3,"MonolithicArguments","rustcoalescence_algorithms_monolithic::arguments","",null,null],[12,"parallelism_mode","","",0,null],[3,"MonolithicArgumentsRaw","","",null,null],[12,"parallelism_mode","","",1,null],[3,"OptimisticParallelismMode","","",null,null],[12,"delta_sync","","",2,null],[3,"AveragingParallelismMode","","",null,null],[12,"delta_sync","","",3,null],[4,"ParallelismMode","","",null,null],[13,"Monolithic","","",4,null],[13,"Optimistic","","",4,null],[13,"Lockstep","","",4,null],[13,"OptimisticLockstep","","",4,null],[13,"Averaging","","",4,null],[0,"classical","rustcoalescence_algorithms_monolithic","",null,null],[4,"ClassicalAlgorithm","rustcoalescence_algorithms_monolithic::classical","",null,null],[0,"gillespie","rustcoalescence_algorithms_monolithic","",null,null],[3,"GillespieAlgorithm","rustcoalescence_algorithms_monolithic::gillespie","",null,null],[0,"skipping_gillespie","rustcoalescence_algorithms_monolithic","",null,null],[3,"SkippingGillespieAlgorithm","rustcoalescence_algorithms_monolithic::skipping_gillespie","",null,null],[11,"from","rustcoalescence_algorithms_monolithic::arguments","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","rustcoalescence_algorithms_monolithic::classical","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","rustcoalescence_algorithms_monolithic::gillespie","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","rustcoalescence_algorithms_monolithic::skipping_gillespie","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"default","rustcoalescence_algorithms_monolithic::arguments","",1,[[],["monolithicargumentsraw",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize_state","","",0,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",1,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",4,[[["partition",3]],["result",4]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_monolithic::classical","",5,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_monolithic::gillespie","",6,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_monolithic::skipping_gillespie","",7,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]]],"p":[[3,"MonolithicArguments"],[3,"MonolithicArgumentsRaw"],[3,"OptimisticParallelismMode"],[3,"AveragingParallelismMode"],[4,"ParallelismMode"],[4,"ClassicalAlgorithm"],[3,"GillespieAlgorithm"],[3,"SkippingGillespieAlgorithm"]]},\
"rustcoalescence_linker":{"doc":"","i":[[17,"SIMULATION_SPECIALISATION_HINT","rustcoalescence_linker","",null,null],[17,"SIMULATION_SPECIALISATION_ENV","","",null,null],[5,"extract_specialisation","","",null,[[["str",15]],[["option",4],["str",15]]]],[5,"build_kernel_with_specialisation","","",null,[[["str",15]],[["pathbuf",3],["result",6]]]],[5,"main","","",null,[[]]]],"p":[]},\
"rustcoalescence_scenarios":{"doc":"","i":[[0,"almost_infinite","rustcoalescence_scenarios","",null,null],[3,"AlmostInfiniteScenario","rustcoalescence_scenarios::almost_infinite","",null,null],[12,"radius","","",0,null],[12,"habitat","","",0,null],[12,"dispersal_sampler","","",0,null],[12,"turnover_rate","","",0,null],[12,"speciation_probability","","",0,null],[3,"AlmostInfiniteArguments","","",null,null],[12,"radius","","",1,null],[12,"sigma","","",1,null],[0,"non_spatial","rustcoalescence_scenarios","",null,null],[3,"NonSpatialScenario","rustcoalescence_scenarios::non_spatial","",null,null],[12,"habitat","","",2,null],[12,"dispersal_sampler","","",2,null],[12,"turnover_rate","","",2,null],[12,"speciation_probability","","",2,null],[3,"NonSpatialArguments","","",null,null],[12,"area","","",3,null],[12,"deme","","",3,null],[0,"spatially_explicit","rustcoalescence_scenarios","",null,null],[3,"SpatiallyExplicitScenario","rustcoalescence_scenarios::spatially_explicit","",null,null],[12,"habitat","","",4,null],[12,"dispersal_map","","",4,null],[12,"turnover_rate","","",4,null],[12,"speciation_probability","","",4,null],[12,"_marker","","",4,null],[3,"InMemoryArguments","","",null,null],[12,"habitat_map","","",5,null],[12,"dispersal_map","","",5,null],[3,"NonNegativeF64Error","","",null,null],[12,"0","","",6,null],[0,"spatially_implicit","rustcoalescence_scenarios","",null,null],[3,"SpatiallyImplicitScenario","rustcoalescence_scenarios::spatially_implicit","",null,null],[12,"habitat","","",7,null],[12,"dispersal_sampler","","",7,null],[12,"turnover_rate","","",7,null],[12,"speciation_probability","","",7,null],[3,"SpatiallyImplicitArguments","","",null,null],[12,"local_area","","",8,null],[12,"local_deme","","",8,null],[12,"meta_area","","",8,null],[12,"meta_deme","","",8,null],[12,"migration_probability_per_generation","","",8,null],[8,"ScenarioArguments","rustcoalescence_scenarios","",null,null],[16,"Arguments","","",9,null],[8,"Scenario","","",null,null],[16,"Error","","",10,null],[16,"Habitat","","",10,null],[16,"OriginSampler","","",10,null],[16,"Decomposition","","",10,null],[16,"LineageReference","","",10,null],[16,"LineageStore","","",10,null],[16,"DispersalSampler","","",10,null],[16,"TurnoverRate","","",10,null],[16,"SpeciationProbability","","",10,null],[10,"initialise","","ErrorsReturns a <code>Self::Error</code> if initialising the scenario …",10,[[["positiveunitf64",3]],["result",4]]],[10,"build","","Inside rustcoalescence, I know that only specialised …",10,[[]]],[10,"sample_habitat","","",10,[[["originpresampler",3],["iterator",8]]]],[10,"habitat","","",10,[[]]],[10,"decompose","","",10,[[["u32",15],["nonzerou32",3]]]],[11,"from","rustcoalescence_scenarios::almost_infinite","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","rustcoalescence_scenarios::non_spatial","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","rustcoalescence_scenarios::spatially_explicit","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","rustcoalescence_scenarios::spatially_implicit","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"vzip","","",8,[[]]],[11,"initialise","rustcoalescence_scenarios::almost_infinite","",0,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",0,[[]]],[11,"sample_habitat","","",0,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",0,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",0,[[]]],[11,"initialise","rustcoalescence_scenarios::non_spatial","",2,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",2,[[]]],[11,"sample_habitat","","",2,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",2,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",2,[[]]],[11,"initialise","rustcoalescence_scenarios::spatially_explicit","",4,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",4,[[]]],[11,"sample_habitat","","",4,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",4,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",4,[[]]],[11,"initialise","rustcoalescence_scenarios::spatially_implicit","",7,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",7,[[]]],[11,"sample_habitat","","",7,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",7,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",7,[[]]],[11,"fmt","rustcoalescence_scenarios::almost_infinite","",1,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::non_spatial","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::spatially_explicit","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::spatially_implicit","",8,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::spatially_explicit","",6,[[["formatter",3]],["result",6]]],[11,"deserialize","rustcoalescence_scenarios::almost_infinite","",1,[[],["result",4]]],[11,"deserialize","rustcoalescence_scenarios::non_spatial","",3,[[],["result",4]]],[11,"deserialize","rustcoalescence_scenarios::spatially_implicit","",8,[[],["result",4]]]],"p":[[3,"AlmostInfiniteScenario"],[3,"AlmostInfiniteArguments"],[3,"NonSpatialScenario"],[3,"NonSpatialArguments"],[3,"SpatiallyExplicitScenario"],[3,"InMemoryArguments"],[3,"NonNegativeF64Error"],[3,"SpatiallyImplicitScenario"],[3,"SpatiallyImplicitArguments"],[8,"ScenarioArguments"],[8,"Scenario"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);