var searchIndex = JSON.parse('{\
"array2d":{"doc":"<code>Array2D</code> provides a fixed sized two-dimensional array. It …","i":[[3,"Array2D","array2d","A fixed sized two-dimensional array.",null,null],[4,"Error","","An error that can arise during the use of an <code>Array2D</code>.",null,null],[13,"IndicesOutOfBounds","","The given indices were out of bounds.",0,null],[13,"IndexOutOfBounds","","The given index in row or column major order was out of …",0,null],[13,"DimensionMismatch","","The dimensions given did not match the elements provided",0,null],[13,"NotEnoughElements","","There were not enough elements to fill the array.",0,null],[11,"from_rows","","Creates a new <code>Array2D</code> from a slice of rows, each of which …",1,[[],[["result",4],["error",4]]]],[11,"from_columns","","Creates a new <code>Array2D</code> from a slice of columns, each of …",1,[[],[["result",4],["error",4]]]],[11,"from_row_major","","Creates a new <code>Array2D</code> from the given flat slice in row …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"from_column_major","","Creates a new <code>Array2D</code> from the given flat slice in column …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"filled_with","","Creates a new <code>Array2D</code> with the specified number of rows …",1,[[["usize",15]]]],[11,"fill_with","","Renamed to <code>filled_with</code>.",1,[[["usize",15]]]],[11,"filled_by_row_major","","Creates a new <code>Array2D</code> with the specified number of rows …",1,[[["usize",15]]]],[11,"filled_by_column_major","","Creates a new <code>Array2D</code> with the specified number of rows …",1,[[["usize",15]]]],[11,"from_iter_row_major","","Creates a new <code>Array2D</code> with the specified number of rows …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"from_iter_column_major","","Creates a new <code>Array2D</code> with the specified number of rows …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"num_rows","","The number of rows.",1,[[],["usize",15]]],[11,"num_columns","","The number of columns.",1,[[],["usize",15]]],[11,"num_elements","","The total number of elements, i.e. the product of <code>num_rows</code>…",1,[[],["usize",15]]],[11,"row_len","","The number of elements in each row, i.e. the number of …",1,[[],["usize",15]]],[11,"column_len","","The number of elements in each column, i.e. the number of …",1,[[],["usize",15]]],[11,"get","","Returns a reference to the element at the given <code>row</code> and …",1,[[["usize",15]],["option",4]]],[11,"get_row_major","","Returns a reference to the element at the given index in …",1,[[["usize",15]],["option",4]]],[11,"get_column_major","","Returns a reference to the element at the given index in …",1,[[["usize",15]],["option",4]]],[11,"get_mut","","Returns a mutable reference to the element at the given …",1,[[["usize",15]],["option",4]]],[11,"get_mut_row_major","","Returns a mutable reference to the element at the given …",1,[[["usize",15]],["option",4]]],[11,"get_mut_column_major","","Returns a mutable reference to the element at the given …",1,[[["usize",15]],["option",4]]],[11,"set","","Changes the element at given <code>row</code> and <code>column</code> to <code>element</code>. …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"set_row_major","","Changes the element at the given <code>index</code> to <code>element</code>, in row …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"set_column_major","","Changes the element at the given <code>index</code> to <code>element</code>, in …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"elements_row_major_iter","","Returns an <code>Iterator</code> over references to all elements in …",1,[[]]],[11,"elements_column_major_iter","","Returns an <code>Iterator</code> over references to all elements in …",1,[[]]],[11,"row_iter","","Returns an <code>Iterator</code> over references to all elements in …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"column_iter","","Returns an <code>Iterator</code> over references to all elements in …",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"rows_iter","","Returns an <code>Iterator</code> over all rows. Each <code>Item</code> is itself …",1,[[]]],[11,"columns_iter","","Returns an <code>Iterator</code> over all columns. Each <code>Item</code> is itself …",1,[[]]],[11,"as_rows","","Collects the <code>Array2D</code> into a <code>Vec</code> of rows, each of which …",1,[[],[["vec",3],["vec",3]]]],[11,"as_columns","","Collects the <code>Array2D</code> into a <code>Vec</code> of columns, each of which …",1,[[],[["vec",3],["vec",3]]]],[11,"as_row_major","","Collects the <code>Array2D</code> into a <code>Vec</code> of elements in row major …",1,[[],["vec",3]]],[11,"into_row_major","","Converts the <code>Array2D</code> into a <code>Vec</code> of elements in row major …",1,[[],["vec",3]]],[11,"as_column_major","","Collects the <code>Array2D</code> into a <code>Vec</code> of elements in column …",1,[[],["vec",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[["array2d",3]],["bool",15]]],[11,"ne","","",1,[[["array2d",3]],["bool",15]]],[11,"eq","","",0,[[["error",4]],["bool",15]]],[11,"ne","","",0,[[["error",4]],["bool",15]]],[11,"index","","Returns the element at the given indices, given as …",1,[[]]],[11,"index_mut","","Returns a mutable version of the element at the given …",1,[[]]],[11,"clone","","",1,[[],["array2d",3]]],[11,"borrow_mut","","",1,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",1,[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]]]],"p":[[4,"Error"],[3,"Array2D"]]},\
"float_next_after":{"doc":"","i":[[8,"NextAfter","float_next_after","Returns the next representable float value in the …",null,null],[10,"next_after","","",0,[[]]]],"p":[[8,"NextAfter"]]},\
"necsim_core":{"doc":"","i":[[0,"cogs","necsim_core","",null,null],[3,"BackedUp","necsim_core::cogs","",null,null],[8,"Backup","","",null,null],[11,"backup_unchecked","","",0,[[]]],[11,"backup","","",0,[[],["backedup",3]]],[8,"Habitat","","",null,null],[11,"get_extent","","",1,[[],["landscapeextent",3]]],[11,"contains","","",1,[[["location",3]],["bool",15]]],[11,"get_total_habitat","","ContractsPost-condition - debug: total habitat is the sum …",1,[[],["u64",15]]],[11,"get_habitat_at_location","","ContractsPre-condition - debug: location is inside …",1,[[["location",3]],["u32",15]]],[11,"map_indexed_location_to_u64_injective","","ContractsPre-condition - debug: location is inside …",1,[[["indexedlocation",3]],["u64",15]]],[8,"OriginSampler","","",null,null],[16,"Habitat","","",2,null],[11,"habitat","","",2,[[]]],[11,"full_upper_bound_size_hint","","",2,[[],["u64",15]]],[8,"SpeciationProbability","","",null,null],[11,"get_speciation_probability_at_location","","ContractsPre-condition - debug: location is inside habitat",3,[[["location",3]],["closedunitf64",3]]],[8,"HabitatPrimeableRng","","",null,null],[11,"prime_with_habitat","","",4,[[["indexedlocation",3],["u64",15]]]],[8,"PrimeableRng","","",null,null],[10,"prime_with","","",5,[[["u64",15]]]],[8,"RngCore","","",null,null],[16,"Seed","","",6,null],[10,"from_seed","","",6,[[]]],[11,"seed_from_u64","","",6,[[["u64",15]]]],[10,"sample_u64","","",6,[[],["u64",15]]],[8,"RngSampler","","",null,null],[11,"sample_uniform","","",7,[[],["closedunitf64",3]]],[11,"sample_index","","ContractsPost-condition - debug: samples U(0, length - 1)",7,[[["usize",15]],["usize",15]]],[11,"sample_index_u32","","ContractsPost-condition - debug: samples U(0, length - 1)",7,[[["u32",15]],["u32",15]]],[11,"sample_exponential","","",7,[[["positivef64",3]],["nonnegativef64",3]]],[11,"sample_event","","",7,[[["closedunitf64",3]],["bool",15]]],[11,"sample_2d_standard_normal","","",7,[[]]],[11,"sample_2d_normal","","",7,[[["f64",15],["nonnegativef64",3]]]],[8,"SplittableRng","","",null,null],[10,"split","","",8,[[]]],[10,"split_to_stream","","",8,[[["u64",15]]]],[8,"DispersalSampler","","",null,null],[11,"sample_dispersal_from_location","","ContractsPre-condition - debug: location is inside habitat",9,[[["location",3]],["location",3]]],[8,"SeparableDispersalSampler","","",null,null],[11,"sample_non_self_dispersal_from_location","","ContractsPre-condition - debug: location is inside habitat",10,[[["location",3]],["location",3]]],[11,"get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside habitat",10,[[["location",3]],["closedunitf64",3]]],[8,"LineageReference","","",null,null],[8,"GloballyCoherentLineageStore","","",null,null],[16,"LocationIterator","","",11,null],[11,"iter_active_locations","","",11,[[]]],[11,"get_active_local_lineage_references_at_location_unordered","","ContractsPre-condition - debug: location is inside habitat",11,[[["location",3]]]],[11,"insert_lineage_to_indexed_location_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",11,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_globally_coherent","","ContractsPost-condition - debug: unordered active lineage …",11,[[["positivef64",3]]]],[11,"immigrate_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",11,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[8,"LineageStore","","",null,null],[16,"LineageReferenceIterator","","",12,null],[11,"from_origin_sampler","","",12,[[["originsampler",8]]]],[11,"get_number_total_lineages","","",12,[[],["usize",15]]],[11,"iter_local_lineage_references","","",12,[[]]],[11,"get","","",12,[[],[["option",4],["lineage",3]]]],[8,"LocallyCoherentLineageStore","","",null,null],[11,"get_active_global_lineage_reference_at_indexed_location","","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"insert_lineage_to_indexed_location_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_locally_coherent","","ContractsPre-condition - debug: lineage reference is valid",13,[[["positivef64",3]]]],[11,"emigrate","","ContractsPre-condition - debug: lineage reference is valid",13,[[],["globallineagereference",3]]],[11,"immigrate_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[8,"EmigrationExit","","",null,null],[11,"optionally_emigrate","","ContractsPost-condition - debug: if ret is Some, it …",14,[[["location",3],["positivef64",3],["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3]],["option",4]]],[3,"CoalescenceRngSample","","",null,null],[8,"CoalescenceSampler","","",null,null],[11,"sample_interaction_at_location","","ContractsPre-condition - debug: location is habitable",15,[[["location",3],["coalescencerngsample",3]]]],[8,"TurnoverRate","","",null,null],[11,"get_turnover_rate_at_location","","ContractsPre-condition - debug: location is inside habitat",16,[[["location",3]],["nonnegativef64",3]]],[8,"EventSampler","","",null,null],[11,"sample_event_for_lineage_at_indexed_location_time_or_emigrate","","ContractsPost-condition - debug: lineage emigrated if no …",17,[[["positivef64",3],["nonnegativef64",3],["indexedlocation",3],["partialsimulation",3]],[["packedevent",3],["option",4]]]],[8,"MinSpeciationTrackingEventSampler","","",null,null],[10,"replace_min_speciation","","",18,[[["speciationsample",3],["option",4]],[["speciationsample",3],["option",4]]]],[3,"SpeciationSample","","",null,null],[8,"ImmigrationEntry","","",null,null],[11,"next_optional_immigration","","ContractsPre-condition - debug: option_next_event_time is …",19,[[["positivef64",3],["option",4]],[["option",4],["migratinglineage",3]]]],[11,"peek_next_immigration","","",19,[[],[["migratinglineage",3],["option",4]]]],[8,"ActiveLineageSampler","","",null,null],[11,"number_active_lineages","","",20,[[],["usize",15]]],[11,"get_last_event_time","","",20,[[],["nonnegativef64",3]]],[11,"pop_active_lineage_indexed_location_prior_event_time","","ContractsPost-condition - debug: removes an active …",20,[[["partialsimulation",3]],["option",4]]],[11,"push_active_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",20,[[["positivef64",3],["partialsimulation",3],["indexedlocation",3]]]],[11,"insert_new_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",20,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3],["partialsimulation",3]]]],[11,"with_next_active_lineage_indexed_location_prior_event_time","","",20,[[["fnonce",8],["partialsimulation",3]],["bool",15]]],[3,"EmptyActiveLineageSamplerError","","",null,null],[8,"OptionallyPeekableActiveLineageSampler","","",null,null],[10,"peek_optional_time_of_next_event","","",21,[[],[["positivef64",3],["option",4]]]],[8,"PeekableActiveLineageSampler","","",null,null],[11,"peek_time_of_next_event","","ContractsPost-condition - debug: only returns Err when no …",22,[[],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[8,"SingularActiveLineageSampler","","",null,null],[10,"replace_active_lineage","","",23,[[["option",4],["lineage",3]],[["option",4],["lineage",3]]]],[0,"event","necsim_core","",null,null],[3,"PackedEvent","necsim_core::event","",null,null],[12,"origin","","",24,null],[12,"prior_time","","",24,null],[12,"event_time","","",24,null],[12,"global_lineage_reference","","",24,null],[12,"type","","",24,null],[4,"EventType","","",null,null],[13,"Speciation","","",25,null],[13,"Dispersal","","",25,null],[3,"Dispersal","","",null,null],[12,"target","","",26,null],[12,"interaction","","",26,null],[4,"LineageInteraction","","",null,null],[13,"None","","",27,null],[13,"Maybe","","",27,null],[13,"Coalescence","","",27,null],[3,"SpeciationEvent","","",null,null],[12,"origin","","",28,null],[12,"prior_time","","",28,null],[12,"event_time","","",28,null],[12,"global_lineage_reference","","",28,null],[3,"DispersalEvent","","",null,null],[12,"origin","","",29,null],[12,"prior_time","","",29,null],[12,"event_time","","",29,null],[12,"global_lineage_reference","","",29,null],[12,"target","","",29,null],[12,"interaction","","",29,null],[4,"TypedEvent","","",null,null],[13,"Speciation","","",30,null],[13,"Dispersal","","",30,null],[0,"intrinsics","necsim_core","",null,null],[5,"floor","necsim_core::intrinsics","",null,[[["f64",15]],["f64",15]]],[5,"ceil","","",null,[[["f64",15]],["f64",15]]],[5,"ln","","",null,[[["f64",15]],["f64",15]]],[5,"log2","","",null,[[["f64",15]],["f64",15]]],[5,"exp","","",null,[[["f64",15]],["f64",15]]],[5,"neg_exp","","",null,[[["nonnegativef64",3]],["closedunitf64",3]]],[5,"sqrt","","",null,[[["f64",15]],["f64",15]]],[5,"safe_sqrt","","",null,[[["nonnegativef64",3]],["nonnegativef64",3]]],[5,"sin","","",null,[[["f64",15]],["f64",15]]],[5,"cos","","",null,[[["f64",15]],["f64",15]]],[5,"round","","",null,[[["f64",15]],["f64",15]]],[5,"fract","","",null,[[["f64",15]],["f64",15]]],[0,"landscape","necsim_core","",null,null],[3,"LandscapeExtent","necsim_core::landscape","",null,null],[3,"LocationIterator","","",null,null],[3,"IndexedLocation","","",null,null],[3,"Location","","",null,null],[0,"lineage","necsim_core","",null,null],[3,"GlobalLineageReference","necsim_core::lineage","",null,null],[3,"Lineage","","",null,null],[11,"new","","ContractsPost-condition - debug: stores the …",31,[[["indexedlocation",3]]]],[11,"immigrate","","",31,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[11,"emigrate","","",31,[[],["globallineagereference",3]]],[11,"is_active","","",31,[[],["bool",15]]],[11,"indexed_location","","",31,[[],[["indexedlocation",3],["option",4]]]],[11,"last_event_time","","",31,[[],["nonnegativef64",3]]],[11,"global_reference","","",31,[[],["globallineagereference",3]]],[11,"remove_from_location","","SafetyThis method should only be called by internal …",31,[[["positivef64",3]]]],[11,"move_to_indexed_location","","SafetyThis method should only be called by internal …",31,[[["indexedlocation",3]]]],[3,"MigratingLineage","","",null,null],[12,"global_reference","","",32,null],[12,"dispersal_origin","","",32,null],[12,"dispersal_target","","",32,null],[12,"prior_time","","",32,null],[12,"event_time","","",32,null],[12,"coalescence_rng_sample","","",32,null],[0,"reporter","necsim_core","",null,null],[0,"boolean","necsim_core::reporter","",null,null],[8,"Boolean","necsim_core::reporter::boolean","",null,null],[18,"VALUE","","",33,null],[3,"False","","",null,null],[3,"True","","",null,null],[8,"Or","","",null,null],[16,"RESULT","","",34,null],[8,"And","","",null,null],[16,"RESULT","","",35,null],[0,"used","necsim_core::reporter","",null,null],[3,"MaybeUsed","necsim_core::reporter::used","",null,null],[6,"Used","","",null,null],[6,"Ignored","","",null,null],[11,"maybe_use_in","","",36,[[["fnonce",8]]]],[3,"ReporterCombinator","necsim_core::reporter","",null,null],[3,"FilteredReporter","","",null,null],[3,"NullReporter","","",null,null],[8,"Reporter","","",null,null],[16,"ReportSpeciation","","",37,null],[16,"ReportDispersal","","",37,null],[16,"ReportProgress","","",37,null],[10,"report_speciation","","",37,[[["maybeused",3]]]],[10,"report_dispersal","","",37,[[["maybeused",3]]]],[10,"report_progress","","",37,[[["maybeused",3]]]],[11,"initialise","","This <code>initialise</code> hook can be used to commit to make final …",37,[[],[["result",4],["string",3]]]],[11,"finalise","","",37,[[]]],[11,"finalise_boxed","","SafetyThis method should not be implemented manually",37,[[["box",3]]]],[0,"simulation","necsim_core","",null,null],[11,"resume","necsim_core::cogs","",38,[[],["simulation",3]]],[0,"partial","necsim_core::simulation","",null,null],[0,"active_lineager_sampler","necsim_core::simulation::partial","",null,null],[3,"PartialSimulation","necsim_core::simulation::partial::active_lineager_sampler","",null,null],[12,"habitat","","",39,null],[12,"lineage_reference","","",39,null],[12,"lineage_store","","",39,null],[12,"dispersal_sampler","","",39,null],[12,"coalescence_sampler","","",39,null],[12,"turnover_rate","","",39,null],[12,"speciation_probability","","",39,null],[12,"emigration_exit","","",39,null],[12,"event_sampler","","",39,null],[11,"with_split_event_sampler","","",39,[[["fnonce",8]]]],[11,"with_mut_split_event_sampler","","",39,[[["fnonce",8]]]],[0,"emigration_exit","necsim_core::simulation::partial","",null,null],[3,"PartialSimulation","necsim_core::simulation::partial::emigration_exit","",null,null],[12,"habitat","","",40,null],[12,"lineage_reference","","",40,null],[12,"lineage_store","","",40,null],[0,"event_sampler","necsim_core::simulation::partial","",null,null],[3,"PartialSimulation","necsim_core::simulation::partial::event_sampler","",null,null],[12,"habitat","","",41,null],[12,"lineage_reference","","",41,null],[12,"lineage_store","","",41,null],[12,"dispersal_sampler","","",41,null],[12,"coalescence_sampler","","",41,null],[12,"turnover_rate","","",41,null],[12,"speciation_probability","","",41,null],[12,"emigration_exit","","",41,null],[11,"with_mut_split_emigration_exit","","",41,[[["fnonce",8]]]],[3,"Simulation","necsim_core::simulation","",null,null],[11,"peek_time_of_next_event","","",42,[[],[["positivef64",3],["option",4]]]],[11,"get_balanced_remaining_work","","",42,[[],[["wrapping",3],["u64",15]]]],[11,"simulate_incremental_early_stop","","",42,[[["fnmut",8]]]],[11,"simulate","","",42,[[]]],[14,"ReporterGroup","necsim_core","",null,null],[14,"ReporterUnGroup","","",null,null],[14,"ReporterGroupType","","",null,null],[14,"impl_report","","",null,null],[14,"impl_finalise","","",null,null],[11,"borrow","necsim_core::cogs","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"approx_from","","",38,[[],["result",4]]],[11,"approx_into","","",38,[[],["result",4]]],[11,"value_from","","",38,[[],["result",4]]],[11,"value_into","","",38,[[],["result",4]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"as_datatype","","",43,[[]]],[11,"count","","",43,[[],["i32",15]]],[11,"pointer","","",43,[[]]],[11,"pointer_mut","","",43,[[]]],[11,"approx_from","","",43,[[],["result",4]]],[11,"approx_into","","",43,[[],["result",4]]],[11,"value_from","","",43,[[],["result",4]]],[11,"value_into","","",43,[[],["result",4]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"approx_from","","",44,[[],["result",4]]],[11,"approx_into","","",44,[[],["result",4]]],[11,"value_from","","",44,[[],["result",4]]],[11,"value_into","","",44,[[],["result",4]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"approx_from","","",45,[[],["result",4]]],[11,"approx_into","","",45,[[],["result",4]]],[11,"value_from","","",45,[[],["result",4]]],[11,"value_into","","",45,[[],["result",4]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","necsim_core::event","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"approx_from","","",24,[[],["result",4]]],[11,"approx_into","","",24,[[],["result",4]]],[11,"value_from","","",24,[[],["result",4]]],[11,"value_into","","",24,[[],["result",4]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"approx_from","","",25,[[],["result",4]]],[11,"approx_into","","",25,[[],["result",4]]],[11,"value_from","","",25,[[],["result",4]]],[11,"value_into","","",25,[[],["result",4]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"approx_from","","",26,[[],["result",4]]],[11,"approx_into","","",26,[[],["result",4]]],[11,"value_from","","",26,[[],["result",4]]],[11,"value_into","","",26,[[],["result",4]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"approx_from","","",27,[[],["result",4]]],[11,"approx_into","","",27,[[],["result",4]]],[11,"value_from","","",27,[[],["result",4]]],[11,"value_into","","",27,[[],["result",4]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"approx_from","","",28,[[],["result",4]]],[11,"approx_into","","",28,[[],["result",4]]],[11,"value_from","","",28,[[],["result",4]]],[11,"value_into","","",28,[[],["result",4]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"approx_from","","",29,[[],["result",4]]],[11,"approx_into","","",29,[[],["result",4]]],[11,"value_from","","",29,[[],["result",4]]],[11,"value_into","","",29,[[],["result",4]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"approx_from","","",30,[[],["result",4]]],[11,"approx_into","","",30,[[],["result",4]]],[11,"value_from","","",30,[[],["result",4]]],[11,"value_into","","",30,[[],["result",4]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","necsim_core::landscape","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"approx_from","","",46,[[],["result",4]]],[11,"approx_into","","",46,[[],["result",4]]],[11,"value_from","","",46,[[],["result",4]]],[11,"value_into","","",46,[[],["result",4]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"into_iter","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"approx_from","","",47,[[],["result",4]]],[11,"approx_into","","",47,[[],["result",4]]],[11,"value_from","","",47,[[],["result",4]]],[11,"value_into","","",47,[[],["result",4]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"as_datatype","","",48,[[]]],[11,"count","","",48,[[],["i32",15]]],[11,"pointer","","",48,[[]]],[11,"pointer_mut","","",48,[[]]],[11,"approx_from","","",48,[[],["result",4]]],[11,"approx_into","","",48,[[],["result",4]]],[11,"value_from","","",48,[[],["result",4]]],[11,"value_into","","",48,[[],["result",4]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"as_datatype","","",49,[[]]],[11,"count","","",49,[[],["i32",15]]],[11,"pointer","","",49,[[]]],[11,"pointer_mut","","",49,[[]]],[11,"approx_from","","",49,[[],["result",4]]],[11,"approx_into","","",49,[[],["result",4]]],[11,"value_from","","",49,[[],["result",4]]],[11,"value_into","","",49,[[],["result",4]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","necsim_core::lineage","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"as_datatype","","",50,[[]]],[11,"count","","",50,[[],["i32",15]]],[11,"pointer","","",50,[[]]],[11,"pointer_mut","","",50,[[]]],[11,"approx_from","","",50,[[],["result",4]]],[11,"approx_into","","",50,[[],["result",4]]],[11,"value_from","","",50,[[],["result",4]]],[11,"value_into","","",50,[[],["result",4]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"approx_from","","",31,[[],["result",4]]],[11,"approx_into","","",31,[[],["result",4]]],[11,"value_from","","",31,[[],["result",4]]],[11,"value_into","","",31,[[],["result",4]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"as_datatype","","",32,[[]]],[11,"count","","",32,[[],["i32",15]]],[11,"pointer","","",32,[[]]],[11,"pointer_mut","","",32,[[]]],[11,"approx_from","","",32,[[],["result",4]]],[11,"approx_into","","",32,[[],["result",4]]],[11,"value_from","","",32,[[],["result",4]]],[11,"value_into","","",32,[[],["result",4]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","necsim_core::reporter","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"approx_from","","",51,[[],["result",4]]],[11,"approx_into","","",51,[[],["result",4]]],[11,"value_from","","",51,[[],["result",4]]],[11,"value_into","","",51,[[],["result",4]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"from","","",52,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"approx_from","","",52,[[],["result",4]]],[11,"approx_into","","",52,[[],["result",4]]],[11,"value_from","","",52,[[],["result",4]]],[11,"value_into","","",52,[[],["result",4]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"approx_from","","",53,[[],["result",4]]],[11,"approx_into","","",53,[[],["result",4]]],[11,"value_from","","",53,[[],["result",4]]],[11,"value_into","","",53,[[],["result",4]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","necsim_core::reporter::boolean","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"approx_from","","",54,[[],["result",4]]],[11,"approx_into","","",54,[[],["result",4]]],[11,"value_from","","",54,[[],["result",4]]],[11,"value_into","","",54,[[],["result",4]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"approx_from","","",55,[[],["result",4]]],[11,"approx_into","","",55,[[],["result",4]]],[11,"value_from","","",55,[[],["result",4]]],[11,"value_into","","",55,[[],["result",4]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","necsim_core::reporter::used","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"from","","",36,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"approx_from","","",36,[[],["result",4]]],[11,"approx_into","","",36,[[],["result",4]]],[11,"value_from","","",36,[[],["result",4]]],[11,"value_into","","",36,[[],["result",4]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","necsim_core::simulation","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"approx_from","","",42,[[],["result",4]]],[11,"approx_into","","",42,[[],["result",4]]],[11,"value_from","","",42,[[],["result",4]]],[11,"value_into","","",42,[[],["result",4]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","necsim_core::simulation::partial::active_lineager_sampler","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"approx_from","","",39,[[],["result",4]]],[11,"approx_into","","",39,[[],["result",4]]],[11,"value_from","","",39,[[],["result",4]]],[11,"value_into","","",39,[[],["result",4]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","necsim_core::simulation::partial::emigration_exit","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"approx_from","","",40,[[],["result",4]]],[11,"approx_into","","",40,[[],["result",4]]],[11,"value_from","","",40,[[],["result",4]]],[11,"value_into","","",40,[[],["result",4]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","necsim_core::simulation::partial::event_sampler","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"approx_from","","",41,[[],["result",4]]],[11,"approx_into","","",41,[[],["result",4]]],[11,"value_from","","",41,[[],["result",4]]],[11,"value_into","","",41,[[],["result",4]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"report_speciation","necsim_core::reporter","",51,[[["maybeused",3]]]],[11,"report_dispersal","","",51,[[["maybeused",3]]]],[11,"report_progress","","",51,[[["maybeused",3]]]],[11,"finalise","","",51,[[]]],[11,"finalise_boxed","","",51,[[["box",3]]]],[11,"initialise","","",51,[[],[["result",4],["string",3]]]],[11,"report_speciation","","",52,[[["maybeused",3]]]],[11,"report_dispersal","","",52,[[["maybeused",3]]]],[11,"report_progress","","",52,[[["maybeused",3]]]],[11,"finalise","","",52,[[]]],[11,"finalise_boxed","","",52,[[["box",3]]]],[11,"initialise","","",52,[[],[["result",4],["string",3]]]],[11,"report_speciation","","",53,[[["maybeused",3]]]],[11,"report_dispersal","","",53,[[["maybeused",3]]]],[11,"report_progress","","",53,[[["maybeused",3]]]],[11,"__contracts_impl_backup_unchecked","necsim_core::cogs","",43,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_core::lineage","",50,[[]]],[11,"__contracts_impl_backup_unchecked","","",32,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_core::simulation","",42,[[]]],[11,"deref","necsim_core::cogs","",38,[[]]],[11,"deref","necsim_core","",56,[[]]],[11,"fmt","necsim_core::cogs","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::event","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::landscape","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::lineage","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::reporter","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::simulation","",42,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_core::lineage","",50,[[["formatter",3]],["result",6]]],[11,"eq","necsim_core::cogs","",43,[[["coalescencerngsample",3]],["bool",15]]],[11,"ne","","",43,[[["coalescencerngsample",3]],["bool",15]]],[11,"eq","","",44,[[],["bool",15]]],[11,"eq","necsim_core::event","",25,[[["eventtype",4]],["bool",15]]],[11,"ne","","",25,[[["eventtype",4]],["bool",15]]],[11,"eq","","",26,[[["dispersal",3]],["bool",15]]],[11,"ne","","",26,[[["dispersal",3]],["bool",15]]],[11,"eq","","",27,[[["lineageinteraction",4]],["bool",15]]],[11,"ne","","",27,[[["lineageinteraction",4]],["bool",15]]],[11,"eq","","",24,[[],["bool",15]]],[11,"eq","","",28,[[],["bool",15]]],[11,"eq","","",29,[[],["bool",15]]],[11,"eq","necsim_core::landscape","",46,[[["landscapeextent",3]],["bool",15]]],[11,"ne","","",46,[[["landscapeextent",3]],["bool",15]]],[11,"eq","","",48,[[["location",3]],["bool",15]]],[11,"ne","","",48,[[["location",3]],["bool",15]]],[11,"eq","","",49,[[["indexedlocation",3]],["bool",15]]],[11,"ne","","",49,[[["indexedlocation",3]],["bool",15]]],[11,"eq","necsim_core::lineage","",50,[[["globallineagereference",3]],["bool",15]]],[11,"ne","","",50,[[["globallineagereference",3]],["bool",15]]],[11,"eq","","",32,[[["migratinglineage",3]],["bool",15]]],[11,"ne","","",32,[[["migratinglineage",3]],["bool",15]]],[11,"eq","","",32,[[["backedup",3]],["bool",15]]],[11,"cmp","necsim_core::cogs","",43,[[],["ordering",4]]],[11,"cmp","","",44,[[],["ordering",4]]],[11,"cmp","necsim_core::event","",25,[[["eventtype",4]],["ordering",4]]],[11,"cmp","","",26,[[["dispersal",3]],["ordering",4]]],[11,"cmp","","",27,[[["lineageinteraction",4]],["ordering",4]]],[11,"cmp","","",24,[[],["ordering",4]]],[11,"cmp","necsim_core::landscape","",48,[[["location",3]],["ordering",4]]],[11,"cmp","","",49,[[["indexedlocation",3]],["ordering",4]]],[11,"cmp","necsim_core::lineage","",50,[[["globallineagereference",3]],["ordering",4]]],[11,"cmp","","",32,[[],["ordering",4]]],[11,"partial_cmp","necsim_core::cogs","",43,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",44,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core::event","",25,[[["eventtype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",26,[[["dispersal",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",27,[[["lineageinteraction",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",24,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_core::landscape","",48,[[["location",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",49,[[["indexedlocation",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","necsim_core::lineage","",50,[[["globallineagereference",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",32,[[],[["option",4],["ordering",4]]]],[11,"hash","necsim_core::cogs","",44,[[]]],[11,"hash","necsim_core::event","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",24,[[]]],[11,"hash","necsim_core::landscape","",48,[[]]],[11,"hash","","",49,[[]]],[11,"hash","necsim_core::lineage","",50,[[]]],[11,"from","necsim_core::event","",27,[[["globallineagereference",3],["option",4]]]],[11,"from","","",24,[[["speciationevent",3]]]],[11,"from","","",24,[[["dispersalevent",3]]]],[11,"from","","",24,[[["typedevent",4]]]],[11,"from","","",30,[[["packedevent",3]]]],[11,"from","necsim_core::landscape","",48,[[["indexedlocation",3]],["location",3]]],[11,"from","necsim_core::reporter","",52,[[]]],[11,"from","necsim_core::reporter::used","",36,[[]]],[11,"next","necsim_core::landscape","",47,[[],["option",4]]],[11,"clone","necsim_core::cogs","",44,[[],["speciationsample",3]]],[11,"clone","necsim_core::event","",24,[[],["packedevent",3]]],[11,"clone","","",25,[[],["eventtype",4]]],[11,"clone","","",26,[[],["dispersal",3]]],[11,"clone","","",27,[[],["lineageinteraction",4]]],[11,"clone","","",28,[[],["speciationevent",3]]],[11,"clone","","",29,[[],["dispersalevent",3]]],[11,"clone","necsim_core::landscape","",46,[[],["landscapeextent",3]]],[11,"clone","","",48,[[],["location",3]]],[11,"clone","","",49,[[],["indexedlocation",3]]],[11,"clone","necsim_core::lineage","",50,[[],["globallineagereference",3]]],[11,"clone","","",31,[[],["lineage",3]]],[11,"equivalent_datatype","necsim_core::cogs","",43,[[]]],[11,"equivalent_datatype","necsim_core::landscape","",48,[[]]],[11,"equivalent_datatype","","",49,[[]]],[11,"equivalent_datatype","necsim_core::lineage","",50,[[]]],[11,"equivalent_datatype","","",32,[[]]],[11,"deserialize","necsim_core::event","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","necsim_core::landscape","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","necsim_core::lineage","",50,[[["deserializer",8]],["result",4]]],[11,"serialize","necsim_core::event","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","necsim_core::landscape","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","necsim_core::lineage","",50,[[["serializer",8]],["result",4]]],[11,"borrow_mut","necsim_core::simulation","",42,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",42,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"lend_to_cuda","","",42,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",42,[[["fnonce",8]],["cudaresult",6]]],[11,"backup_unchecked","necsim_core::cogs","",0,[[]]],[11,"backup","","",0,[[],["backedup",3]]],[11,"get_extent","","",1,[[],["landscapeextent",3]]],[11,"contains","","",1,[[["location",3]],["bool",15]]],[11,"get_total_habitat","","ContractsPost-condition - debug: total habitat is the sum …",1,[[],["u64",15]]],[11,"get_habitat_at_location","","ContractsPre-condition - debug: location is inside …",1,[[["location",3]],["u32",15]]],[11,"map_indexed_location_to_u64_injective","","ContractsPre-condition - debug: location is inside …",1,[[["indexedlocation",3]],["u64",15]]],[11,"habitat","","",2,[[]]],[11,"full_upper_bound_size_hint","","",2,[[],["u64",15]]],[11,"get_speciation_probability_at_location","","ContractsPre-condition - debug: location is inside habitat",3,[[["location",3]],["closedunitf64",3]]],[11,"seed_from_u64","","",6,[[["u64",15]]]],[11,"sample_uniform","","",7,[[],["closedunitf64",3]]],[11,"sample_index","","ContractsPost-condition - debug: samples U(0, length - 1)",7,[[["usize",15]],["usize",15]]],[11,"sample_index_u32","","ContractsPost-condition - debug: samples U(0, length - 1)",7,[[["u32",15]],["u32",15]]],[11,"sample_exponential","","",7,[[["positivef64",3]],["nonnegativef64",3]]],[11,"sample_event","","",7,[[["closedunitf64",3]],["bool",15]]],[11,"sample_2d_standard_normal","","",7,[[]]],[11,"sample_2d_normal","","",7,[[["f64",15],["nonnegativef64",3]]]],[11,"prime_with_habitat","","",4,[[["indexedlocation",3],["u64",15]]]],[11,"sample_dispersal_from_location","","ContractsPre-condition - debug: location is inside habitat",9,[[["location",3]],["location",3]]],[11,"sample_non_self_dispersal_from_location","","ContractsPre-condition - debug: location is inside habitat",10,[[["location",3]],["location",3]]],[11,"get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside habitat",10,[[["location",3]],["closedunitf64",3]]],[11,"from_origin_sampler","","",12,[[["originsampler",8]]]],[11,"get_number_total_lineages","","",12,[[],["usize",15]]],[11,"iter_local_lineage_references","","",12,[[]]],[11,"get","","",12,[[],[["option",4],["lineage",3]]]],[11,"get_active_global_lineage_reference_at_indexed_location","","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"insert_lineage_to_indexed_location_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_locally_coherent","","ContractsPre-condition - debug: lineage reference is valid",13,[[["positivef64",3]]]],[11,"emigrate","","ContractsPre-condition - debug: lineage reference is valid",13,[[],["globallineagereference",3]]],[11,"immigrate_locally_coherent","","ContractsPre-condition - debug: indexed location is …",13,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[11,"iter_active_locations","","",11,[[]]],[11,"get_active_local_lineage_references_at_location_unordered","","ContractsPre-condition - debug: location is inside habitat",11,[[["location",3]]]],[11,"insert_lineage_to_indexed_location_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",11,[[["indexedlocation",3]]]],[11,"extract_lineage_from_its_location_globally_coherent","","ContractsPost-condition - debug: unordered active lineage …",11,[[["positivef64",3]]]],[11,"immigrate_globally_coherent","","ContractsPost-condition - debug: lineage is now indexed …",11,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[11,"optionally_emigrate","","ContractsPost-condition - debug: if ret is Some, it …",14,[[["location",3],["positivef64",3],["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3]],["option",4]]],[11,"sample_interaction_at_location","","ContractsPre-condition - debug: location is habitable",15,[[["location",3],["coalescencerngsample",3]]]],[11,"new","","",43,[[]]],[11,"sample_coalescence_index","","ContractsPost-condition - debug: samples U(0, length - 1)",43,[[["u32",15]],["u32",15]]],[11,"get_turnover_rate_at_location","","ContractsPre-condition - debug: location is inside habitat",16,[[["location",3]],["nonnegativef64",3]]],[11,"sample_event_for_lineage_at_indexed_location_time_or_emigrate","","ContractsPost-condition - debug: lineage emigrated if no …",17,[[["positivef64",3],["nonnegativef64",3],["indexedlocation",3],["partialsimulation",3]],[["packedevent",3],["option",4]]]],[11,"new","","",44,[[["positivef64",3],["indexedlocation",3],["closedunitf64",3]]]],[11,"next_optional_immigration","","ContractsPre-condition - debug: option_next_event_time is …",19,[[["positivef64",3],["option",4]],[["option",4],["migratinglineage",3]]]],[11,"peek_next_immigration","","",19,[[],[["migratinglineage",3],["option",4]]]],[11,"number_active_lineages","","",20,[[],["usize",15]]],[11,"get_last_event_time","","",20,[[],["nonnegativef64",3]]],[11,"pop_active_lineage_indexed_location_prior_event_time","","ContractsPost-condition - debug: removes an active …",20,[[["partialsimulation",3]],["option",4]]],[11,"push_active_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",20,[[["positivef64",3],["partialsimulation",3],["indexedlocation",3]]]],[11,"insert_new_lineage_to_indexed_location","","ContractsPost-condition - debug: adds an active lineage",20,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3],["partialsimulation",3]]]],[11,"with_next_active_lineage_indexed_location_prior_event_time","","",20,[[["fnonce",8],["partialsimulation",3]],["bool",15]]],[11,"peek_time_of_next_event","","ContractsPost-condition - debug: only returns Err when no …",22,[[],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[11,"new","necsim_core::landscape","ContractsPost-condition - debug: stores x",46,[[["u32",15]]]],[11,"x","","",46,[[],["u32",15]]],[11,"y","","",46,[[],["u32",15]]],[11,"width","","",46,[[],["u32",15]]],[11,"height","","",46,[[],["u32",15]]],[11,"contains","","",46,[[["location",3]],["bool",15]]],[11,"iter","","",46,[[],["locationiterator",3]]],[11,"new","","ContractsPost-condition - debug: stores x",48,[[["u32",15]]]],[11,"x","","",48,[[],["u32",15]]],[11,"y","","",48,[[],["u32",15]]],[11,"new","","ContractsPost-condition - debug: stores location",49,[[["location",3],["u32",15]]]],[11,"location","","",49,[[],["location",3]]],[11,"index","","",49,[[],["u32",15]]],[11,"new","necsim_core::reporter","SafetyThis constructor should not be used directly to …",51,[[]]],[11,"wen","","SafetyThis destructor should not be used directly to …",51,[[]]],[11,"builder","necsim_core::simulation","Create a builder for building <code>Simulation</code>. On the builder, …",42,[[],["simulationbuilder",3]]],[11,"with_mut_split_active_lineage_sampler_and_rng","","",42,[[["fnonce",8]]]],[11,"with_mut_split_event_sampler_and_rng","","",42,[[["fnonce",8]]]],[11,"rng_mut","","",42,[[]]],[11,"active_lineage_sampler","","",42,[[]]],[11,"active_lineage_sampler_mut","","",42,[[]]],[11,"lineage_store","","",42,[[]]],[11,"lineage_store_mut","","",42,[[]]],[11,"event_sampler","","",42,[[]]],[11,"event_sampler_mut","","",42,[[]]],[11,"speciation_probability","","",42,[[]]],[11,"turnover_rate","","",42,[[]]],[11,"habitat","","",42,[[]]],[11,"dispersal_sampler","","",42,[[]]],[11,"coalescence_sampler","","",42,[[]]],[11,"emigration_exit","","",42,[[]]],[11,"emigration_exit_mut","","",42,[[]]],[11,"immigration_entry_mut","","",42,[[]]]],"p":[[8,"Backup"],[8,"Habitat"],[8,"OriginSampler"],[8,"SpeciationProbability"],[8,"HabitatPrimeableRng"],[8,"PrimeableRng"],[8,"RngCore"],[8,"RngSampler"],[8,"SplittableRng"],[8,"DispersalSampler"],[8,"SeparableDispersalSampler"],[8,"GloballyCoherentLineageStore"],[8,"LineageStore"],[8,"LocallyCoherentLineageStore"],[8,"EmigrationExit"],[8,"CoalescenceSampler"],[8,"TurnoverRate"],[8,"EventSampler"],[8,"MinSpeciationTrackingEventSampler"],[8,"ImmigrationEntry"],[8,"ActiveLineageSampler"],[8,"OptionallyPeekableActiveLineageSampler"],[8,"PeekableActiveLineageSampler"],[8,"SingularActiveLineageSampler"],[3,"PackedEvent"],[4,"EventType"],[3,"Dispersal"],[4,"LineageInteraction"],[3,"SpeciationEvent"],[3,"DispersalEvent"],[4,"TypedEvent"],[3,"Lineage"],[3,"MigratingLineage"],[8,"Boolean"],[8,"Or"],[8,"And"],[3,"MaybeUsed"],[8,"Reporter"],[3,"BackedUp"],[3,"PartialSimulation"],[3,"PartialSimulation"],[3,"PartialSimulation"],[3,"Simulation"],[3,"CoalescenceRngSample"],[3,"SpeciationSample"],[3,"EmptyActiveLineageSamplerError"],[3,"LandscapeExtent"],[3,"LocationIterator"],[3,"Location"],[3,"IndexedLocation"],[3,"GlobalLineageReference"],[3,"ReporterCombinator"],[3,"FilteredReporter"],[3,"NullReporter"],[3,"False"],[3,"True"],[6,"Used"]]},\
"necsim_core_bond":{"doc":"","i":[[3,"ClosedUnitF64","necsim_core_bond","",null,null],[3,"NonNegativeF64","","",null,null],[3,"NonZeroOneU64","","",null,null],[3,"Partition","","",null,null],[3,"PositiveF64","","",null,null],[3,"PositiveUnitF64","","",null,null],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"as_datatype","","",0,[[]]],[11,"count","","",0,[[],["i32",15]]],[11,"pointer","","",0,[[]]],[11,"pointer_mut","","",0,[[]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"as_datatype","","",1,[[]]],[11,"count","","",1,[[],["i32",15]]],[11,"pointer","","",1,[[]]],[11,"pointer_mut","","",1,[[]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"as_datatype","","",2,[[]]],[11,"count","","",2,[[],["i32",15]]],[11,"pointer","","",2,[[]]],[11,"pointer_mut","","",2,[[]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"as_datatype","","",4,[[]]],[11,"count","","",4,[[],["i32",15]]],[11,"pointer","","",4,[[]]],[11,"pointer_mut","","",4,[[]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"as_datatype","","",5,[[]]],[11,"count","","",5,[[],["i32",15]]],[11,"pointer","","",5,[[]]],[11,"pointer_mut","","",5,[[]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"div","","",1,[[]]],[11,"eq","","",0,[[],["bool",15]]],[11,"eq","","",0,[[["f64",15]],["bool",15]]],[11,"eq","","",1,[[],["bool",15]]],[11,"eq","","",1,[[["positivef64",3]],["bool",15]]],[11,"eq","","",1,[[["f64",15]],["bool",15]]],[11,"eq","","",2,[[["nonzerooneu64",3]],["bool",15]]],[11,"ne","","",2,[[["nonzerooneu64",3]],["bool",15]]],[11,"eq","","",4,[[],["bool",15]]],[11,"eq","","",4,[[["nonnegativef64",3]],["bool",15]]],[11,"eq","","",4,[[["f64",15]],["bool",15]]],[11,"eq","","",5,[[],["bool",15]]],[11,"eq","","",5,[[["f64",15]],["bool",15]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"cmp","","",2,[[["nonzerooneu64",3]],["ordering",4]]],[11,"cmp","","",4,[[],["ordering",4]]],[11,"cmp","","",5,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",0,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["positivef64",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["nonzerooneu64",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["nonnegativef64",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",5,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",5,[[["f64",15]],[["option",4],["ordering",4]]]],[11,"add","","",1,[[]]],[11,"add","","",1,[[["closedunitf64",3]]]],[11,"add","","",4,[[["nonnegativef64",3]]]],[11,"add","","",1,[[["positivef64",3]],["positivef64",3]]],[11,"mul","","",0,[[]]],[11,"mul","","",1,[[]]],[11,"mul","","",1,[[["positivef64",3]]]],[11,"mul","","",1,[[["closedunitf64",3]]]],[11,"mul","","",4,[[]]],[11,"add_assign","","",1,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"try_from","","",0,[[["f64",15]],["result",4]]],[11,"try_from","","",1,[[["f64",15]],["result",4]]],[11,"try_from","","",2,[[["u64",15]],["result",4]]],[11,"try_from","","",4,[[["f64",15]],["result",4]]],[11,"try_from","","",5,[[["f64",15]],["result",4]]],[11,"from","","",0,[[["positiveunitf64",3]]]],[11,"from","","",1,[[["u32",15]]]],[11,"from","","",1,[[["u64",15]]]],[11,"from","","",1,[[["usize",15]]]],[11,"from","","",1,[[["positivef64",3]]]],[11,"from","","",1,[[["closedunitf64",3]]]],[11,"from","","",4,[[["nonzerou32",3]]]],[11,"from","","",4,[[["nonzerou64",3]]]],[11,"sum","","",1,[[["iterator",8]]]],[11,"clone","","",0,[[],["closedunitf64",3]]],[11,"clone","","",1,[[],["nonnegativef64",3]]],[11,"clone","","",2,[[],["nonzerooneu64",3]]],[11,"clone","","",3,[[],["partition",3]]],[11,"clone","","",4,[[],["positivef64",3]]],[11,"clone","","",5,[[],["positiveunitf64",3]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"equivalent_datatype","","",0,[[]]],[11,"equivalent_datatype","","",1,[[]]],[11,"equivalent_datatype","","",2,[[]]],[11,"equivalent_datatype","","",4,[[]]],[11,"equivalent_datatype","","",5,[[]]],[11,"new","","ErrorsReturns <code>ClosedUnitF64Error</code> if not …",0,[[["f64",15]],[["closedunitf64error",3],["result",4]]]],[11,"new_unchecked","","SafetyOnly safe iff <code>0.0 <= value <= 1.0</code>",0,[[["f64",15]]]],[11,"zero","","",0,[[]]],[11,"one","","",0,[[]]],[11,"get","","",0,[[],["f64",15]]],[11,"one_minus","","",0,[[]]],[11,"new","","ErrorsReturns <code>NonNegativeF64Error</code> if not <code>0.0 <= value</code>",1,[[["f64",15]],[["result",4],["nonnegativef64error",3]]]],[11,"new_unchecked","","SafetyOnly safe iff <code>0.0 <= value</code>",1,[[["f64",15]]]],[11,"zero","","",1,[[]]],[11,"infinity","","",1,[[]]],[11,"get","","",1,[[],["f64",15]]],[11,"new","","ErrorsReturns <code>NonZeroOneU64Error</code> if not <code>1 < value</code>",2,[[["u64",15]],[["nonzerooneu64error",3],["result",4]]]],[11,"new_unchecked","","Creates a non-zero, non-one u64 without checking the …",2,[[["u64",15]]]],[11,"get","","",2,[[],["u64",15]]],[11,"try_new","","ErrorsReturns <code>PartitionRankOutOfBounds</code> if …",3,[[["u32",15],["nonzerou32",3]],[["partitionrankoutofbounds",3],["result",4]]]],[11,"rank","","",3,[[],["u32",15]]],[11,"partitions","","",3,[[],["nonzerou32",3]]],[11,"new","","ErrorsReturns <code>PositiveF64Error</code> if not <code>0.0 < value</code>",4,[[["f64",15]],[["result",4],["positivef64error",3]]]],[11,"new_unchecked","","SafetyOnly safe iff <code>0.0 < value</code>",4,[[["f64",15]]]],[11,"infinity","","",4,[[]]],[11,"get","","",4,[[],["f64",15]]],[11,"max_after","","",4,[[["nonnegativef64",3]]]],[11,"new","","ErrorsReturns <code>PositiveUnitF64Error</code> if not …",5,[[["f64",15]],[["positiveunitf64error",3],["result",4]]]],[11,"get","","",5,[[],["f64",15]]]],"p":[[3,"ClosedUnitF64"],[3,"NonNegativeF64"],[3,"NonZeroOneU64"],[3,"Partition"],[3,"PositiveF64"],[3,"PositiveUnitF64"]]},\
"necsim_impls_cuda":{"doc":"","i":[[0,"cogs","necsim_impls_cuda","",null,null],[0,"rng","necsim_impls_cuda::cogs","",null,null],[3,"CudaRng","necsim_impls_cuda::cogs::rng","",null,null],[0,"event_buffer","necsim_impls_cuda","",null,null],[3,"EventBuffer","necsim_impls_cuda::event_buffer","",null,null],[11,"new","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",0,[[["gridsize",3],["blocksize",3],["usize",15]],["cudaresult",6]]],[11,"report_events","","",0,[[]]],[0,"value_buffer","necsim_impls_cuda","",null,null],[3,"ValueBuffer","necsim_impls_cuda::value_buffer","",null,null],[11,"new","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",1,[[["gridsize",3],["blocksize",3]],["cudaresult",6]]],[11,"borrow","necsim_impls_cuda::cogs::rng","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","necsim_impls_cuda::event_buffer","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","necsim_impls_cuda::value_buffer","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","necsim_impls_cuda::cogs::rng","",2,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_cuda::event_buffer","",0,[[["formatter",3]],["result",6]]],[11,"from","necsim_impls_cuda::cogs::rng","",2,[[]]],[11,"clone","","",2,[[],["cudarng",3]]],[11,"__contracts_impl_backup_unchecked","","",2,[[]]],[11,"from_seed","","",2,[[]]],[11,"sample_u64","","",2,[[],["u64",15]]],[11,"prime_with","","",2,[[["u64",15]]]],[11,"borrow_mut","","",2,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",2,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"borrow_mut","necsim_impls_cuda::event_buffer","",0,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",0,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"borrow_mut","necsim_impls_cuda::value_buffer","",1,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",1,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"lend_to_cuda","necsim_impls_cuda::cogs::rng","",2,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",2,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda","necsim_impls_cuda::event_buffer","",0,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",0,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda","necsim_impls_cuda::value_buffer","",1,[[["fnonce",8]],["cudaresult",6]]],[11,"lend_to_cuda_mut","","",1,[[["fnonce",8]],["cudaresult",6]]]],"p":[[3,"EventBuffer"],[3,"ValueBuffer"],[3,"CudaRng"]]},\
"necsim_impls_no_std":{"doc":"","i":[[0,"alias","necsim_impls_no_std","",null,null],[0,"packed","necsim_impls_no_std::alias","",null,null],[3,"AliasMethodSamplerAtom","necsim_impls_no_std::alias::packed","",null,null],[11,"create","","ContractsPre-condition - debug: event_weights is non-empty",0,[[],[["vec",3],["aliasmethodsampleratom",3]]]],[11,"sample_event","","ContractsPre-condition - debug: alias_samplers is …",0,[[]]],[3,"AliasMethodSampler","necsim_impls_no_std::alias","",null,null],[11,"new","","ContractsPre-condition - debug: event_weights is non-empty",1,[[]]],[11,"sample_event","","ContractsPost-condition - debug: returns one of the …",1,[[]]],[0,"cache","necsim_impls_no_std","",null,null],[3,"DirectMappedCache","necsim_impls_no_std::cache","",null,null],[11,"with_capacity","","",2,[[["usize",15]]]],[11,"with_capacity_and_hasher","","",2,[[["usize",15]]]],[11,"capacity","","",2,[[],["usize",15]]],[11,"insert","","",2,[[],["bool",15]]],[0,"cogs","necsim_impls_no_std","",null,null],[0,"active_lineage_sampler","necsim_impls_no_std::cogs","",null,null],[0,"classical","necsim_impls_no_std::cogs::active_lineage_sampler","",null,null],[3,"ClassicalActiveLineageSampler","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",null,null],[11,"new","","",3,[[]]],[0,"independent","necsim_impls_no_std::cogs::active_lineage_sampler","",null,null],[0,"event_time_sampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",null,null],[0,"exp","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[3,"ExpEventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",null,null],[11,"new","","",4,[[["positivef64",3]]]],[0,"fixed","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[3,"FixedEventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",null,null],[0,"geometric","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[3,"GeometricEventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",null,null],[11,"new","","",5,[[["positivef64",3]]]],[0,"poisson","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[3,"PoissonEventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",null,null],[11,"new","","",6,[[["positivef64",3]]]],[8,"EventTimeSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","",null,null],[11,"next_event_time_at_indexed_location_weakly_after","","ContractsPre-condition - debug: indexed_location must be …",7,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[3,"IndependentActiveLineageSampler","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",null,null],[11,"empty","","",8,[[]]],[0,"coalescence_sampler","necsim_impls_no_std::cogs","",null,null],[0,"conditional","necsim_impls_no_std::cogs::coalescence_sampler","",null,null],[3,"ConditionalCoalescenceSampler","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",null,null],[11,"sample_coalescence_at_location","","",9,[[["location",3],["coalescencerngsample",3]]]],[11,"get_coalescence_probability_at_location","","ContractsPre-condition - debug: location is habitable",9,[[["bool",15],["location",3]],["closedunitf64",3]]],[0,"independent","necsim_impls_no_std::cogs::coalescence_sampler","",null,null],[3,"IndependentCoalescenceSampler","necsim_impls_no_std::cogs::coalescence_sampler::independent","",null,null],[0,"unconditional","necsim_impls_no_std::cogs::coalescence_sampler","",null,null],[3,"UnconditionalCoalescenceSampler","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",null,null],[0,"dispersal_sampler","necsim_impls_no_std::cogs","",null,null],[0,"almost_infinite_normal","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[3,"AlmostInfiniteNormalDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",null,null],[11,"new","","",10,[[["nonnegativef64",3]]]],[0,"in_memory","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[0,"contract","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[5,"explicit_in_memory_dispersal_check_contract","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::contract","",null,[[["array2d",3]],["bool",15]]],[0,"alias","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[3,"InMemoryAliasDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",null,null],[0,"cumulative","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[3,"InMemoryCumulativeDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",null,null],[0,"packed_alias","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[3,"InMemoryPackedAliasDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",null,null],[0,"separable_alias","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[3,"InMemorySeparableAliasDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",null,null],[8,"InMemoryDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","",null,null],[11,"unchecked_new","","ContractsPre-condition - debug: dispersal dimensions are …",11,[[["array2d",3]]]],[0,"non_spatial","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[3,"NonSpatialDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",null,null],[0,"spatially_implicit","necsim_impls_no_std::cogs::dispersal_sampler","",null,null],[3,"SpatiallyImplicitDispersalSampler","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",null,null],[11,"new","","",12,[[["positiveunitf64",3]]]],[0,"emigration_exit","necsim_impls_no_std::cogs","",null,null],[0,"domain","necsim_impls_no_std::cogs::emigration_exit","",null,null],[3,"DomainEmigrationExit","necsim_impls_no_std::cogs::emigration_exit::domain","",null,null],[11,"new","","",13,[[]]],[11,"len","","",13,[[],["usize",15]]],[11,"is_empty","","",13,[[],["bool",15]]],[0,"independent","necsim_impls_no_std::cogs::emigration_exit","",null,null],[0,"choice","necsim_impls_no_std::cogs::emigration_exit::independent","",null,null],[0,"always","necsim_impls_no_std::cogs::emigration_exit::independent::choice","",null,null],[3,"AlwaysEmigrationChoice","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",null,null],[0,"probabilistic","necsim_impls_no_std::cogs::emigration_exit::independent::choice","",null,null],[3,"ProbabilisticEmigrationChoice","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",null,null],[11,"new","","",14,[[["closedunitf64",3]]]],[8,"EmigrationChoice","necsim_impls_no_std::cogs::emigration_exit::independent::choice","",null,null],[11,"should_lineage_emigrate","","",15,[[["positivef64",3],["indexedlocation",3]],["bool",15]]],[3,"IndependentEmigrationExit","necsim_impls_no_std::cogs::emigration_exit::independent","",null,null],[11,"new","","",16,[[]]],[11,"len","","",16,[[],["usize",15]]],[11,"is_empty","","",16,[[],["bool",15]]],[11,"take","","",16,[[],["option",4]]],[0,"never","necsim_impls_no_std::cogs::emigration_exit","",null,null],[3,"NeverEmigrationExit","necsim_impls_no_std::cogs::emigration_exit::never","",null,null],[0,"event_sampler","necsim_impls_no_std::cogs","",null,null],[0,"gillespie","necsim_impls_no_std::cogs::event_sampler","",null,null],[0,"conditional","necsim_impls_no_std::cogs::event_sampler::gillespie","",null,null],[3,"ConditionalGillespieEventSampler","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",null,null],[0,"unconditional","necsim_impls_no_std::cogs::event_sampler::gillespie","",null,null],[3,"UnconditionalGillespieEventSampler","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",null,null],[8,"GillespieEventSampler","necsim_impls_no_std::cogs::event_sampler::gillespie","",null,null],[11,"get_event_rate_at_location","","Pre: all lineages must be active in the lineage store",17,[[["location",3],["gillespiepartialsimulation",3]],["nonnegativef64",3]]],[3,"GillespiePartialSimulation","","",null,null],[12,"habitat","","",18,null],[12,"lineage_reference","","",18,null],[12,"lineage_store","","",18,null],[12,"dispersal_sampler","","",18,null],[12,"coalescence_sampler","","",18,null],[12,"turnover_rate","","",18,null],[12,"speciation_probability","","",18,null],[12,"_rng","","",18,null],[11,"without_emigration_exit","","",18,[[["partialsimulation",3],["fnonce",8]]]],[0,"independent","necsim_impls_no_std::cogs::event_sampler","",null,null],[3,"IndependentEventSampler","necsim_impls_no_std::cogs::event_sampler::independent","",null,null],[0,"unconditional","necsim_impls_no_std::cogs::event_sampler","",null,null],[3,"UnconditionalEventSampler","necsim_impls_no_std::cogs::event_sampler::unconditional","",null,null],[0,"habitat","necsim_impls_no_std::cogs","",null,null],[0,"almost_infinite","necsim_impls_no_std::cogs::habitat","",null,null],[3,"AlmostInfiniteHabitat","necsim_impls_no_std::cogs::habitat::almost_infinite","",null,null],[0,"in_memory","necsim_impls_no_std::cogs::habitat","",null,null],[3,"InMemoryHabitat","necsim_impls_no_std::cogs::habitat::in_memory","",null,null],[11,"new","","ContractsPost-condition - debug: habitat extent has the …",19,[[["u32",15],["array2d",3]]]],[0,"non_spatial","necsim_impls_no_std::cogs::habitat","",null,null],[3,"NonSpatialHabitat","necsim_impls_no_std::cogs::habitat::non_spatial","",null,null],[11,"new","","ContractsPost-condition - debug: creates a habitat with …",20,[[["u32",15]]]],[11,"get_deme","","",20,[[],["u32",15]]],[0,"spatially_implicit","necsim_impls_no_std::cogs::habitat","",null,null],[3,"SpatiallyImplicitHabitat","necsim_impls_no_std::cogs::habitat::spatially_implicit","",null,null],[11,"new","","ContractsPost-condition - debug: creates a habitat with a …",21,[[["u32",15]]]],[11,"local","","",21,[[],["nonspatialhabitat",3]]],[11,"meta","","",21,[[],["nonspatialhabitat",3]]],[0,"immigration_entry","necsim_impls_no_std::cogs","",null,null],[0,"buffered","necsim_impls_no_std::cogs::immigration_entry","",null,null],[3,"BufferedImmigrationEntry","necsim_impls_no_std::cogs::immigration_entry::buffered","",null,null],[11,"reset","","",22,[[]]],[11,"push","","",22,[[["migratinglineage",3]]]],[0,"never","necsim_impls_no_std::cogs::immigration_entry","",null,null],[3,"NeverImmigrationEntry","necsim_impls_no_std::cogs::immigration_entry::never","",null,null],[0,"lineage_reference","necsim_impls_no_std::cogs","",null,null],[0,"in_memory","necsim_impls_no_std::cogs::lineage_reference","",null,null],[3,"InMemoryLineageReference","necsim_impls_no_std::cogs::lineage_reference::in_memory","",null,null],[0,"lineage_store","necsim_impls_no_std::cogs","",null,null],[0,"coherent","necsim_impls_no_std::cogs::lineage_store","",null,null],[0,"globally","necsim_impls_no_std::cogs::lineage_store::coherent","",null,null],[0,"almost_infinite","necsim_impls_no_std::cogs::lineage_store::coherent::globally","",null,null],[3,"AlmostInfiniteLineageStore","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",null,null],[11,"new","","",23,[[["originsampler",8]]]],[0,"gillespie","necsim_impls_no_std::cogs::lineage_store::coherent::globally","",null,null],[3,"GillespieLineageStore","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",null,null],[11,"new","","",24,[[["originsampler",8]]]],[0,"locally","necsim_impls_no_std::cogs::lineage_store::coherent","",null,null],[0,"classical","necsim_impls_no_std::cogs::lineage_store::coherent::locally","",null,null],[3,"ClassicalLineageStore","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",null,null],[11,"new","","",25,[[["originsampler",8]]]],[0,"independent","necsim_impls_no_std::cogs::lineage_store","",null,null],[3,"IndependentLineageStore","necsim_impls_no_std::cogs::lineage_store::independent","",null,null],[0,"origin_sampler","necsim_impls_no_std::cogs","",null,null],[0,"almost_infinite","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"AlmostInfiniteOriginSampler","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",null,null],[11,"new","","ContractsPre-condition - debug: sample circle fits into …",26,[[["u32",15],["almostinfinitehabitat",3],["originpresampler",3]]]],[0,"decomposition","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"DecompositionOriginSampler","necsim_impls_no_std::cogs::origin_sampler::decomposition","",null,null],[11,"new","","",27,[[]]],[0,"in_memory","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"InMemoryOriginSampler","necsim_impls_no_std::cogs::origin_sampler::in_memory","",null,null],[11,"new","","",28,[[["originpresampler",3],["inmemoryhabitat",3]]]],[0,"non_spatial","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"NonSpatialOriginSampler","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",null,null],[11,"new","","",29,[[["originpresampler",3],["nonspatialhabitat",3]]]],[0,"pre_sampler","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"OriginPreSampler","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",null,null],[11,"get_sample_proportion","","ContractsPost-condition - debug: returns a proportion",30,[[],["f64",15]]],[11,"all","","",30,[[]]],[11,"percentage","","ContractsPre-condition - debug: percentage is in [0, 1]",30,[[["f64",15]],["originpresampler",3]]],[11,"partition","","",30,[[["u32",15]],["originpresampler",3]]],[0,"spatially_implicit","necsim_impls_no_std::cogs::origin_sampler","",null,null],[3,"SpatiallyImplicitOriginSampler","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",null,null],[11,"new","","",31,[[["originpresampler",3],["spatiallyimplicithabitat",3]]]],[0,"rng","necsim_impls_no_std::cogs","",null,null],[0,"aes","necsim_impls_no_std::cogs::rng","",null,null],[3,"AesRng","necsim_impls_no_std::cogs::rng::aes","",null,null],[0,"fixedseahash","necsim_impls_no_std::cogs::rng","",null,null],[3,"FixedSeaHash","necsim_impls_no_std::cogs::rng::fixedseahash","",null,null],[0,"seahash","necsim_impls_no_std::cogs::rng","",null,null],[3,"SeaHash","necsim_impls_no_std::cogs::rng::seahash","",null,null],[0,"wyhash","necsim_impls_no_std::cogs::rng","",null,null],[3,"WyHash","necsim_impls_no_std::cogs::rng::wyhash","",null,null],[0,"wyrand","necsim_impls_no_std::cogs::rng","",null,null],[3,"WyRand","necsim_impls_no_std::cogs::rng::wyrand","",null,null],[0,"xxhash","necsim_impls_no_std::cogs::rng","",null,null],[3,"XxHash","necsim_impls_no_std::cogs::rng::xxhash","",null,null],[0,"speciation_probability","necsim_impls_no_std::cogs","",null,null],[0,"spatially_implicit","necsim_impls_no_std::cogs::speciation_probability","",null,null],[3,"SpatiallyImplicitSpeciationProbability","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",null,null],[11,"new","","",32,[[["positiveunitf64",3]]]],[0,"uniform","necsim_impls_no_std::cogs::speciation_probability","",null,null],[3,"UniformSpeciationProbability","necsim_impls_no_std::cogs::speciation_probability::uniform","",null,null],[11,"new","","",33,[[["closedunitf64",3]]]],[0,"turnover_rate","necsim_impls_no_std::cogs","",null,null],[0,"uniform","necsim_impls_no_std::cogs::turnover_rate","",null,null],[3,"UniformTurnoverRate","necsim_impls_no_std::cogs::turnover_rate::uniform","",null,null],[11,"get_uniform_turnover_rate","","",34,[[],["positivef64",3]]],[0,"decomposition","necsim_impls_no_std","",null,null],[0,"equal","necsim_impls_no_std::decomposition","",null,null],[3,"EqualDecomposition","necsim_impls_no_std::decomposition::equal","",null,null],[0,"modulo","necsim_impls_no_std::decomposition","",null,null],[3,"ModuloDecomposition","necsim_impls_no_std::decomposition::modulo","",null,null],[11,"new","","",35,[[["u32",15],["nonzerou32",3]]]],[0,"monolithic","necsim_impls_no_std::decomposition","",null,null],[3,"MonolithicDecomposition","necsim_impls_no_std::decomposition::monolithic","",null,null],[0,"radial","necsim_impls_no_std::decomposition","",null,null],[3,"RadialDecomposition","necsim_impls_no_std::decomposition::radial","",null,null],[11,"new","","",36,[[["u32",15],["nonzerou32",3]]]],[8,"Decomposition","necsim_impls_no_std::decomposition","",null,null],[11,"get_subdomain_rank","","ContractsPost-condition - debug: subdomain rank is in …",37,[[],["u32",15]]],[11,"get_number_of_subdomains","","",37,[[],["nonzerou32",3]]],[11,"map_location_to_subdomain_rank","","ContractsPre-condition - debug: location is contained …",37,[[["location",3]],["u32",15]]],[0,"parallelisation","necsim_impls_no_std","",null,null],[0,"independent","necsim_impls_no_std::parallelisation","",null,null],[0,"individuals","necsim_impls_no_std::parallelisation::independent","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::independent::individuals","",null,[[["speciationprobability",8],["lineage",3],["dispersalsampler",8],["neverimmigrationentry",3],["independentcoalescencesampler",3],["independenteventsampler",3],["vecdeque",3],["independentlineagestore",3],["dedupcache",4],["neveremigrationexit",3],["globallineagereference",3],["simulation",3],["nonzerou64",3],["turnoverrate",8],["independentactivelineagesampler",3],["habitat",8],["primeablerng",8]]]],[0,"landscape","necsim_impls_no_std::parallelisation::independent","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::independent::landscape","",null,[[["speciationprobability",8],["simulation",3],["dispersalsampler",8],["independenteventsampler",3],["independentcoalescencesampler",3],["lineage",3],["primeablerng",8],["vecdeque",3],["independentlineagestore",3],["dedupcache",4],["independentactivelineagesampler",3],["globallineagereference",3],["independentemigrationexit",3],["nonzerou64",3],["turnoverrate",8],["habitat",8],["neverimmigrationentry",3]]]],[0,"monolithic","necsim_impls_no_std::parallelisation::independent","",null,null],[0,"reporter","necsim_impls_no_std::parallelisation::independent::monolithic","",null,null],[8,"WaterLevelReporterProxy","necsim_impls_no_std::parallelisation::independent::monolithic::reporter","",null,null],[11,"new","","",38,[[["usize",15]]]],[11,"water_level","","",38,[[],["nonnegativef64",3]]],[11,"advance_water_level","","ContractsPre-condition - debug: advances the water level",38,[[["nonnegativef64",3]]]],[11,"local_partition","","",38,[[]]],[4,"WaterLevelReporterStrategy","","",null,null],[8,"WaterLevelReporterConstructor","","",null,null],[16,"WaterLevelReporter","","",39,null],[5,"simulate","necsim_impls_no_std::parallelisation::independent::monolithic","",null,[[["speciationprobability",8],["lineage",3],["dispersalsampler",8],["neverimmigrationentry",3],["independentcoalescencesampler",3],["independenteventsampler",3],["vecdeque",3],["nonzerousize",3],["independentlineagestore",3],["dedupcache",4],["neveremigrationexit",3],["globallineagereference",3],["simulation",3],["nonzerou64",3],["turnoverrate",8],["independentactivelineagesampler",3],["habitat",8],["primeablerng",8]]]],[3,"AbsoluteDedupCache","necsim_impls_no_std::parallelisation::independent","",null,null],[12,"capacity","","",40,null],[3,"RelativeDedupCache","","",null,null],[12,"factor","","",41,null],[4,"DedupCache","","",null,null],[13,"Absolute","","",42,null],[13,"Relative","","",42,null],[13,"None","","",42,null],[11,"construct","","",42,[[["usize",15]],[["partialeq",8],["directmappedcache",3],["hash",8]]]],[0,"monolithic","necsim_impls_no_std::parallelisation","",null,null],[0,"averaging","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::averaging","",null,[[["speciationprobability",8],["positivef64",3],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[0,"lockstep","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::lockstep","",null,[[["speciationprobability",8],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[0,"monolithic","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::monolithic","",null,[[["speciationprobability",8],["neveremigrationexit",3],["lineagereference",8],["simulation",3],["rngcore",8],["locallycoherentlineagestore",8],["dispersalsampler",8],["coalescencesampler",8],["eventsampler",8],["activelineagesampler",8],["turnoverrate",8],["habitat",8],["neverimmigrationentry",3]]]],[0,"optimistic","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::optimistic","",null,[[["speciationprobability",8],["positivef64",3],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[0,"optimistic_lockstep","necsim_impls_no_std::parallelisation::monolithic","",null,null],[5,"simulate","necsim_impls_no_std::parallelisation::monolithic::optimistic_lockstep","",null,[[["speciationprobability",8],["lineagereference",8],["dispersalsampler",8],["domainemigrationexit",3],["rngcore",8],["simulation",3],["locallycoherentlineagestore",8],["coalescencesampler",8],["peekableactivelineagesampler",8],["bufferedimmigrationentry",3],["turnoverrate",8],["habitat",8],["eventsampler",8]]]],[11,"borrow","necsim_impls_no_std::alias::packed","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::alias","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cache","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"peek_optional_time_of_next_event","","",3,[[],[["positivef64",3],["option",4]]]],[11,"peek_optional_time_of_next_event","","",3,[[],[["positivef64",3],["option",4]]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"approx_from","","",43,[[],["result",4]]],[11,"approx_into","","",43,[[],["result",4]]],[11,"value_from","","",43,[[],["result",4]]],[11,"value_into","","",43,[[],["result",4]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"peek_optional_time_of_next_event","","",8,[[],[["positivef64",3],["option",4]]]],[11,"peek_optional_time_of_next_event","","",8,[[],[["positivef64",3],["option",4]]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::coalescence_sampler::independent","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"approx_from","","",44,[[],["result",4]]],[11,"approx_into","","",44,[[],["result",4]]],[11,"value_from","","",44,[[],["result",4]]],[11,"value_into","","",44,[[],["result",4]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"approx_from","","",45,[[],["result",4]]],[11,"approx_into","","",45,[[],["result",4]]],[11,"value_from","","",45,[[],["result",4]]],[11,"value_into","","",45,[[],["result",4]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"approx_from","","",46,[[],["result",4]]],[11,"approx_into","","",46,[[],["result",4]]],[11,"value_from","","",46,[[],["result",4]]],[11,"value_into","","",46,[[],["result",4]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"approx_from","","",47,[[],["result",4]]],[11,"approx_into","","",47,[[],["result",4]]],[11,"value_from","","",47,[[],["result",4]]],[11,"value_into","","",47,[[],["result",4]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"approx_from","","",48,[[],["result",4]]],[11,"approx_into","","",48,[[],["result",4]]],[11,"value_from","","",48,[[],["result",4]]],[11,"value_into","","",48,[[],["result",4]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"approx_from","","",49,[[],["result",4]]],[11,"approx_into","","",49,[[],["result",4]]],[11,"value_from","","",49,[[],["result",4]]],[11,"value_into","","",49,[[],["result",4]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"approx_from","","",50,[[],["result",4]]],[11,"approx_into","","",50,[[],["result",4]]],[11,"value_from","","",50,[[],["result",4]]],[11,"value_into","","",50,[[],["result",4]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"approx_from","","",12,[[],["result",4]]],[11,"approx_into","","",12,[[],["result",4]]],[11,"value_from","","",12,[[],["result",4]]],[11,"value_into","","",12,[[],["result",4]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::domain","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"into_iter","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"approx_from","","",13,[[],["result",4]]],[11,"approx_into","","",13,[[],["result",4]]],[11,"value_from","","",13,[[],["result",4]]],[11,"value_into","","",13,[[],["result",4]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"approx_from","","",51,[[],["result",4]]],[11,"approx_into","","",51,[[],["result",4]]],[11,"value_from","","",51,[[],["result",4]]],[11,"value_into","","",51,[[],["result",4]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"approx_from","","",14,[[],["result",4]]],[11,"approx_into","","",14,[[],["result",4]]],[11,"value_from","","",14,[[],["result",4]]],[11,"value_into","","",14,[[],["result",4]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::independent","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"approx_from","","",16,[[],["result",4]]],[11,"approx_into","","",16,[[],["result",4]]],[11,"value_from","","",16,[[],["result",4]]],[11,"value_into","","",16,[[],["result",4]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::emigration_exit::never","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"approx_from","","",52,[[],["result",4]]],[11,"approx_into","","",52,[[],["result",4]]],[11,"value_from","","",52,[[],["result",4]]],[11,"value_into","","",52,[[],["result",4]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"approx_from","","",53,[[],["result",4]]],[11,"approx_into","","",53,[[],["result",4]]],[11,"value_from","","",53,[[],["result",4]]],[11,"value_into","","",53,[[],["result",4]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"approx_from","","",54,[[],["result",4]]],[11,"approx_into","","",54,[[],["result",4]]],[11,"value_from","","",54,[[],["result",4]]],[11,"value_into","","",54,[[],["result",4]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::gillespie","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"approx_from","","",18,[[],["result",4]]],[11,"approx_into","","",18,[[],["result",4]]],[11,"value_from","","",18,[[],["result",4]]],[11,"value_into","","",18,[[],["result",4]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::independent","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"approx_from","","",55,[[],["result",4]]],[11,"approx_into","","",55,[[],["result",4]]],[11,"value_from","","",55,[[],["result",4]]],[11,"value_into","","",55,[[],["result",4]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::event_sampler::unconditional","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"approx_from","","",56,[[],["result",4]]],[11,"approx_into","","",56,[[],["result",4]]],[11,"value_from","","",56,[[],["result",4]]],[11,"value_into","","",56,[[],["result",4]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::almost_infinite","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"approx_from","","",57,[[],["result",4]]],[11,"approx_into","","",57,[[],["result",4]]],[11,"value_from","","",57,[[],["result",4]]],[11,"value_into","","",57,[[],["result",4]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::in_memory","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"approx_from","","",19,[[],["result",4]]],[11,"approx_into","","",19,[[],["result",4]]],[11,"value_from","","",19,[[],["result",4]]],[11,"value_into","","",19,[[],["result",4]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::non_spatial","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"approx_from","","",20,[[],["result",4]]],[11,"approx_into","","",20,[[],["result",4]]],[11,"value_from","","",20,[[],["result",4]]],[11,"value_into","","",20,[[],["result",4]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::habitat::spatially_implicit","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"approx_from","","",21,[[],["result",4]]],[11,"approx_into","","",21,[[],["result",4]]],[11,"value_from","","",21,[[],["result",4]]],[11,"value_into","","",21,[[],["result",4]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::immigration_entry::buffered","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"approx_from","","",22,[[],["result",4]]],[11,"approx_into","","",22,[[],["result",4]]],[11,"value_from","","",22,[[],["result",4]]],[11,"value_into","","",22,[[],["result",4]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::immigration_entry::never","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"approx_from","","",58,[[],["result",4]]],[11,"approx_into","","",58,[[],["result",4]]],[11,"value_from","","",58,[[],["result",4]]],[11,"value_into","","",58,[[],["result",4]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_reference::in_memory","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"approx_from","","",59,[[],["result",4]]],[11,"approx_into","","",59,[[],["result",4]]],[11,"value_from","","",59,[[],["result",4]]],[11,"value_into","","",59,[[],["result",4]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"get_hash","","",59,[[],["u64",15]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"approx_from","","",23,[[],["result",4]]],[11,"approx_into","","",23,[[],["result",4]]],[11,"value_from","","",23,[[],["result",4]]],[11,"value_into","","",23,[[],["result",4]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"approx_from","","",24,[[],["result",4]]],[11,"approx_into","","",24,[[],["result",4]]],[11,"value_from","","",24,[[],["result",4]]],[11,"value_into","","",24,[[],["result",4]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"approx_from","","",25,[[],["result",4]]],[11,"approx_into","","",25,[[],["result",4]]],[11,"value_from","","",25,[[],["result",4]]],[11,"value_into","","",25,[[],["result",4]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::lineage_store::independent","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"approx_from","","",60,[[],["result",4]]],[11,"approx_into","","",60,[[],["result",4]]],[11,"value_from","","",60,[[],["result",4]]],[11,"value_into","","",60,[[],["result",4]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"into_iter","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"approx_from","","",26,[[],["result",4]]],[11,"approx_into","","",26,[[],["result",4]]],[11,"value_from","","",26,[[],["result",4]]],[11,"value_into","","",26,[[],["result",4]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::decomposition","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"into_iter","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"approx_from","","",27,[[],["result",4]]],[11,"approx_into","","",27,[[],["result",4]]],[11,"value_from","","",27,[[],["result",4]]],[11,"value_into","","",27,[[],["result",4]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::in_memory","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"into_iter","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"approx_from","","",28,[[],["result",4]]],[11,"approx_into","","",28,[[],["result",4]]],[11,"value_from","","",28,[[],["result",4]]],[11,"value_into","","",28,[[],["result",4]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"into_iter","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"approx_from","","",29,[[],["result",4]]],[11,"approx_into","","",29,[[],["result",4]]],[11,"value_from","","",29,[[],["result",4]]],[11,"value_into","","",29,[[],["result",4]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"approx_from","","",30,[[],["result",4]]],[11,"approx_into","","",30,[[],["result",4]]],[11,"value_from","","",30,[[],["result",4]]],[11,"value_into","","",30,[[],["result",4]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"into_iter","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"approx_from","","",31,[[],["result",4]]],[11,"approx_into","","",31,[[],["result",4]]],[11,"value_from","","",31,[[],["result",4]]],[11,"value_into","","",31,[[],["result",4]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::aes","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"approx_from","","",61,[[],["result",4]]],[11,"approx_into","","",61,[[],["result",4]]],[11,"value_from","","",61,[[],["result",4]]],[11,"value_into","","",61,[[],["result",4]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::fixedseahash","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"approx_from","","",62,[[],["result",4]]],[11,"approx_into","","",62,[[],["result",4]]],[11,"value_from","","",62,[[],["result",4]]],[11,"value_into","","",62,[[],["result",4]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::seahash","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"approx_from","","",63,[[],["result",4]]],[11,"approx_into","","",63,[[],["result",4]]],[11,"value_from","","",63,[[],["result",4]]],[11,"value_into","","",63,[[],["result",4]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::wyhash","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"approx_from","","",64,[[],["result",4]]],[11,"approx_into","","",64,[[],["result",4]]],[11,"value_from","","",64,[[],["result",4]]],[11,"value_into","","",64,[[],["result",4]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::wyrand","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"approx_from","","",65,[[],["result",4]]],[11,"approx_into","","",65,[[],["result",4]]],[11,"value_from","","",65,[[],["result",4]]],[11,"value_into","","",65,[[],["result",4]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::rng::xxhash","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"approx_from","","",66,[[],["result",4]]],[11,"approx_into","","",66,[[],["result",4]]],[11,"value_from","","",66,[[],["result",4]]],[11,"value_into","","",66,[[],["result",4]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"approx_from","","",32,[[],["result",4]]],[11,"approx_into","","",32,[[],["result",4]]],[11,"value_from","","",32,[[],["result",4]]],[11,"value_into","","",32,[[],["result",4]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::speciation_probability::uniform","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"approx_from","","",33,[[],["result",4]]],[11,"approx_into","","",33,[[],["result",4]]],[11,"value_from","","",33,[[],["result",4]]],[11,"value_into","","",33,[[],["result",4]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::cogs::turnover_rate::uniform","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"approx_from","","",34,[[],["result",4]]],[11,"approx_into","","",34,[[],["result",4]]],[11,"value_from","","",34,[[],["result",4]]],[11,"value_into","","",34,[[],["result",4]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::equal","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"approx_from","","",67,[[],["result",4]]],[11,"approx_into","","",67,[[],["result",4]]],[11,"value_from","","",67,[[],["result",4]]],[11,"value_into","","",67,[[],["result",4]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::modulo","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"approx_from","","",35,[[],["result",4]]],[11,"approx_into","","",35,[[],["result",4]]],[11,"value_from","","",35,[[],["result",4]]],[11,"value_into","","",35,[[],["result",4]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::monolithic","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"approx_from","","",68,[[],["result",4]]],[11,"approx_into","","",68,[[],["result",4]]],[11,"value_from","","",68,[[],["result",4]]],[11,"value_into","","",68,[[],["result",4]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::decomposition::radial","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"approx_from","","",36,[[],["result",4]]],[11,"approx_into","","",36,[[],["result",4]]],[11,"value_from","","",36,[[],["result",4]]],[11,"value_into","","",36,[[],["result",4]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::independent::monolithic::reporter","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"approx_from","","",69,[[],["result",4]]],[11,"approx_into","","",69,[[],["result",4]]],[11,"value_from","","",69,[[],["result",4]]],[11,"value_into","","",69,[[],["result",4]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","necsim_impls_no_std::parallelisation::independent","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"approx_from","","",40,[[],["result",4]]],[11,"approx_into","","",40,[[],["result",4]]],[11,"value_from","","",40,[[],["result",4]]],[11,"value_into","","",40,[[],["result",4]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"approx_from","","",41,[[],["result",4]]],[11,"approx_into","","",41,[[],["result",4]]],[11,"value_from","","",41,[[],["result",4]]],[11,"value_into","","",41,[[],["result",4]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"approx_from","","",42,[[],["result",4]]],[11,"approx_into","","",42,[[],["result",4]]],[11,"value_from","","",42,[[],["result",4]]],[11,"value_into","","",42,[[],["result",4]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",43,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",5,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_next_event_time_at_indexed_location_weakly_after","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",6,[[["nonnegativef64",3],["indexedlocation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","Creates a new <code>InMemoryAliasDispersalSampler</code> from the …",46,[[["array2d",3]]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","Creates a new <code>InMemoryCumulativeDispersalSampler</code> from the …",47,[[["array2d",3]]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","Creates a new <code>InMemoryPackedAliasDispersalSampler</code> from the…",48,[[["array2d",3]]]],[11,"__contracts_impl_unchecked_new","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","Creates a new <code>InMemorySeparableAliasDispersalSampler</code> from …",49,[[["array2d",3]]]],[11,"__contracts_impl_should_lineage_emigrate","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",51,[[["positivef64",3],["indexedlocation",3]],["bool",15]]],[11,"__contracts_impl_should_lineage_emigrate","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",14,[[["positivef64",3],["indexedlocation",3]],["bool",15]]],[11,"__contracts_impl_get_event_rate_at_location","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",53,[[["location",3],["gillespiepartialsimulation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_get_event_rate_at_location","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",54,[[["location",3],["gillespiepartialsimulation",3]],["nonnegativef64",3]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::equal","",67,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",67,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","ContractsPre-condition - debug: habitat has a matching …",67,[[["location",3]],["u32",15]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::modulo","",35,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",35,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","",35,[[["location",3]],["u32",15]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::monolithic","",68,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",68,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","",68,[[["location",3]],["u32",15]]],[11,"__contracts_impl_get_subdomain_rank","necsim_impls_no_std::decomposition::radial","",36,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_subdomains","","",36,[[],["nonzerou32",3]]],[11,"__contracts_impl_map_location_to_subdomain_rank","","",36,[[["location",3]],["u32",15]]],[11,"deref","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"fmt","necsim_impls_no_std::alias::packed","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",43,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",5,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",6,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",8,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",9,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::coalescence_sampler::independent","",44,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",45,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",10,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",46,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",47,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",48,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",49,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",50,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",12,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::domain","",13,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",51,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",14,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::independent","",16,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::emigration_exit::never","",52,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",53,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",54,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::independent","",55,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::event_sampler::unconditional","",56,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::almost_infinite","",57,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::in_memory","",19,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::non_spatial","",20,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::habitat::spatially_implicit","",21,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::immigration_entry::buffered","",22,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::immigration_entry::never","",58,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_reference::in_memory","",59,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",23,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",24,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",25,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::lineage_store::independent","",60,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",26,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::decomposition","",27,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::in_memory","",28,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",29,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","",30,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",31,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::aes","",61,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::fixedseahash","",62,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::seahash","",63,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::wyhash","",64,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::wyrand","",65,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::rng::xxhash","",66,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",32,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::speciation_probability::uniform","",33,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::cogs::turnover_rate::uniform","",34,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::equal","",67,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::modulo","",35,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::monolithic","",68,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::decomposition::radial","",36,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_no_std::parallelisation::independent","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"eq","necsim_impls_no_std::cogs::lineage_reference::in_memory","",59,[[["inmemorylineagereference",3]],["bool",15]]],[11,"ne","","",59,[[["inmemorylineagereference",3]],["bool",15]]],[11,"index","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","ContractsPre-condition - debug: lineage reference is …",23,[[["inmemorylineagereference",3]]]],[11,"index","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","ContractsPre-condition - debug: lineage reference is …",24,[[["inmemorylineagereference",3]]]],[11,"index","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","ContractsPre-condition - debug: lineage reference is …",25,[[["inmemorylineagereference",3]]]],[11,"hash","necsim_impls_no_std::cogs::lineage_reference::in_memory","",59,[[]]],[11,"from","","",59,[[["usize",15]]]],[11,"next","necsim_impls_no_std::cogs::emigration_exit::domain","",13,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",26,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::decomposition","",27,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::in_memory","",28,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",29,[[],["option",4]]],[11,"next","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",31,[[],["option",4]]],[11,"clone","necsim_impls_no_std::alias::packed","",0,[[],["aliasmethodsampleratom",3]]],[11,"clone","necsim_impls_no_std::alias","",1,[[],["aliasmethodsampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[],["expeventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",43,[[],["fixedeventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",5,[[],["geometriceventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",6,[[],["poissoneventtimesampler",3]]],[11,"clone","necsim_impls_no_std::cogs::lineage_reference::in_memory","",59,[[],["inmemorylineagereference",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::aes","",61,[[],["aesrng",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::fixedseahash","",62,[[],["fixedseahash",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::seahash","",63,[[],["seahash",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::wyhash","",64,[[],["wyhash",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::wyrand","",65,[[],["wyrand",3]]],[11,"clone","necsim_impls_no_std::cogs::rng::xxhash","",66,[[],["xxhash",3]]],[11,"default","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",43,[[]]],[11,"default","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",9,[[]]],[11,"default","necsim_impls_no_std::cogs::coalescence_sampler::independent","",44,[[]]],[11,"default","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",45,[[]]],[11,"default","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",50,[[]]],[11,"default","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",51,[[]]],[11,"default","necsim_impls_no_std::cogs::emigration_exit::never","",52,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",53,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",54,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::independent","",55,[[]]],[11,"default","necsim_impls_no_std::cogs::event_sampler::unconditional","",56,[[]]],[11,"default","necsim_impls_no_std::cogs::habitat::almost_infinite","",57,[[]]],[11,"default","necsim_impls_no_std::cogs::immigration_entry::buffered","",22,[[]]],[11,"default","necsim_impls_no_std::cogs::immigration_entry::never","",58,[[]]],[11,"default","necsim_impls_no_std::cogs::lineage_store::independent","",60,[[]]],[11,"default","necsim_impls_no_std::cogs::turnover_rate::uniform","",34,[[]]],[11,"default","necsim_impls_no_std::decomposition::monolithic","",68,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",8,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",9,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::coalescence_sampler::independent","",44,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",45,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",10,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",46,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",47,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",48,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",49,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",50,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",12,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::domain","",13,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","",51,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","",14,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::independent","",16,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::emigration_exit::never","",52,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","",53,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","",54,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::independent","",55,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::event_sampler::unconditional","",56,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::almost_infinite","",57,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::in_memory","",19,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::non_spatial","",20,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::habitat::spatially_implicit","",21,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::immigration_entry::buffered","",22,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::immigration_entry::never","",58,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_reference::in_memory","",59,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",23,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",24,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",25,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::lineage_store::independent","",60,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::aes","",61,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::fixedseahash","",62,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::seahash","",63,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::wyhash","",64,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::wyrand","",65,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::rng::xxhash","",66,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",32,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::speciation_probability::uniform","",33,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::cogs::turnover_rate::uniform","",34,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::equal","",67,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::modulo","",35,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::monolithic","",68,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_no_std::decomposition::radial","",36,[[]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::almost_infinite","",57,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",57,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",57,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",57,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::in_memory","",19,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",19,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",19,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",19,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::non_spatial","",20,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",20,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",20,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",20,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_get_extent","necsim_impls_no_std::cogs::habitat::spatially_implicit","",21,[[],["landscapeextent",3]]],[11,"__contracts_impl_get_total_habitat","","",21,[[],["u64",15]]],[11,"__contracts_impl_get_habitat_at_location","","",21,[[["location",3]],["u32",15]]],[11,"__contracts_impl_map_indexed_location_to_u64_injective","","",21,[[["indexedlocation",3]],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","",26,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",26,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::decomposition","",27,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",27,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::in_memory","",28,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",28,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::non_spatial","",29,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",29,[[],["u64",15]]],[11,"__contracts_impl_habitat","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","",31,[[]]],[11,"__contracts_impl_full_upper_bound_size_hint","","",31,[[],["u64",15]]],[11,"__contracts_impl_get_speciation_probability_at_location","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","ContractsPre-condition - debug: location is inside either …",32,[[["location",3],["spatiallyimplicithabitat",3]],["closedunitf64",3]]],[11,"__contracts_impl_get_speciation_probability_at_location","necsim_impls_no_std::cogs::speciation_probability::uniform","",33,[[["location",3]],["closedunitf64",3]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::aes","",61,[[]]],[11,"sample_u64","","",61,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::fixedseahash","",62,[[]]],[11,"sample_u64","","",62,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::seahash","",63,[[]]],[11,"sample_u64","","",63,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::wyhash","",64,[[]]],[11,"sample_u64","","",64,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::wyrand","",65,[[]]],[11,"sample_u64","","",65,[[],["u64",15]]],[11,"from_seed","necsim_impls_no_std::cogs::rng::xxhash","",66,[[]]],[11,"sample_u64","","",66,[[],["u64",15]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::aes","",61,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::fixedseahash","",62,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::seahash","",63,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::wyhash","",64,[[["u64",15]]]],[11,"prime_with","necsim_impls_no_std::cogs::rng::xxhash","",66,[[["u64",15]]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",10,[[["location",3],["almostinfinitehabitat",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","",46,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","",47,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",48,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",49,[[["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",50,[[["nonspatialhabitat",3],["location",3]],["location",3]]],[11,"__contracts_impl_sample_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","ContractsPre-condition - debug: location is inside either …",12,[[["location",3],["spatiallyimplicithabitat",3]],["location",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",10,[[["location",3],["almostinfinitehabitat",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","",10,[[["location",3],["almostinfinitehabitat",3]],["closedunitf64",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","",49,[[["location",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside …",49,[[["location",3]],["closedunitf64",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","ContractsPre-condition - debug: a different, non-self …",50,[[["nonspatialhabitat",3],["location",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","",50,[[["nonspatialhabitat",3],["location",3]],["closedunitf64",3]]],[11,"__contracts_impl_sample_non_self_dispersal_from_location","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","ContractsPre-condition - debug: location is inside either …",12,[[["location",3],["spatiallyimplicithabitat",3]],["location",3]]],[11,"__contracts_impl_get_self_dispersal_probability_at_location","","ContractsPre-condition - debug: location is inside either …",12,[[["location",3],["spatiallyimplicithabitat",3]],["closedunitf64",3]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",23,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",23,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",23,[[]]],[11,"__contracts_impl_get","","",23,[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",24,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",24,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",24,[[]]],[11,"__contracts_impl_get","","",24,[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",25,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",25,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",25,[[]]],[11,"__contracts_impl_get","","",25,[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_from_origin_sampler","necsim_impls_no_std::cogs::lineage_store::independent","",60,[[["originsampler",8]]]],[11,"__contracts_impl_get_number_total_lineages","","",60,[[],["usize",15]]],[11,"__contracts_impl_iter_local_lineage_references","","",60,[[]]],[11,"__contracts_impl_get","","",60,[[["globallineagereference",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_get_active_global_lineage_reference_at_indexed_location","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","ContractsPre-condition - debug: only one lineage per …",23,[[["almostinfinitehabitat",3],["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","","ContractsPre-condition - debug: only one lineage per …",23,[[["almostinfinitehabitat",3],["indexedlocation",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_extract_lineage_from_its_location_locally_coherent","","ContractsPre-condition - debug: only one lineage per …",23,[[["positivef64",3],["almostinfinitehabitat",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_emigrate","","",23,[[["inmemorylineagereference",3]],["globallineagereference",3]]],[11,"__contracts_impl_immigrate_locally_coherent","","",23,[[["positivef64",3],["almostinfinitehabitat",3],["globallineagereference",3],["indexedlocation",3]],["inmemorylineagereference",3]]],[11,"__contracts_impl_get_active_global_lineage_reference_at_indexed_location","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",24,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","","",24,[[["indexedlocation",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_extract_lineage_from_its_location_locally_coherent","","",24,[[["positivef64",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_emigrate","","",24,[[["inmemorylineagereference",3]],["globallineagereference",3]]],[11,"__contracts_impl_immigrate_locally_coherent","","",24,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]],["inmemorylineagereference",3]]],[11,"__contracts_impl_get_active_global_lineage_reference_at_indexed_location","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","",25,[[["indexedlocation",3]],[["option",4],["globallineagereference",3]]]],[11,"__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","","",25,[[["indexedlocation",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_extract_lineage_from_its_location_locally_coherent","","",25,[[["positivef64",3],["inmemorylineagereference",3]]]],[11,"__contracts_impl_emigrate","","",25,[[["inmemorylineagereference",3]],["globallineagereference",3]]],[11,"__contracts_impl_immigrate_locally_coherent","","",25,[[["positivef64",3],["globallineagereference",3],["indexedlocation",3]],["inmemorylineagereference",3]]],[11,"__contracts_impl_iter_active_locations","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","",23,[[["almostinfinitehabitat",3]]]],[11,"__contracts_impl_get_active_local_lineage_references_at_location_unordered","","",23,[[["location",3],["almostinfinitehabitat",3]]]],[11,"__contracts_impl_iter_active_locations","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","",24,[[]]],[11,"__contracts_impl_get_active_local_lineage_references_at_location_unordered","","",24,[[["location",3]]]],[11,"__contracts_impl_optionally_emigrate","necsim_impls_no_std::cogs::emigration_exit::domain","ContractsPost-condition - debug: lineage only emigrates …",13,[[["nonnegativef64",3],["location",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],["option",4]]],[11,"__contracts_impl_optionally_emigrate","necsim_impls_no_std::cogs::emigration_exit::independent","ContractsPre-condition - debug: can only hold one emigrant",16,[[["positivef64",3],["partialsimulation",3],["location",3],["nonnegativef64",3],["globallineagereference",3],["indexedlocation",3]],["option",4]]],[11,"__contracts_impl_optionally_emigrate","necsim_impls_no_std::cogs::emigration_exit::never","ContractsPost-condition - debug: lineage never emigrates",52,[[["nonnegativef64",3],["location",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],["option",4]]],[11,"__contracts_impl_sample_interaction_at_location","necsim_impls_no_std::cogs::coalescence_sampler::conditional","",9,[[["location",3],["coalescencerngsample",3]]]],[11,"__contracts_impl_sample_interaction_at_location","necsim_impls_no_std::cogs::coalescence_sampler::independent","ContractsPost-condition - debug: always reports maybe",44,[[["coalescencerngsample",3],["location",3],["independentlineagestore",3]]]],[11,"__contracts_impl_sample_interaction_at_location","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","",45,[[["location",3],["coalescencerngsample",3]]]],[11,"__contracts_impl_get_turnover_rate_at_location","necsim_impls_no_std::cogs::turnover_rate::uniform","",34,[[["location",3]],["nonnegativef64",3]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","ContractsPost-condition - debug: event occurs for …",53,[[["partialsimulation",3],["nonnegativef64",3],["indexedlocation",3],["positivef64",3]],[["packedevent",3],["option",4]]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","ContractsPost-condition - debug: event occurs for …",54,[[["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],[["packedevent",3],["option",4]]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::independent","",55,[[["positivef64",3],["partialsimulation",3],["nonnegativef64",3],["globallineagereference",3],["indexedlocation",3]],[["packedevent",3],["option",4]]]],[11,"__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","necsim_impls_no_std::cogs::event_sampler::unconditional","ContractsPost-condition - debug: event occurs for …",56,[[["nonnegativef64",3],["partialsimulation",3],["indexedlocation",3],["positivef64",3]],[["packedevent",3],["option",4]]]],[11,"replace_min_speciation","necsim_impls_no_std::cogs::event_sampler::independent","",55,[[["speciationsample",3],["option",4]],[["speciationsample",3],["option",4]]]],[11,"__contracts_impl_next_optional_immigration","necsim_impls_no_std::cogs::immigration_entry::buffered","",22,[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_peek_next_immigration","","",22,[[],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_next_optional_immigration","necsim_impls_no_std::cogs::immigration_entry::never","ContractsPost-condition - debug: no lineage ever …",58,[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_peek_next_immigration","","ContractsPost-condition - debug: no lineage ever …",58,[[],[["migratinglineage",3],["option",4]]]],[11,"__contracts_impl_number_active_lineages","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[],["usize",15]]],[11,"__contracts_impl_get_last_event_time","","",3,[[],["nonnegativef64",3]]],[11,"__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","","",3,[[["partialsimulation",3]],["option",4]]],[11,"__contracts_impl_push_active_lineage_to_indexed_location","","",3,[[["partialsimulation",3],["indexedlocation",3],["positivef64",3]]]],[11,"__contracts_impl_insert_new_lineage_to_indexed_location","","",3,[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]]],[11,"__contracts_impl_number_active_lineages","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",8,[[],["usize",15]]],[11,"__contracts_impl_get_last_event_time","","",8,[[],["nonnegativef64",3]]],[11,"__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","","",8,[[["partialsimulation",3]],["option",4]]],[11,"__contracts_impl_push_active_lineage_to_indexed_location","","ContractsPre-condition - debug: does not overwrite the …",8,[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]]],[11,"__contracts_impl_insert_new_lineage_to_indexed_location","","",8,[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]]],[11,"replace_active_lineage","","",8,[[["option",4],["lineage",3]],[["option",4],["lineage",3]]]],[11,"__contracts_impl_peek_time_of_next_event","necsim_impls_no_std::cogs::active_lineage_sampler::classical","",3,[[["uniformturnoverrate",3]],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[11,"__contracts_impl_peek_time_of_next_event","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",8,[[],[["positivef64",3],["emptyactivelineagesamplererror",3],["result",4]]]],[11,"deserialize","necsim_impls_no_std::parallelisation::independent","",40,[[],["result",4]]],[11,"deserialize","","",41,[[],["result",4]]],[11,"deserialize","","",42,[[],["result",4]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","",4,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",4,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","",43,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",43,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","",5,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",5,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","",6,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",6,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::active_lineage_sampler::independent","",8,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",8,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::coalescence_sampler::independent","",44,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",44,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","",10,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",10,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","",48,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",48,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","",50,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",50,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","",12,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",12,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::emigration_exit::never","",52,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",52,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::event_sampler::independent","",55,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",55,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::almost_infinite","",57,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",57,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::in_memory","",19,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",19,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::non_spatial","",20,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",20,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::habitat::spatially_implicit","",21,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",21,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::immigration_entry::never","",58,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",58,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::lineage_store::independent","",60,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",60,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","",32,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",32,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::speciation_probability::uniform","",33,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",33,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"borrow_mut","necsim_impls_no_std::cogs::turnover_rate::uniform","",34,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",34,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]]],[11,"area","necsim_impls_no_std::decomposition::equal","ErrorsReturns <code>Ok(Self)</code> iff the <code>habitat</code> can be partitioned …",67,[[["u32",15],["nonzerou32",3]],["result",4]]],[11,"weight","","ErrorsReturns <code>Ok(Self)</code> iff the <code>habitat</code> can be partitioned …",67,[[["u32",15],["nonzerou32",3]],["result",4]]]],"p":[[3,"AliasMethodSamplerAtom"],[3,"AliasMethodSampler"],[3,"DirectMappedCache"],[3,"ClassicalActiveLineageSampler"],[3,"ExpEventTimeSampler"],[3,"GeometricEventTimeSampler"],[3,"PoissonEventTimeSampler"],[8,"EventTimeSampler"],[3,"IndependentActiveLineageSampler"],[3,"ConditionalCoalescenceSampler"],[3,"AlmostInfiniteNormalDispersalSampler"],[8,"InMemoryDispersalSampler"],[3,"SpatiallyImplicitDispersalSampler"],[3,"DomainEmigrationExit"],[3,"ProbabilisticEmigrationChoice"],[8,"EmigrationChoice"],[3,"IndependentEmigrationExit"],[8,"GillespieEventSampler"],[3,"GillespiePartialSimulation"],[3,"InMemoryHabitat"],[3,"NonSpatialHabitat"],[3,"SpatiallyImplicitHabitat"],[3,"BufferedImmigrationEntry"],[3,"AlmostInfiniteLineageStore"],[3,"GillespieLineageStore"],[3,"ClassicalLineageStore"],[3,"AlmostInfiniteOriginSampler"],[3,"DecompositionOriginSampler"],[3,"InMemoryOriginSampler"],[3,"NonSpatialOriginSampler"],[3,"OriginPreSampler"],[3,"SpatiallyImplicitOriginSampler"],[3,"SpatiallyImplicitSpeciationProbability"],[3,"UniformSpeciationProbability"],[3,"UniformTurnoverRate"],[3,"ModuloDecomposition"],[3,"RadialDecomposition"],[8,"Decomposition"],[8,"WaterLevelReporterProxy"],[8,"WaterLevelReporterConstructor"],[3,"AbsoluteDedupCache"],[3,"RelativeDedupCache"],[4,"DedupCache"],[3,"FixedEventTimeSampler"],[3,"IndependentCoalescenceSampler"],[3,"UnconditionalCoalescenceSampler"],[3,"InMemoryAliasDispersalSampler"],[3,"InMemoryCumulativeDispersalSampler"],[3,"InMemoryPackedAliasDispersalSampler"],[3,"InMemorySeparableAliasDispersalSampler"],[3,"NonSpatialDispersalSampler"],[3,"AlwaysEmigrationChoice"],[3,"NeverEmigrationExit"],[3,"ConditionalGillespieEventSampler"],[3,"UnconditionalGillespieEventSampler"],[3,"IndependentEventSampler"],[3,"UnconditionalEventSampler"],[3,"AlmostInfiniteHabitat"],[3,"NeverImmigrationEntry"],[3,"InMemoryLineageReference"],[3,"IndependentLineageStore"],[3,"AesRng"],[3,"FixedSeaHash"],[3,"SeaHash"],[3,"WyHash"],[3,"WyRand"],[3,"XxHash"],[3,"EqualDecomposition"],[3,"MonolithicDecomposition"],[4,"WaterLevelReporterStrategy"]]},\
"necsim_impls_std":{"doc":"","i":[[0,"cogs","necsim_impls_std","",null,null],[0,"active_lineage_sampler","necsim_impls_std::cogs","",null,null],[0,"gillespie","necsim_impls_std::cogs::active_lineage_sampler","",null,null],[3,"GillespieActiveLineageSampler","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",null,null],[11,"new","","",0,[[["gillespiepartialsimulation",3]]]],[0,"dispersal_sampler","necsim_impls_std::cogs","",null,null],[0,"in_memory","necsim_impls_std::cogs::dispersal_sampler","",null,null],[0,"error","necsim_impls_std::cogs::dispersal_sampler::in_memory","",null,null],[4,"InMemoryDispersalSamplerError","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",null,null],[13,"InconsistentDispersalMapSize","","",1,null],[13,"InconsistentDispersalProbabilities","","",1,null],[8,"InMemoryDispersalSampler","necsim_impls_std::cogs::dispersal_sampler::in_memory","",null,null],[11,"new","","ContractsPost-condition - debug: returns …",2,[[["array2d",3]],[["result",4],["inmemorydispersalsamplererror",4]]]],[0,"rng","necsim_impls_std::cogs","",null,null],[0,"pcg","necsim_impls_std::cogs::rng","",null,null],[3,"Pcg","necsim_impls_std::cogs::rng::pcg","",null,null],[0,"std","necsim_impls_std::cogs::rng","",null,null],[3,"StdRng","necsim_impls_std::cogs::rng::std","",null,null],[0,"event_log","necsim_impls_std","",null,null],[0,"recorder","necsim_impls_std::event_log","",null,null],[3,"EventLogRecorder","necsim_impls_std::event_log::recorder","",null,null],[11,"try_new","","ErrorsFails to construct iff <code>path</code> is not a writable …",3,[[["path",3]],["result",6]]],[11,"directory","","",3,[[],["path",3]]],[11,"set_event_filter","","",3,[[["bool",15]]]],[11,"record_speciation","","",3,[[["speciationevent",3]]]],[11,"record_dispersal","","",3,[[["dispersalevent",3]]]],[0,"replay","necsim_impls_std::event_log","",null,null],[0,"segment","necsim_impls_std::event_log::replay","",null,null],[3,"SortedSegment","necsim_impls_std::event_log::replay::segment","",null,null],[11,"try_new","","ErrorsFails if the path cannot be read as an event log …",4,[[["usize",15],["path",3]],["result",6]]],[11,"header","","",4,[[],["eventlogheader",3]]],[11,"length","","",4,[[],["usize",15]]],[3,"EventLogReplay","necsim_impls_std::event_log::replay","",null,null],[11,"length","","",5,[[],["usize",15]]],[11,"with_speciation","","",5,[[],["bool",15]]],[11,"with_dispersal","","",5,[[],["bool",15]]],[3,"EventLogHeader","necsim_impls_std::event_log","",null,null],[11,"new","","",6,[[["usize",15],["positivef64",3],["bool",15]]]],[11,"min_time","","",6,[[],["positivef64",3]]],[11,"max_time","","",6,[[],["positivef64",3]]],[11,"length","","",6,[[],["usize",15]]],[11,"with_speciation","","",6,[[],["bool",15]]],[11,"with_dispersal","","",6,[[],["bool",15]]],[11,"from","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"peek_optional_time_of_next_event","","",0,[[],[["option",4],["positivef64",3]]]],[11,"peek_optional_time_of_next_event","","",0,[[],[["option",4],["positivef64",3]]]],[11,"vzip","","",0,[[]]],[11,"from","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","necsim_impls_std::cogs::rng::pcg","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","necsim_impls_std::cogs::rng::std","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"vzip","","",8,[[]]],[11,"from","necsim_impls_std::event_log::recorder","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","necsim_impls_std::event_log::replay::segment","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"equivalent","","",4,[[],["bool",15]]],[11,"vzip","","",4,[[]]],[11,"from","necsim_impls_std::event_log::replay","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","necsim_impls_std::event_log","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"equivalent","","",6,[[],["bool",15]]],[11,"vzip","","",6,[[]]],[11,"drop","necsim_impls_std::event_log::recorder","",3,[[]]],[11,"next","necsim_impls_std::event_log::replay::segment","",4,[[],["option",4]]],[11,"next","necsim_impls_std::event_log::replay","",5,[[],["option",4]]],[11,"clone","necsim_impls_std::cogs::rng::pcg","",7,[[]]],[11,"clone","necsim_impls_std::cogs::rng::std","",8,[[],["stdrng",3]]],[11,"cmp","necsim_impls_std::event_log::replay::segment","",4,[[],["ordering",4]]],[11,"eq","","",4,[[],["bool",15]]],[11,"eq","necsim_impls_std::event_log","",6,[[["eventlogheader",3]],["bool",15]]],[11,"ne","","",6,[[["eventlogheader",3]],["bool",15]]],[11,"partial_cmp","necsim_impls_std::event_log::replay::segment","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","necsim_impls_std::event_log","",6,[[],[["option",4],["ordering",4]]]],[11,"fmt","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::rng::pcg","",7,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::rng::std","",8,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log::recorder","",3,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log::replay::segment","",4,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log::replay","",5,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::event_log","",6,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","",1,[[["formatter",3]],["result",6]]],[11,"try_from","necsim_impls_std::event_log::recorder","",3,[[["pathbuf",3]],["result",6]]],[11,"try_from","necsim_impls_std::event_log::replay","",5,[[["vec",3],["globbedsortedsegments",3]],["result",4]]],[11,"deserialize","necsim_impls_std::event_log::recorder","",3,[[],["result",4]]],[11,"deserialize","necsim_impls_std::event_log::replay","",5,[[],["result",4]]],[11,"deserialize","necsim_impls_std::event_log","",6,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",0,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_std::cogs::rng::pcg","",7,[[]]],[11,"__contracts_impl_backup_unchecked","necsim_impls_std::cogs::rng::std","",8,[[]]],[11,"from_seed","necsim_impls_std::cogs::rng::pcg","",7,[[]]],[11,"sample_u64","","",7,[[],["u64",15]]],[11,"from_seed","necsim_impls_std::cogs::rng::std","",8,[[]]],[11,"sample_u64","","",8,[[],["u64",15]]],[11,"split","necsim_impls_std::cogs::rng::pcg","",7,[[]]],[11,"split_to_stream","","",7,[[["u64",15]]]],[11,"__contracts_impl_number_active_lineages","necsim_impls_std::cogs::active_lineage_sampler::gillespie","",0,[[],["usize",15]]],[11,"__contracts_impl_get_last_event_time","","",0,[[],["nonnegativef64",3]]],[11,"__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","","",0,[[["partialsimulation",3]],["option",4]]],[11,"__contracts_impl_push_active_lineage_to_indexed_location","","ContractsPre-condition - debug: location has habitat …",0,[[["partialsimulation",3],["positivef64",3],["indexedlocation",3]]]],[11,"__contracts_impl_insert_new_lineage_to_indexed_location","","",0,[[["partialsimulation",3],["positivef64",3],["globallineagereference",3],["indexedlocation",3]]]],[11,"__contracts_impl_peek_time_of_next_event","","",0,[[],[["emptyactivelineagesamplererror",3],["positivef64",3],["result",4]]]]],"p":[[3,"GillespieActiveLineageSampler"],[4,"InMemoryDispersalSamplerError"],[8,"InMemoryDispersalSampler"],[3,"EventLogRecorder"],[3,"SortedSegment"],[3,"EventLogReplay"],[3,"EventLogHeader"],[3,"Pcg"],[3,"StdRng"]]},\
"necsim_partitioning_core":{"doc":"","i":[[0,"context","necsim_partitioning_core","",null,null],[8,"ReporterContext","necsim_partitioning_core::context","",null,null],[16,"Reporter","","",0,null],[10,"try_build","","ErrorsReturn any error which occured while building the …",0,[[],[["filteredreporter",3],["result",6]]]],[0,"iterator","necsim_partitioning_core","",null,null],[3,"ImmigrantPopIterator","necsim_partitioning_core::iterator","",null,null],[11,"new","","",1,[[["vec",3]]]],[8,"Partitioning","necsim_partitioning_core","",null,null],[16,"LocalPartition","","",2,null],[16,"Auxiliary","","",2,null],[11,"is_monolithic","","",2,[[],["bool",15]]],[11,"is_root","","ContractsPost-condition - debug: monolithic partition is …",2,[[],["bool",15]]],[11,"get_number_of_partitions","","ContractsPost-condition - debug: there is only one …",2,[[],["nonzerou32",3]]],[11,"get_rank","","ContractsPost-condition - debug: rank is in range [0, …",2,[[],["u32",15]]],[11,"into_local_partition","","",2,[[["reportercontext",8]],["result",6]]],[4,"MigrationMode","","",null,null],[13,"Force","","",3,null],[13,"Default","","",3,null],[13,"Hold","","",3,null],[8,"LocalPartition","","",null,null],[16,"Reporter","","",4,null],[16,"IsLive","","",4,null],[16,"ImmigrantIterator","","",4,null],[11,"get_reporter","","",4,[[]]],[11,"is_root","","",4,[[],["bool",15]]],[11,"get_partition_rank","","ContractsPost-condition - debug: partition rank is in …",4,[[],["u32",15]]],[11,"get_number_of_partitions","","",4,[[],["nonzerou32",3]]],[11,"migrate_individuals","","",4,[[["migrationmode",4]]]],[11,"reduce_vote_continue","","",4,[[["bool",15]],["bool",15]]],[11,"reduce_vote_min_time","","",4,[[["positivef64",3]],[["result",4],["positivef64",3]]]],[11,"wait_for_termination","","",4,[[],["bool",15]]],[11,"reduce_global_time_steps","","",4,[[["nonnegativef64",3],["u64",15]]]],[11,"report_progress_sync","","",4,[[["u64",15]]]],[11,"finalise_reporting","","",4,[[]]],[11,"borrow","necsim_partitioning_core::iterator","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"into_iter","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","necsim_partitioning_core","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"next","necsim_partitioning_core::iterator","",1,[[],["option",4]]],[11,"clone","necsim_partitioning_core","",3,[[],["migrationmode",4]]]],"p":[[8,"ReporterContext"],[3,"ImmigrantPopIterator"],[8,"Partitioning"],[4,"MigrationMode"],[8,"LocalPartition"]]},\
"necsim_partitioning_monolithic":{"doc":"","i":[[0,"live","necsim_partitioning_monolithic","",null,null],[3,"LiveMonolithicPartitioning","necsim_partitioning_monolithic::live","",null,null],[3,"LiveMonolithicLocalPartition","","",null,null],[11,"from_reporter","","",0,[[["true",3],["filteredreporter",3]]]],[11,"try_from_context","","ErrorsReturns any error which occured while building the …",0,[[["reportercontext",8]],["result",6]]],[0,"recorded","necsim_partitioning_monolithic","",null,null],[3,"RecordedMonolithicLocalPartition","necsim_partitioning_monolithic::recorded","",null,null],[11,"try_from_context_and_recorder","","ErrorsReturns any error which occured while building the …",1,[[["reportercontext",8],["eventlogrecorder",3]],["result",6]]],[11,"from","necsim_partitioning_monolithic::live","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","necsim_partitioning_monolithic::recorded","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"default","necsim_partitioning_monolithic::live","",2,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_partitioning_monolithic::recorded","",1,[[["formatter",3]],["result",6]]],[11,"report_speciation","","",1,[[["maybeused",3]]]],[11,"report_dispersal","","",1,[[["maybeused",3]]]],[11,"report_progress","","",1,[[["maybeused",3]]]],[11,"__contracts_impl_is_monolithic","necsim_partitioning_monolithic::live","",2,[[],["bool",15]]],[11,"__contracts_impl_is_root","","",2,[[],["bool",15]]],[11,"__contracts_impl_get_number_of_partitions","","",2,[[],["nonzerou32",3]]],[11,"__contracts_impl_get_rank","","",2,[[],["u32",15]]],[11,"__contracts_impl_into_local_partition","","",2,[[["reportercontext",8]],["result",6]]],[11,"__contracts_impl_get_reporter","","",0,[[]]],[11,"__contracts_impl_is_root","","",0,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",0,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",0,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",0,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",0,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",0,[[["positivef64",3]],[["result",4],["positivef64",3]]]],[11,"__contracts_impl_wait_for_termination","","",0,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",0,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",0,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",0,[[]]],[11,"__contracts_impl_get_reporter","necsim_partitioning_monolithic::recorded","",1,[[]]],[11,"__contracts_impl_is_root","","",1,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",1,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",1,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",1,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",1,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",1,[[["positivef64",3]],[["positivef64",3],["result",6]]]],[11,"__contracts_impl_wait_for_termination","","",1,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",1,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",1,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",1,[[]]]],"p":[[3,"LiveMonolithicLocalPartition"],[3,"RecordedMonolithicLocalPartition"],[3,"LiveMonolithicPartitioning"]]},\
"necsim_partitioning_mpi":{"doc":"","i":[[4,"MpiLocalPartition","necsim_partitioning_mpi","",null,null],[13,"LiveMonolithic","","",0,null],[13,"RecordedMonolithic","","",0,null],[13,"Root","","",0,null],[13,"Parallel","","",0,null],[3,"MpiParallelPartition","","",null,null],[3,"MpiRootPartition","","",null,null],[4,"MpiPartitioningError","","",null,null],[13,"AlreadyInitialised","","",1,null],[4,"MpiLocalPartitionError","","",null,null],[13,"MissingEventLog","","",2,null],[3,"MpiPartitioning","","",null,null],[11,"initialise","","ErrorsReturns <code>AlreadyInitialised</code> if MPI was already …",3,[[],[["result",4],["mpipartitioningerror",4]]]],[11,"update_message_buffer_size","","",3,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"drop","","",4,[[]]],[11,"drop","","",5,[[]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"report_speciation","","",4,[[["maybeused",3]]]],[11,"report_dispersal","","",4,[[["maybeused",3]]]],[11,"report_progress","","",4,[[["maybeused",3]]]],[11,"report_speciation","","",5,[[["maybeused",3]]]],[11,"report_dispersal","","",5,[[["maybeused",3]]]],[11,"report_progress","","",5,[[["maybeused",3]]]],[11,"report_speciation","","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"__contracts_impl_get_reporter","","",4,[[]]],[11,"__contracts_impl_is_root","","",4,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",4,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",4,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",4,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",4,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",4,[[["positivef64",3]],[["positivef64",3],["result",4]]]],[11,"__contracts_impl_wait_for_termination","","",4,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",4,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",4,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",4,[[]]],[11,"__contracts_impl_get_reporter","","",5,[[]]],[11,"__contracts_impl_is_root","","",5,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",5,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",5,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",5,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",5,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",5,[[["positivef64",3]],[["positivef64",3],["result",4]]]],[11,"__contracts_impl_wait_for_termination","","",5,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",5,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",5,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",5,[[]]],[11,"__contracts_impl_get_reporter","","",0,[[]]],[11,"__contracts_impl_is_root","","",0,[[],["bool",15]]],[11,"__contracts_impl_get_partition_rank","","",0,[[],["u32",15]]],[11,"__contracts_impl_get_number_of_partitions","","",0,[[],["nonzerou32",3]]],[11,"__contracts_impl_migrate_individuals","","",0,[[["migrationmode",4]]]],[11,"__contracts_impl_reduce_vote_continue","","",0,[[["bool",15]],["bool",15]]],[11,"__contracts_impl_reduce_vote_min_time","","",0,[[["positivef64",3]],[["positivef64",3],["result",4]]]],[11,"__contracts_impl_wait_for_termination","","",0,[[],["bool",15]]],[11,"__contracts_impl_reduce_global_time_steps","","",0,[[["nonnegativef64",3],["u64",15]]]],[11,"__contracts_impl_report_progress_sync","","",0,[[["u64",15]]]],[11,"__contracts_impl_finalise_reporting","","",0,[[]]],[11,"__contracts_impl_is_monolithic","","",3,[[],["bool",15]]],[11,"__contracts_impl_is_root","","",3,[[],["bool",15]]],[11,"__contracts_impl_get_number_of_partitions","","",3,[[],["nonzerou32",3]]],[11,"__contracts_impl_get_rank","","",3,[[],["u32",15]]],[11,"__contracts_impl_into_local_partition","","ErrorsReturns <code>MissingEventLog</code> if the local partition is …",3,[[["reportercontext",8]],["result",6]]],[11,"new","","",4,[[["systemcommunicator",3],["universe",3],["eventlogrecorder",3]]]],[11,"new","","",5,[[["universe",3],["eventlogrecorder",3],["systemcommunicator",3],["true",3],["false",3],["filteredreporter",3]]]]],"p":[[4,"MpiLocalPartition"],[4,"MpiPartitioningError"],[4,"MpiLocalPartitionError"],[3,"MpiPartitioning"],[3,"MpiParallelPartition"],[3,"MpiRootPartition"]]},\
"necsim_plugins_common":{"doc":"","i":[[0,"biodiversity","necsim_plugins_common","",null,null],[3,"BiodiversityReporter","necsim_plugins_common::biodiversity","",null,null],[0,"event_counter","necsim_plugins_common","",null,null],[3,"EventCounterReporter","necsim_plugins_common::event_counter","",null,null],[0,"execution_time","necsim_plugins_common","",null,null],[3,"ExecutionTimeReporter","necsim_plugins_common::execution_time","",null,null],[0,"progress","necsim_plugins_common","",null,null],[3,"ProgressReporter","necsim_plugins_common::progress","",null,null],[0,"verbose","necsim_plugins_common","",null,null],[3,"VerboseReporter","necsim_plugins_common::verbose","",null,null],[11,"from","necsim_plugins_common::biodiversity","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","necsim_plugins_common::event_counter","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","necsim_plugins_common::execution_time","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","necsim_plugins_common::progress","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"from","necsim_plugins_common::verbose","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"drop","necsim_plugins_common::progress","",3,[[]]],[11,"default","necsim_plugins_common::biodiversity","ContractsPost-condition - debug: biodiversity initialised …",0,[[]]],[11,"default","necsim_plugins_common::event_counter","",1,[[]]],[11,"default","necsim_plugins_common::execution_time","ContractsPost-condition - debug: initialises start_time …",2,[[]]],[11,"default","necsim_plugins_common::progress","",3,[[]]],[11,"default","necsim_plugins_common::verbose","",4,[[]]],[11,"fmt","necsim_plugins_common::biodiversity","",0,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::event_counter","",1,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::execution_time","",2,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::progress","",3,[[["formatter",3]],["result",6]]],[11,"fmt","necsim_plugins_common::verbose","",4,[[["formatter",3]],["result",6]]],[11,"deserialize","necsim_plugins_common::biodiversity","",0,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::event_counter","",1,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::execution_time","",2,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::progress","",3,[[["deserializer",8]],["result",4]]],[11,"deserialize","necsim_plugins_common::verbose","",4,[[["deserializer",8]],["result",4]]],[11,"report_speciation","necsim_plugins_common::biodiversity","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]],[11,"report_speciation","necsim_plugins_common::event_counter","",1,[[["maybeused",3]]]],[11,"report_dispersal","","",1,[[["maybeused",3]]]],[11,"report_progress","","",1,[[["maybeused",3]]]],[11,"finalise","","",1,[[]]],[11,"finalise_boxed","","",1,[[["box",3]]]],[11,"report_speciation","necsim_plugins_common::execution_time","",2,[[["maybeused",3]]]],[11,"report_dispersal","","",2,[[["maybeused",3]]]],[11,"report_progress","","ContractsPost-condition - debug: start_time is set after …",2,[[["maybeused",3]]]],[11,"finalise","","",2,[[]]],[11,"finalise_boxed","","",2,[[["box",3]]]],[11,"initialise","","",2,[[],[["string",3],["result",4]]]],[11,"report_speciation","necsim_plugins_common::progress","",3,[[["maybeused",3]]]],[11,"report_dispersal","","",3,[[["maybeused",3]]]],[11,"report_progress","","",3,[[["maybeused",3]]]],[11,"finalise","","",3,[[]]],[11,"finalise_boxed","","",3,[[["box",3]]]],[11,"initialise","","",3,[[],[["string",3],["result",4]]]],[11,"report_speciation","necsim_plugins_common::verbose","",4,[[["maybeused",3]]]],[11,"report_dispersal","","",4,[[["maybeused",3]]]],[11,"report_progress","","",4,[[["maybeused",3]]]]],"p":[[3,"BiodiversityReporter"],[3,"EventCounterReporter"],[3,"ExecutionTimeReporter"],[3,"ProgressReporter"],[3,"VerboseReporter"]]},\
"necsim_plugins_core":{"doc":"","i":[[0,"export","necsim_plugins_core","",null,null],[3,"ReporterPluginDeclaration","necsim_plugins_core::export","",null,null],[12,"rustc_version","","",0,null],[12,"core_version","","",0,null],[12,"init","","",0,null],[12,"deserialise","","",0,null],[12,"drop","","",0,null],[3,"ReporterPluginFilter","","",null,null],[11,"from_reporter","","",1,[[]]],[3,"UnsafeReporterPlugin","","",null,null],[0,"import","necsim_plugins_core","",null,null],[3,"ReporterPluginLibrary","necsim_plugins_core::import","",null,null],[4,"AnyReporterPluginVec","","",null,null],[13,"IgnoreSpeciationIgnoreDispersalIgnoreProgress","","",2,null],[13,"IgnoreSpeciationIgnoreDispersalReportProgress","","",2,null],[13,"IgnoreSpeciationReportDispersalIgnoreProgress","","",2,null],[13,"IgnoreSpeciationReportDispersalReportProgress","","",2,null],[13,"ReportSpeciationIgnoreDispersalIgnoreProgress","","",2,null],[13,"ReportSpeciationIgnoreDispersalReportProgress","","",2,null],[13,"ReportSpeciationReportDispersalIgnoreProgress","","",2,null],[13,"ReportSpeciationReportDispersalReportProgress","","",2,null],[3,"ReporterPluginVec","","",null,null],[3,"ReporterPlugin","","",null,null],[7,"CORE_VERSION","necsim_plugins_core","",null,null],[7,"RUSTC_VERSION","","",null,null],[14,"export_plugin","","",null,null],[14,"match_any_reporter_plugin_vec","","",null,null],[11,"from","necsim_plugins_core::export","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"from","necsim_plugins_core::import","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"drop","","",5,[[]]],[11,"from","necsim_plugins_core::export","",3,[[]]],[11,"into_iter","necsim_plugins_core::import","",6,[[]]],[11,"clone","necsim_plugins_core::export","",1,[[],["reporterpluginfilter",3]]],[11,"fmt","necsim_plugins_core::import","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"from_iter","","",2,[[["intoiterator",8]]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"report_speciation","","",4,[[["maybeused",3]]]],[11,"report_dispersal","","",4,[[["maybeused",3]]]],[11,"report_progress","","",4,[[["maybeused",3]]]],[11,"finalise","","",4,[[]]],[11,"finalise_boxed","","",4,[[["box",3]]]],[11,"initialise","","",4,[[],[["string",3],["result",4]]]],[11,"internal_filter","","",4,[[]]],[11,"library","","",6,[[],["library",3]]]],"p":[[3,"ReporterPluginDeclaration"],[3,"ReporterPluginFilter"],[4,"AnyReporterPluginVec"],[3,"UnsafeReporterPlugin"],[3,"ReporterPluginVec"],[3,"ReporterPlugin"],[3,"ReporterPluginLibrary"]]},\
"necsim_plugins_csv":{"doc":"","i":[[3,"CsvReporter","necsim_plugins_csv","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"report_speciation","","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]],[11,"initialise","","",0,[[],[["result",4],["string",3]]]]],"p":[[3,"CsvReporter"]]},\
"necsim_plugins_metacommunity":{"doc":"","i":[[3,"MetacommunityMigrationReporter","necsim_plugins_metacommunity","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"report_speciation","","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]]],"p":[[3,"MetacommunityMigrationReporter"]]},\
"necsim_plugins_species":{"doc":"","i":[[3,"SpeciesLocationsReporter","necsim_plugins_species","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"report_speciation","","",0,[[["maybeused",3]]]],[11,"report_dispersal","","",0,[[["maybeused",3]]]],[11,"report_progress","","",0,[[["maybeused",3]]]],[11,"finalise","","",0,[[]]],[11,"finalise_boxed","","",0,[[["box",3]]]],[11,"initialise","","",0,[[],[["string",3],["result",4]]]]],"p":[[3,"SpeciesLocationsReporter"]]},\
"necsim_plugins_statistics":{"doc":"","i":[],"p":[]},\
"ron":{"doc":"RON is a simple config format which looks similar to Rust …","i":[[0,"de","ron","",null,null],[3,"Position","ron::de","",null,null],[12,"line","","",0,null],[12,"col","","",0,null],[3,"Deserializer","","The RON deserializer.",null,null],[11,"from_str","","",1,[[["str",15]],["result",6]]],[11,"from_bytes","","",1,[[],["result",6]]],[11,"remainder","","",1,[[],[["str",15],["cow",4]]]],[5,"from_reader","","A convenience function for reading data from a reader and …",null,[[],["result",6]]],[5,"from_str","","A convenience function for building a deserializer and …",null,[[["str",15]],["result",6]]],[5,"from_bytes","","A convenience function for building a deserializer and …",null,[[],["result",6]]],[11,"end","","Check if the remaining bytes are whitespace only, …",1,[[],["result",6]]],[0,"ser","ron","",null,null],[5,"to_writer","ron::ser","Serializes <code>value</code> into <code>writer</code>",null,[[],["result",6]]],[5,"to_writer_pretty","","Serializes <code>value</code> into <code>writer</code> in a pretty way.",null,[[["prettyconfig",3]],["result",6]]],[5,"to_string","","Serializes <code>value</code> and returns it as string.",null,[[],[["string",3],["result",6]]]],[5,"to_string_pretty","","Serializes <code>value</code> in the recommended RON layout in a …",null,[[["prettyconfig",3]],[["string",3],["result",6]]]],[3,"PrettyConfig","","Pretty serializer configuration.",null,null],[12,"depth_limit","","Limit the pretty-ness up to the given depth.",2,null],[12,"new_line","","New line string",2,null],[12,"indentor","","Indentation string",2,null],[12,"separate_tuple_members","","Separate tuple members with indentation",2,null],[12,"enumerate_arrays","","Enumerate array items in comments",2,null],[12,"decimal_floats","","Always include the decimal in floats",2,null],[12,"extensions","","Enable extensions. Only configures ‘implicit_some’ …",2,null],[11,"new","","Creates a default <code>PrettyConfig</code>.",2,[[]]],[11,"with_depth_limit","","Limits the pretty-formatting based on the number of …",2,[[["usize",15]]]],[11,"with_new_line","","Configures the newlines used for serialization.",2,[[["string",3]]]],[11,"with_indentor","","Configures the string sequence used for indentation.",2,[[["string",3]]]],[11,"with_separate_tuple_members","","Configures whether tuples are single- or multi-line. If …",2,[[["bool",15]]]],[11,"with_enumerate_arrays","","Configures whether a comment shall be added to every …",2,[[["bool",15]]]],[11,"with_decimal_floats","","Configures whether floats should always include a decimal.…",2,[[["bool",15]]]],[11,"with_extensions","","Configures extensions",2,[[["extensions",3]]]],[3,"Serializer","","The RON serializer.",null,null],[11,"new","","Creates a new <code>Serializer</code>.",3,[[["prettyconfig",3],["option",4],["bool",15]],["result",6]]],[4,"State","","",null,null],[13,"First","","",4,null],[13,"Rest","","",4,null],[4,"Compound","","",null,null],[13,"Map","","",5,null],[12,"ser","ron::ser::Compound","",6,null],[12,"state","","",6,null],[0,"error","ron","",null,null],[3,"Position","ron::error","",null,null],[12,"line","","",0,null],[12,"col","","",0,null],[3,"Error","","This type represents all possible errors that can occur …",null,null],[12,"code","","",7,null],[12,"position","","",7,null],[6,"Result","","",null,null],[4,"ErrorCode","","",null,null],[13,"Io","","",8,null],[13,"Message","","",8,null],[13,"Base64Error","","",8,null],[13,"Eof","","",8,null],[13,"ExpectedArray","","",8,null],[13,"ExpectedArrayEnd","","",8,null],[13,"ExpectedAttribute","","",8,null],[13,"ExpectedAttributeEnd","","",8,null],[13,"ExpectedBoolean","","",8,null],[13,"ExpectedComma","","",8,null],[13,"ExpectedChar","","",8,null],[13,"ExpectedFloat","","",8,null],[13,"ExpectedInteger","","",8,null],[13,"ExpectedOption","","",8,null],[13,"ExpectedOptionEnd","","",8,null],[13,"ExpectedMap","","",8,null],[13,"ExpectedMapColon","","",8,null],[13,"ExpectedMapEnd","","",8,null],[13,"ExpectedStruct","","",8,null],[13,"ExpectedStructEnd","","",8,null],[13,"ExpectedUnit","","",8,null],[13,"ExpectedString","","",8,null],[13,"ExpectedStringEnd","","",8,null],[13,"ExpectedIdentifier","","",8,null],[13,"InvalidEscape","","",8,null],[13,"IntegerOutOfBounds","","",8,null],[13,"NoSuchExtension","","",8,null],[13,"UnclosedBlockComment","","",8,null],[13,"UnderscoreAtBeginning","","",8,null],[13,"UnexpectedByte","","",8,null],[13,"Utf8Error","","",8,null],[13,"TrailingCharacters","","",8,null],[0,"value","ron","Value module.",null,null],[3,"Map","ron::value","A <code>Value</code> to <code>Value</code> map.",null,null],[11,"new","","Creates a new, empty <code>Map</code>.",9,[[],["map",3]]],[11,"len","","Returns the number of elements in the map.",9,[[],["usize",15]]],[11,"is_empty","","Returns <code>true</code> if <code>self.len() == 0</code>, <code>false</code> otherwise.",9,[[],["usize",15]]],[11,"insert","","Inserts a new element, returning the previous element …",9,[[["value",4]],[["option",4],["value",4]]]],[11,"remove","","Removes an element by its <code>key</code>.",9,[[["value",4]],[["option",4],["value",4]]]],[11,"iter","","Iterate all key-value pairs.",9,[[]]],[11,"iter_mut","","Iterate all key-value pairs mutably.",9,[[]]],[11,"keys","","Iterate all keys.",9,[[]]],[11,"values","","Iterate all values.",9,[[]]],[11,"values_mut","","Iterate all values mutably.",9,[[]]],[4,"Number","","A wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.",null,null],[13,"Integer","","",10,null],[13,"Float","","",10,null],[3,"Float","","A wrapper for <code>f64</code>, which guarantees that the inner value …",null,null],[11,"new","","Construct a new <code>Float</code>.",11,[[["f64",15]]]],[11,"get","","Returns the wrapped float.",11,[[],["f64",15]]],[11,"new","","Construct a new number.",10,[[]]],[11,"into_f64","","Returns the <code>f64</code> representation of the number regardless …",10,[[],["f64",15]]],[11,"as_f64","","If the <code>Number</code> is a float, return it. Otherwise return <code>None</code>…",10,[[],[["f64",15],["option",4]]]],[11,"as_i64","","If the <code>Number</code> is an integer, return it. Otherwise return …",10,[[],[["i64",15],["option",4]]]],[11,"map_to","","Map this number to a single type using the appropriate …",10,[[]]],[4,"Value","","",null,null],[13,"Bool","","",12,null],[13,"Char","","",12,null],[13,"Map","","",12,null],[13,"Number","","",12,null],[13,"Option","","",12,null],[13,"String","","",12,null],[13,"Seq","","",12,null],[13,"Unit","","",12,null],[11,"into_rust","","Tries to deserialize this <code>Value</code> into <code>T</code>.",12,[[],["result",6]]],[0,"extensions","ron","",null,null],[3,"Extensions","ron::extensions","",null,null],[18,"UNWRAP_NEWTYPES","","",13,null],[18,"IMPLICIT_SOME","","",13,null],[11,"empty","","Returns an empty set of flags",13,[[],["extensions",3]]],[11,"all","","Returns the set containing all flags.",13,[[],["extensions",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",13,[[],["usize",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",13,[[["usize",15]],[["option",4],["extensions",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",13,[[["usize",15]],["extensions",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",13,[[["usize",15]],["extensions",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",13,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",13,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",13,[[["extensions",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",13,[[["extensions",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",13,[[["extensions",3]]]],[11,"remove","","Removes the specified flags in-place.",13,[[["extensions",3]]]],[11,"toggle","","Toggles the specified flags in-place.",13,[[["extensions",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",13,[[["bool",15],["extensions",3]]]],[11,"from_ident","","Creates an extension flag from an ident.",13,[[],[["extensions",3],["option",4]]]],[11,"from","ron::de","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","ron::ser","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","ron::error","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","ron::value","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","ron::extensions","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","ron::error","",8,[[["utf8error",3]]]],[11,"from","","",8,[[["fromutf8error",3]]]],[11,"from","","",7,[[["utf8error",3]]]],[11,"from","","",7,[[["error",3]]]],[11,"from","ron::value","",10,[[["f64",15]],["number",4]]],[11,"from","","",10,[[["i64",15]],["number",4]]],[11,"from","","",10,[[["i32",15]],["number",4]]],[11,"from","","",10,[[["u64",15]],["number",4]]],[11,"extend","ron::extensions","",13,[[["intoiterator",8]]]],[11,"clone","ron::ser","",2,[[],["prettyconfig",3]]],[11,"clone","ron::error","",7,[[],["error",3]]],[11,"clone","","",8,[[],["errorcode",4]]],[11,"clone","ron::value","",9,[[],["map",3]]],[11,"clone","","",10,[[],["number",4]]],[11,"clone","","",11,[[],["float",3]]],[11,"clone","","",12,[[],["value",4]]],[11,"clone","ron::extensions","",13,[[],["extensions",3]]],[11,"clone","ron::de","",0,[[],["position",3]]],[11,"default","ron::ser","",2,[[]]],[11,"default","ron::value","",9,[[],["map",3]]],[11,"default","ron::extensions","",13,[[]]],[11,"cmp","ron::value","",9,[[["map",3]],["ordering",4]]],[11,"cmp","","",10,[[["number",4]],["ordering",4]]],[11,"cmp","","",11,[[],["ordering",4]]],[11,"cmp","","",12,[[["value",4]],["ordering",4]]],[11,"cmp","ron::extensions","",13,[[["extensions",3]],["ordering",4]]],[11,"eq","ron::error","",7,[[["error",3]],["bool",15]]],[11,"ne","","",7,[[["error",3]],["bool",15]]],[11,"eq","","",8,[[["errorcode",4]],["bool",15]]],[11,"ne","","",8,[[["errorcode",4]],["bool",15]]],[11,"eq","ron::value","",9,[[["map",3]],["bool",15]]],[11,"eq","","",10,[[["number",4]],["bool",15]]],[11,"ne","","",10,[[["number",4]],["bool",15]]],[11,"eq","","",11,[[],["bool",15]]],[11,"eq","","",12,[[["value",4]],["bool",15]]],[11,"ne","","",12,[[["value",4]],["bool",15]]],[11,"eq","ron::extensions","",13,[[["extensions",3]],["bool",15]]],[11,"ne","","",13,[[["extensions",3]],["bool",15]]],[11,"eq","ron::de","",0,[[["position",3]],["bool",15]]],[11,"ne","","",0,[[["position",3]],["bool",15]]],[11,"partial_cmp","ron::value","",9,[[["map",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",10,[[["number",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",11,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",12,[[["value",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","ron::extensions","",13,[[["extensions",3]],[["option",4],["ordering",4]]]],[11,"fmt","ron::ser","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ron::error","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","ron::value","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","ron::extensions","",13,[[["formatter",3]],["result",6]]],[11,"fmt","ron::de","",0,[[["formatter",3]],["result",6]]],[11,"fmt","ron::error","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","ron::de","",0,[[["formatter",3]],["fmtresult",6]]],[11,"sub","ron::extensions","Returns the set difference of the two sets of flags.",13,[[["extensions",3]],["extensions",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",13,[[["extensions",3]]]],[11,"not","","Returns the complement of this set of flags.",13,[[],["extensions",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",13,[[["extensions",3]],["extensions",3]]],[11,"bitor","","Returns the union of the two sets of flags.",13,[[["extensions",3]],["extensions",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",13,[[["extensions",3]],["extensions",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",13,[[["extensions",3]]]],[11,"bitor_assign","","Adds the set of flags.",13,[[["extensions",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",13,[[["extensions",3]]]],[11,"index","ron::value","",9,[[["value",4]]]],[11,"index_mut","","",9,[[["value",4]]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","ron::extensions","",13,[[]]],[11,"from_str","ron::value","Creates a value from a string reference.",12,[[["str",15]],["result",6]]],[11,"from_iter","","",9,[[["intoiterator",8]]]],[11,"from_iter","ron::extensions","",13,[[["intoiterator",8]],["extensions",3]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"deserialize_bool","ron::value","",12,[[],["result",4]]],[11,"deserialize_f32","","",12,[[],["result",4]]],[11,"deserialize_f64","","",12,[[],["result",4]]],[11,"deserialize_char","","",12,[[],["result",4]]],[11,"deserialize_str","","",12,[[],["result",4]]],[11,"deserialize_string","","",12,[[],["result",4]]],[11,"deserialize_bytes","","",12,[[],["result",4]]],[11,"deserialize_byte_buf","","",12,[[],["result",4]]],[11,"deserialize_option","","",12,[[],["result",4]]],[11,"deserialize_unit","","",12,[[],["result",4]]],[11,"deserialize_unit_struct","","",12,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",12,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",12,[[],["result",4]]],[11,"deserialize_tuple","","",12,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",12,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",12,[[],["result",4]]],[11,"deserialize_struct","","",12,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",12,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",12,[[],["result",4]]],[11,"deserialize_ignored_any","","",12,[[],["result",4]]],[11,"deserialize_any","","",12,[[],["result",6]]],[11,"deserialize_i8","","",12,[[],["result",6]]],[11,"deserialize_i16","","",12,[[],["result",6]]],[11,"deserialize_i32","","",12,[[],["result",6]]],[11,"deserialize_i64","","",12,[[],["result",6]]],[11,"deserialize_u8","","",12,[[],["result",6]]],[11,"deserialize_u16","","",12,[[],["result",6]]],[11,"deserialize_u32","","",12,[[],["result",6]]],[11,"deserialize_u64","","",12,[[],["result",6]]],[11,"custom","ron::error","",7,[[["display",8]]]],[11,"serialize","ron::value","",12,[[],["result",4]]],[11,"serialize","ron::ser","",2,[[],["result",4]]],[11,"serialize","ron::value","",9,[[],["result",4]]],[11,"serialize","ron::extensions","",13,[[],["result",4]]],[11,"serialize_element","ron::ser","",5,[[],["result",6]]],[11,"end","","",5,[[],["result",6]]],[11,"serialize_key","","",5,[[],["result",6]]],[11,"serialize_value","","",5,[[],["result",6]]],[11,"end","","",5,[[],["result",6]]],[11,"serialize_element","","",5,[[],["result",6]]],[11,"end","","",5,[[],["result",6]]],[11,"serialize_field","","",5,[[["str",15]],["result",6]]],[11,"end","","",5,[[],["result",6]]],[11,"serialize_field","","",5,[[["str",15]],["result",6]]],[11,"end","","",5,[[],["result",6]]],[11,"serialize_field","","",5,[[],["result",6]]],[11,"end","","",5,[[],["result",6]]],[11,"serialize_field","","",5,[[],["result",6]]],[11,"end","","",5,[[],["result",6]]],[11,"deserialize","ron::value","",12,[[],["result",4]]],[11,"deserialize","ron::ser","",2,[[],["result",4]]],[11,"deserialize","ron::value","",9,[[],["result",4]]],[11,"deserialize","ron::extensions","",13,[[],["result",4]]],[11,"custom","ron::error","",7,[[["display",8]]]]],"p":[[3,"Position"],[3,"Deserializer"],[3,"PrettyConfig"],[3,"Serializer"],[4,"State"],[4,"Compound"],[13,"Map"],[3,"Error"],[4,"ErrorCode"],[3,"Map"],[4,"Number"],[3,"Float"],[4,"Value"],[3,"Extensions"]]},\
"rust_cuda":{"doc":"","i":[[0,"common","rust_cuda","",null,null],[24,"RustToCuda","rust_cuda::common","",null,null],[8,"RustToCuda","","SafetyThis is an internal trait and should ONLY be …",null,null],[16,"CudaRepresentation","","",0,null],[16,"CudaAllocation","","",0,null],[11,"borrow","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",0,[[["cudaalloc",8]],["cudaresult",6]]],[10,"borrow_mut","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",0,[[["cudaalloc",8]],["cudaresult",6]]],[10,"un_borrow_mut","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",0,[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]]],[8,"CudaAsRust","","SafetyThis is an internal trait and should NEVER be …",null,null],[16,"RustRepresentation","","",1,null],[3,"DeviceOwnedSlice","","",null,null],[11,"from","","",2,[[["devicebuffer",3]]]],[3,"DeviceBoxConst","","",null,null],[11,"from","","",3,[[["devicebox",3]]]],[3,"DeviceBoxMut","","",null,null],[11,"from","","",4,[[["devicebox",3]]]],[0,"host","rust_cuda","",null,null],[24,"LendToCuda","rust_cuda::host","",null,null],[8,"LendToCuda","","SafetyThis trait should ONLY be derived automatically …",null,null],[10,"lend_to_cuda","","Lends an immutable copy of <code>&self</code> to CUDA:",5,[[["fnonce",8]],["cudaresult",6]]],[10,"lend_to_cuda_mut","","Lends a mutable copy of <code>&mut self</code> to CUDA:",5,[[["fnonce",8]],["cudaresult",6]]],[8,"EmptyCudaAlloc","","",null,null],[8,"CudaAlloc","","",null,null],[3,"NullCudaAlloc","","",null,null],[3,"CombinedCudaAlloc","","",null,null],[11,"new","","",6,[[]]],[11,"split","","",6,[[]]],[3,"CudaDropWrapper","","",null,null],[3,"HostDeviceBoxMut","","",null,null],[11,"new","","",7,[[["devicebox",3]]]],[11,"for_device","","",7,[[],["deviceboxmut",3]]],[11,"for_host","","",7,[[]]],[3,"HostDeviceBoxConst","","",null,null],[11,"new","","",8,[[["devicebox",3]]]],[11,"for_device","","",8,[[],["deviceboxconst",3]]],[11,"for_host","","",8,[[]]],[0,"utils","rust_cuda","",null,null],[0,"exchange","rust_cuda::utils","",null,null],[0,"buffer","rust_cuda::utils::exchange","",null,null],[3,"CudaExchangeBuffer","rust_cuda::utils::exchange::buffer","",null,null],[0,"wrapper","rust_cuda::utils::exchange","",null,null],[3,"ExchangeWithCudaWrapper","rust_cuda::utils::exchange::wrapper","",null,null],[3,"ExchangeWithHostWrapper","","",null,null],[11,"new","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",9,[[],["cudaresult",6]]],[11,"move_to_cuda","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",9,[[],[["exchangewithhostwrapper",3],["cudaresult",6]]]],[11,"move_to_host","","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",10,[[],[["exchangewithcudawrapper",3],["cudaresult",6]]]],[11,"as_ref","","",10,[[],["hostdeviceboxconst",3]]],[11,"as_mut","","",10,[[],["hostdeviceboxmut",3]]],[11,"borrow","rust_cuda::common","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"borrow","rust_cuda::host","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"from","","",12,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"borrow","rust_cuda::utils::exchange::buffer","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"borrow","rust_cuda::utils::exchange::wrapper","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"borrow_mut","rust_cuda::utils::exchange::buffer","",13,[[["cudaalloc",8]],["cudaresult",6]]],[11,"un_borrow_mut","","",13,[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],[11,"deref","rust_cuda::host","",12,[[]]],[11,"deref","rust_cuda::utils::exchange::buffer","",13,[[]]],[11,"deref","rust_cuda::utils::exchange::wrapper","",9,[[]]],[11,"deref_mut","rust_cuda::host","",12,[[]]],[11,"deref_mut","rust_cuda::utils::exchange::buffer","",13,[[]]],[11,"deref_mut","rust_cuda::utils::exchange::wrapper","",9,[[]]],[11,"fmt","rust_cuda::common","",2,[[["formatter",3]],["result",6]]],[11,"drop","rust_cuda::host","",12,[[]]],[11,"from","","",12,[[]]],[11,"clone","rust_cuda::common","",3,[[]]],[11,"new","rust_cuda::utils::exchange::buffer","ErrorsReturns a <code>rustacuda::errors::CudaError</code> iff an error …",13,[[["usize",15]],["cudaresult",6]]]],"p":[[8,"RustToCuda"],[8,"CudaAsRust"],[3,"DeviceOwnedSlice"],[3,"DeviceBoxConst"],[3,"DeviceBoxMut"],[8,"LendToCuda"],[3,"CombinedCudaAlloc"],[3,"HostDeviceBoxMut"],[3,"HostDeviceBoxConst"],[3,"ExchangeWithCudaWrapper"],[3,"ExchangeWithHostWrapper"],[3,"NullCudaAlloc"],[3,"CudaDropWrapper"],[3,"CudaExchangeBuffer"]]},\
"rustacuda":{"doc":"This crate provides a safe, user-friendly wrapper around …","i":[[0,"context","rustacuda","CUDA context managementMost CUDA functions require a …",null,null],[4,"CacheConfig","rustacuda::context","This enumeration represents configuration settings for …",null,null],[13,"PreferNone","","No preference for shared memory or L1 (default)",0,null],[13,"PreferShared","","Prefer larger shared memory and smaller L1 cache",0,null],[13,"PreferL1","","Prefer larger L1 cache and smaller shared memory",0,null],[13,"PreferEqual","","Prefer equal-sized L1 cache and shared memory",0,null],[4,"ResourceLimit","","This enumeration represents the limited resources which …",null,null],[13,"StackSize","","The size in bytes of each GPU thread stack",1,null],[13,"PrintfFifoSize","","The size in bytes of the FIFO used by the <code>printf()</code> device …",1,null],[13,"MallocHeapSize","","The size in bytes of the heap used by the <code>malloc()</code> and …",1,null],[13,"DeviceRuntimeSynchronizeDepth","","The maximum nesting depth of a grid at which a thread can …",1,null],[13,"DeviceRuntimePendingLaunchCount","","The maximum number of outstanding device runtime launches …",1,null],[13,"MaxL2FetchGranularity","","L2 cache fetch granularity",1,null],[4,"SharedMemoryConfig","","This enumeration represents the options for configuring …",null,null],[13,"DefaultBankSize","","Set shared-memory bank size to the default.",2,null],[13,"FourByteBankSize","","Set shared-memory bank width to four bytes",2,null],[13,"EightByteBankSize","","Set shared-memory bank width to eight bytes",2,null],[3,"ContextFlags","","Bit flags for initializing the CUDA context.",null,null],[18,"SCHED_SPIN","","Instructs CUDA to actively spin when waiting for results …",3,null],[18,"SCHED_YIELD","","Instructs CUDA to yield its thread when waiting for …",3,null],[18,"SCHED_BLOCKING_SYNC","","Instructs CUDA to block the CPU thread on a …",3,null],[18,"SCHED_AUTO","","Instructs CUDA to automatically choose whether to yield …",3,null],[18,"MAP_HOST","","Instructs CUDA to support mapped pinned allocations. This …",3,null],[18,"LMEM_RESIZE_TO_MAX","","Instruct CUDA not to reduce local memory after resizing …",3,null],[11,"empty","","Returns an empty set of flags",3,[[],["contextflags",3]]],[11,"all","","Returns the set containing all flags.",3,[[],["contextflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",3,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",3,[[["u32",15]],[["option",4],["contextflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",3,[[["u32",15]],["contextflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",3,[[["u32",15]],["contextflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",3,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",3,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",3,[[["contextflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",3,[[["contextflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",3,[[["contextflags",3]]]],[11,"remove","","Removes the specified flags in-place.",3,[[["contextflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",3,[[["contextflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",3,[[["bool",15],["contextflags",3]]]],[3,"Context","","Owned handle to a CUDA context.",null,null],[11,"create_and_push","","Create a CUDA context for the given device.",4,[[["device",3],["contextflags",3]],[["cudaresult",6],["context",3]]]],[11,"get_api_version","","Get the API version used to create this context.",4,[[],[["cudaapiversion",3],["cudaresult",6]]]],[11,"get_unowned","","Returns an non-owning handle to this context.",4,[[],["unownedcontext",3]]],[11,"drop","","Destroy a <code>Context</code>, returning an error.",4,[[["context",3]],[["context",3],["dropresult",6]]]],[8,"ContextHandle","","Sealed trait for <code>Context</code> and <code>UnownedContext</code>. Not intended …",null,null],[3,"UnownedContext","","Non-owning handle to a CUDA context.",null,null],[11,"get_api_version","","Get the API version used to create this context.",5,[[],[["cudaapiversion",3],["cudaresult",6]]]],[3,"ContextStack","","Type used to represent the thread-local context stack.",null,null],[11,"pop","","Pop the current context off the stack and return the …",6,[[],[["unownedcontext",3],["cudaresult",6]]]],[11,"push","","Push the given context to the top of the stack",6,[[],["cudaresult",6]]],[3,"StreamPriorityRange","","Struct representing a range of stream priorities.",null,null],[12,"least","","The least stream priority",7,null],[12,"greatest","","The greatest stream priority",7,null],[3,"CurrentContext","","Type representing the top context in the thread-local …",null,null],[11,"get_cache_config","","Returns the preferred cache configuration for the current …",8,[[],[["cudaresult",6],["cacheconfig",4]]]],[11,"get_device","","Return the device ID for the current context.",8,[[],[["device",3],["cudaresult",6]]]],[11,"get_flags","","Return the context flags for the current context.",8,[[],[["contextflags",3],["cudaresult",6]]]],[11,"get_resource_limit","","Return resource limits for the current context.",8,[[["resourcelimit",4]],[["usize",15],["cudaresult",6]]]],[11,"get_shared_memory_config","","Return resource limits for the current context.",8,[[],[["cudaresult",6],["sharedmemoryconfig",4]]]],[11,"get_stream_priority_range","","Return the least and greatest stream priorities.",8,[[],[["cudaresult",6],["streampriorityrange",3]]]],[11,"set_cache_config","","Sets the preferred cache configuration for the current …",8,[[["cacheconfig",4]],["cudaresult",6]]],[11,"set_resource_limit","","Sets a requested resource limit for the current context.",8,[[["resourcelimit",4],["usize",15]],["cudaresult",6]]],[11,"set_shared_memory_config","","Sets the preferred shared memory configuration for the …",8,[[["sharedmemoryconfig",4]],["cudaresult",6]]],[11,"get_current","","Returns a non-owning handle to the current context.",8,[[],[["unownedcontext",3],["cudaresult",6]]]],[11,"set_current","","Set the given context as the current context for this …",8,[[],["cudaresult",6]]],[11,"synchronize","","Block to wait for a context’s tasks to complete.",8,[[],["cudaresult",6]]],[0,"device","rustacuda","Functions and types for enumerating CUDA devices and …",null,null],[4,"DeviceAttribute","rustacuda::device","All supported device attributes for Device::get_attribute",null,null],[13,"MaxThreadsPerBlock","","Maximum number of threads per block",9,null],[13,"MaxBlockDimX","","Maximum x-dimension of a block",9,null],[13,"MaxBlockDimY","","Maximum y-dimension of a block",9,null],[13,"MaxBlockDimZ","","Maximum z-dimension of a block",9,null],[13,"MaxGridDimX","","Maximum x-dimension of a grid",9,null],[13,"MaxGridDimY","","Maximum y-dimension of a grid",9,null],[13,"MaxGridDimZ","","Maximum z-dimension of a grid",9,null],[13,"MaxSharedMemoryPerBlock","","Maximum amount of shared memory available to a thread …",9,null],[13,"TotalConstantMemory","","Memory available on device for constant variables in a …",9,null],[13,"WarpSize","","Warp size in threads",9,null],[13,"MaxPitch","","Maximum pitch in bytes allowed by the memory copy …",9,null],[13,"MaxRegistersPerBlock","","Maximum number of 32-bit registers available to a thread …",9,null],[13,"ClockRate","","Typical clock frequency in kilohertz",9,null],[13,"TextureAlignment","","Alignment requirement for textures",9,null],[13,"MultiprocessorCount","","Number of multiprocessors on device.",9,null],[13,"KernelExecTimeout","","Specifies whether there is a run time limit on kernels",9,null],[13,"Integrated","","Device is integrated with host memory",9,null],[13,"CanMapHostMemory","","Device can map host memory into CUDA address space",9,null],[13,"ComputeMode","","Compute Mode",9,null],[13,"MaximumTexture1DWidth","","Maximum 1D texture width",9,null],[13,"MaximumTexture2DWidth","","Maximum 2D texture width",9,null],[13,"MaximumTexture2DHeight","","Maximum 2D texture height",9,null],[13,"MaximumTexture3DWidth","","Maximum 3D texture width",9,null],[13,"MaximumTexture3DHeight","","Maximum 3D texture height",9,null],[13,"MaximumTexture3DDepth","","Maximum 3D texture depth",9,null],[13,"MaximumTexture2DLayeredWidth","","Maximum 2D layered texture width",9,null],[13,"MaximumTexture2DLayeredHeight","","Maximum 2D layered texture height",9,null],[13,"MaximumTexture2DLayeredLayers","","Maximum layers in a 2D layered texture",9,null],[13,"SurfaceAlignment","","Alignment requirement for surfaces",9,null],[13,"ConcurrentKernels","","Device can possibly execute multiple kernels concurrently",9,null],[13,"EccEnabled","","Device has ECC support enabled",9,null],[13,"PciBusId","","PCI bus ID of the device",9,null],[13,"PciDeviceId","","PCI device ID of the device",9,null],[13,"TccDriver","","Device is using TCC driver model",9,null],[13,"MemoryClockRate","","Peak memory clock frequency in kilohertz",9,null],[13,"GlobalMemoryBusWidth","","Global memory bus width in bits",9,null],[13,"L2CacheSize","","Size of L2 cache in bytes.",9,null],[13,"MaxThreadsPerMultiprocessor","","Maximum resident threads per multiprocessor",9,null],[13,"AsyncEngineCount","","Number of asynchronous engines",9,null],[13,"UnifiedAddressing","","Device shares a unified address space with the host",9,null],[13,"MaximumTexture1DLayeredWidth","","Maximum 1D layered texture width",9,null],[13,"MaximumTexture1DLayeredLayers","","Maximum layers in a 1D layered texture",9,null],[13,"MaximumTexture2DGatherWidth","","Maximum 2D texture width if CUDA_ARRAY3D_TEXTURE_GATHER …",9,null],[13,"MaximumTexture2DGatherHeight","","Maximum 2D texture height if CUDA_ARRAY3D_TEXTURE_GATHER …",9,null],[13,"MaximumTexture3DWidthAlternate","","Alternate maximum 3D texture width",9,null],[13,"MaximumTexture3DHeightAlternate","","Alternate maximum 3D texture height",9,null],[13,"MaximumTexture3DDepthAlternate","","Alternate maximum 3D texture depth",9,null],[13,"PciDomainId","","PCI domain ID of the device",9,null],[13,"TexturePitchAlignment","","Pitch alignment requirement for textures",9,null],[13,"MaximumTextureCubemapWidth","","Maximum cubemap texture width/height",9,null],[13,"MaximumTextureCubemapLayeredWidth","","Maximum cubemap layered texture width/height",9,null],[13,"MaximumTextureCubemapLayeredLayers","","Maximum layers in a cubemap layered texture",9,null],[13,"MaximumSurface1DWidth","","Maximum 1D surface width",9,null],[13,"MaximumSurface2DWidth","","Maximum 2D surface width",9,null],[13,"MaximumSurface2DHeight","","Maximum 2D surface height",9,null],[13,"MaximumSurface3DWidth","","Maximum 3D surface width",9,null],[13,"MaximumSurface3DHeight","","Maximum 3D surface height",9,null],[13,"MaximumSurface3DDepth","","Maximum 3D surface depth",9,null],[13,"MaximumSurface1DLayeredWidth","","Maximum 1D layered surface width",9,null],[13,"MaximumSurface1DLayeredLayers","","Maximum layers in a 1D layered surface",9,null],[13,"MaximumSurface2DLayeredWidth","","Maximum 2D layered surface width",9,null],[13,"MaximumSurface2DLayeredHeight","","Maximum 2D layered surface height",9,null],[13,"MaximumSurface2DLayeredLayers","","Maximum layers in a 2D layered surface",9,null],[13,"MaximumSurfacecubemapWidth","","Maximum cubemap surface width",9,null],[13,"MaximumSurfacecubemapLayeredWidth","","Maximum cubemap layered surface width",9,null],[13,"MaximumSurfacecubemapLayeredLayers","","Maximum layers in a cubemap layered surface",9,null],[13,"MaximumTexture1DLinearWidth","","Maximum 1D linear texture width",9,null],[13,"MaximumTexture2DLinearWidth","","Maximum 2D linear texture width",9,null],[13,"MaximumTexture2DLinearHeight","","Maximum 2D linear texture height",9,null],[13,"MaximumTexture2DLinearPitch","","Maximum 2D linear texture pitch in bytes",9,null],[13,"MaximumTexture2DMipmappedWidth","","Maximum mipmapped 2D texture height",9,null],[13,"MaximumTexture2DMipmappedHeight","","Maximum mipmapped 2D texture width",9,null],[13,"ComputeCapabilityMajor","","Major compute capability version number",9,null],[13,"ComputeCapabilityMinor","","Minor compute capability version number",9,null],[13,"MaximumTexture1DMipmappedWidth","","Maximum mipammed 1D texture width",9,null],[13,"StreamPrioritiesSupported","","Device supports stream priorities",9,null],[13,"GlobalL1CacheSupported","","Device supports caching globals in L1",9,null],[13,"LocalL1CacheSupported","","Device supports caching locals in L1",9,null],[13,"MaxSharedMemoryPerMultiprocessor","","Maximum shared memory available per multiprocessor in …",9,null],[13,"MaxRegistersPerMultiprocessor","","Maximum number of 32-bit registers available per …",9,null],[13,"ManagedMemory","","Device can allocate managed memory on this system",9,null],[13,"MultiGpuBoard","","Device is on a multi-GPU board",9,null],[13,"MultiGpuBoardGroupId","","Unique ID for a group of devices on the same multi-GPU …",9,null],[13,"HostNativeAtomicSupported","","Link between the device and the host supports native …",9,null],[13,"SingleToDoublePrecisionPerfRatio","","Ratio of single precision performance (in floating-point …",9,null],[13,"PageableMemoryAccess","","Device supports coherently accessing pageable memory …",9,null],[13,"ConcurrentManagedAccess","","Device can coherently access managed memory concurrently …",9,null],[13,"ComputePreemptionSupported","","Device supports compute preemption",9,null],[13,"CanUseHostPointerForRegisteredMem","","Device can access host registered memory at the same …",9,null],[3,"Device","","Opaque handle to a CUDA device.",null,null],[11,"num_devices","","Get the number of CUDA-capable devices.",10,[[],[["u32",15],["cudaresult",6]]]],[11,"get_device","","Get a handle to the <code>ordinal</code>’th CUDA device.",10,[[["u32",15]],[["device",3],["cudaresult",6]]]],[11,"devices","","Return an iterator over all CUDA devices.",10,[[],[["cudaresult",6],["devices",3]]]],[11,"total_memory","","Returns the total amount of memory available on the …",10,[[],[["usize",15],["cudaresult",6]]]],[11,"name","","Returns the name of this device.",10,[[],[["cudaresult",6],["string",3]]]],[11,"get_attribute","","Returns information about this device.",10,[[["deviceattribute",4]],[["cudaresult",6],["i32",15]]]],[3,"Devices","","Iterator over all available CUDA devices. See the …",null,null],[0,"error","rustacuda","Types for error handling",null,null],[4,"CudaError","rustacuda::error","Error enum which represents all the potential errors …",null,null],[13,"InvalidValue","","",11,null],[13,"OutOfMemory","","",11,null],[13,"NotInitialized","","",11,null],[13,"Deinitialized","","",11,null],[13,"ProfilerDisabled","","",11,null],[13,"ProfilerNotInitialized","","",11,null],[13,"ProfilerAlreadyStarted","","",11,null],[13,"ProfilerAlreadyStopped","","",11,null],[13,"NoDevice","","",11,null],[13,"InvalidDevice","","",11,null],[13,"InvalidImage","","",11,null],[13,"InvalidContext","","",11,null],[13,"ContextAlreadyCurrent","","",11,null],[13,"MapFailed","","",11,null],[13,"UnmapFailed","","",11,null],[13,"ArrayIsMapped","","",11,null],[13,"AlreadyMapped","","",11,null],[13,"NoBinaryForGpu","","",11,null],[13,"AlreadyAcquired","","",11,null],[13,"NotMapped","","",11,null],[13,"NotMappedAsArray","","",11,null],[13,"NotMappedAsPointer","","",11,null],[13,"EccUncorrectable","","",11,null],[13,"UnsupportedLimit","","",11,null],[13,"ContextAlreadyInUse","","",11,null],[13,"PeerAccessUnsupported","","",11,null],[13,"InvalidPtx","","",11,null],[13,"InvalidGraphicsContext","","",11,null],[13,"NvlinkUncorrectable","","",11,null],[13,"InvalidSouce","","",11,null],[13,"FileNotFound","","",11,null],[13,"SharedObjectSymbolNotFound","","",11,null],[13,"SharedObjectInitFailed","","",11,null],[13,"OperatingSystemError","","",11,null],[13,"InvalidHandle","","",11,null],[13,"NotFound","","",11,null],[13,"NotReady","","",11,null],[13,"IllegalAddress","","",11,null],[13,"LaunchOutOfResources","","",11,null],[13,"LaunchTimeout","","",11,null],[13,"LaunchIncompatibleTexturing","","",11,null],[13,"PeerAccessAlreadyEnabled","","",11,null],[13,"PeerAccessNotEnabled","","",11,null],[13,"PrimaryContextActive","","",11,null],[13,"ContextIsDestroyed","","",11,null],[13,"AssertError","","",11,null],[13,"TooManyPeers","","",11,null],[13,"HostMemoryAlreadyRegistered","","",11,null],[13,"HostMemoryNotRegistered","","",11,null],[13,"HardwareStackError","","",11,null],[13,"IllegalInstruction","","",11,null],[13,"MisalignedAddress","","",11,null],[13,"InvalidAddressSpace","","",11,null],[13,"InvalidProgramCounter","","",11,null],[13,"LaunchFailed","","",11,null],[13,"NotPermitted","","",11,null],[13,"NotSupported","","",11,null],[13,"UnknownError","","",11,null],[13,"InvalidMemoryAllocation","","",11,null],[6,"CudaResult","","Result type for most CUDA functions.",null,null],[6,"DropResult","","Special result type for <code>drop</code> functions which includes the …",null,null],[0,"event","rustacuda","Events can be used to track status and dependencies, as …",null,null],[3,"EventFlags","rustacuda::event","Bit flags for configuring a CUDA Event.",null,null],[18,"DEFAULT","","The default event creation flag.",12,null],[18,"BLOCKING_SYNC","","Specify that the created event should busy-wait on …",12,null],[18,"DISABLE_TIMING","","Specify that the created event does not need to record …",12,null],[18,"INTERPROCESS","","Specify that the created event may be used as an …",12,null],[11,"empty","","Returns an empty set of flags",12,[[],["eventflags",3]]],[11,"all","","Returns the set containing all flags.",12,[[],["eventflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",12,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",12,[[["u32",15]],[["option",4],["eventflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",12,[[["u32",15]],["eventflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",12,[[["u32",15]],["eventflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",12,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",12,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",12,[[["eventflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",12,[[["eventflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",12,[[["eventflags",3]]]],[11,"remove","","Removes the specified flags in-place.",12,[[["eventflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",12,[[["eventflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",12,[[["bool",15],["eventflags",3]]]],[4,"EventStatus","","Status enum that represents the current status of an …",null,null],[13,"Ready","","Ready indicates that all work captured by the event has …",13,null],[13,"NotReady","","<code>EventStatus::NotReady</code> indicates that the work captured by …",13,null],[3,"Event","","An event to track work submitted to a stream.",null,null],[11,"new","","Create a new event with the specified flags.",14,[[["eventflags",3]],["cudaresult",6]]],[11,"record","","Add the event to the given stream of work. The event will …",14,[[["stream",3]],["cudaresult",6]]],[11,"query","","Return whether the stream this event was recorded on (see …",14,[[],[["eventstatus",4],["cudaresult",6]]]],[11,"synchronize","","Wait for an event to complete.",14,[[],["cudaresult",6]]],[11,"elapsed_time_f32","","Return the duration between two events.",14,[[],[["cudaresult",6],["f32",15]]]],[11,"drop","","Destroy an <code>Event</code> returning an error.",14,[[["event",3]],[["event",3],["dropresult",6]]]],[0,"function","rustacuda","Functions and types for working with CUDA kernels.",null,null],[3,"GridSize","rustacuda::function","Dimensions of a grid, or the number of thread blocks in a …",null,null],[12,"x","","Width of grid in blocks",15,null],[12,"y","","Height of grid in blocks",15,null],[12,"z","","Depth of grid in blocks",15,null],[11,"x","","Create a one-dimensional grid of <code>x</code> blocks",15,[[["u32",15]],["gridsize",3]]],[11,"xy","","Create a two-dimensional grid of <code>x * y</code> blocks",15,[[["u32",15]],["gridsize",3]]],[11,"xyz","","Create a three-dimensional grid of <code>x * y * z</code> blocks",15,[[["u32",15]],["gridsize",3]]],[3,"BlockSize","","Dimensions of a thread block, or the number of threads in …",null,null],[12,"x","","X dimension of each thread block",16,null],[12,"y","","Y dimension of each thread block",16,null],[12,"z","","Z dimension of each thread block",16,null],[11,"x","","Create a one-dimensional block of <code>x</code> threads",16,[[["u32",15]],["blocksize",3]]],[11,"xy","","Create a two-dimensional block of <code>x * y</code> threads",16,[[["u32",15]],["blocksize",3]]],[11,"xyz","","Create a three-dimensional block of <code>x * y * z</code> threads",16,[[["u32",15]],["blocksize",3]]],[4,"FunctionAttribute","","All supported function attributes for …",null,null],[13,"MaxThreadsPerBlock","","The maximum number of threads per block, beyond which a …",17,null],[13,"SharedMemorySizeBytes","","The size in bytes of the statically-allocated shared …",17,null],[13,"ConstSizeBytes","","The size in bytes of the constant memory required by this …",17,null],[13,"LocalSizeBytes","","The size in bytes of local memory used by each thread of …",17,null],[13,"NumRegisters","","The number of registers used by each thread of this …",17,null],[13,"PtxVersion","","The PTX virtual architecture version for which the …",17,null],[13,"BinaryVersion","","The binary architecture version for which the function …",17,null],[13,"CacheModeCa","","The attribute to indicate whether the function has been …",17,null],[3,"Function","","Handle to a global kernel function.",null,null],[11,"get_attribute","","Returns information about a function.",18,[[["functionattribute",4]],[["cudaresult",6],["i32",15]]]],[11,"set_cache_config","","Sets the preferred cache configuration for this function.",18,[[["cacheconfig",4]],["cudaresult",6]]],[11,"set_shared_memory_config","","Sets the preferred shared memory configuration for this …",18,[[["sharedmemoryconfig",4]],["cudaresult",6]]],[0,"memory","rustacuda","Access to CUDA’s memory allocation and transfer …",null,null],[0,"array","rustacuda::memory","Routines for allocating and using CUDA Array Objects.",null,null],[4,"ArrayFormat","rustacuda::memory::array","Describes the format used for a CUDA Array.",null,null],[13,"UnsignedInt8","","Unsigned 8-bit integer",19,null],[13,"UnsignedInt16","","Unsigned 16-bit integer",19,null],[13,"UnsignedInt32","","Unsigned 32-bit integer",19,null],[13,"SignedInt8","","Signed 8-bit integer",19,null],[13,"SignedInt16","","Signed 16-bit integer",19,null],[13,"SignedInt32","","Signed 32-bit integer",19,null],[13,"Half","","Half-precision floating point number",19,null],[13,"Float","","Single-precision floating point number",19,null],[11,"from_raw","","Creates ArrayFormat from the CUDA Driver API enum",19,[[["cuarray_format",4]]]],[11,"to_raw","","Converts ArrayFormat to the CUDA Driver API enum",19,[[],["cuarray_format",4]]],[3,"ArrayObjectFlags","","Flags which modify the behavior of CUDA array creation.",null,null],[18,"LAYERED","","Enables creation of layered CUDA arrays. When this flag …",20,null],[18,"SURFACE_LDST","","Enables surface references to be bound to the CUDA array.",20,null],[18,"CUBEMAP","","Enables creation of cubemaps. If this flag is set, Width …",20,null],[18,"TEXTURE_GATHER","","Indicates that the CUDA array will be used for texture …",20,null],[11,"empty","","Returns an empty set of flags",20,[[],["arrayobjectflags",3]]],[11,"all","","Returns the set containing all flags.",20,[[],["arrayobjectflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",20,[[],["c_uint",6]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",20,[[["c_uint",6]],[["arrayobjectflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",20,[[["c_uint",6]],["arrayobjectflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",20,[[["c_uint",6]],["arrayobjectflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",20,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",20,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",20,[[["arrayobjectflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",20,[[["arrayobjectflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",20,[[["arrayobjectflags",3]]]],[11,"remove","","Removes the specified flags in-place.",20,[[["arrayobjectflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",20,[[["arrayobjectflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",20,[[["arrayobjectflags",3],["bool",15]]]],[11,"new","","Creates a default flags object with no flags set.",20,[[]]],[3,"ArrayDescriptor","","Describes a CUDA Array",null,null],[11,"from_raw","","Constructs an ArrayDescriptor from a CUDA Driver API …",21,[[["cuda_array3d_descriptor",6]]]],[11,"new","","Constructs an ArrayDescriptor from dimensions, format, …",21,[[["arrayformat",4],["arrayobjectflags",3],["c_uint",6]]]],[11,"from_dims_format","","Creates a new ArrayDescriptor from a set of dimensions …",21,[[["arrayformat",4]]]],[11,"dims","","Returns the dimensions of the ArrayDescriptor",21,[[]]],[11,"set_dims","","Sets the dimensions of the ArrayDescriptor",21,[[]]],[11,"width","","Returns the width of the ArrayDescripor",21,[[],["usize",15]]],[11,"set_width","","Sets the width of the ArrayDescriptor",21,[[["usize",15]]]],[11,"height","","Returns the height of the ArrayDescripor",21,[[],["usize",15]]],[11,"set_height","","Sets the height of the ArrayDescriptor",21,[[["usize",15]]]],[11,"depth","","Returns the depth of the ArrayDescripor",21,[[],["usize",15]]],[11,"set_depth","","Sets the depth of the ArrayDescriptor",21,[[["usize",15]]]],[11,"format","","Returns the format of the ArrayDescripor",21,[[],["arrayformat",4]]],[11,"set_format","","Sets the format of the ArrayDescriptor",21,[[["arrayformat",4]]]],[11,"num_channels","","Returns the number of channels in the ArrayDescriptor",21,[[],["c_uint",6]]],[11,"set_num_channels","","Sets the number of channels in the ArrayDescriptor",21,[[["c_uint",6]]]],[11,"flags","","Returns the flags of the ArrayDescriptor",21,[[],["arrayobjectflags",3]]],[11,"set_flags","","Sets the flags of the ArrayDescriptor.",21,[[["arrayobjectflags",3]]]],[3,"ArrayObject","","A CUDA Array. Can be bound to a texture or surface.",null,null],[11,"from_descriptor","","Constructs a generic ArrayObject from an <code>ArrayDescriptor</code>.",22,[[["arraydescriptor",3]],["cudaresult",6]]],[11,"new","","Allocates a new CUDA Array that is up to 3-dimensions.",22,[[["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_1d","","Allocates a new 1D CUDA Array.",22,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_2d","","Allocates a new CUDA Array that is up to 2-dimensions.",22,[[["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_layered","","Creates a new Layered 1D or 2D CUDA Array.",22,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_layered_1d","","Creates a new Layered 1D CUDA Array.",22,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_cubemap","","Creates a new Cubemap CUDA Array. The array is …",22,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"new_layered_cubemap","","Creates a new Layered Cubemap CUDA Array. The array is …",22,[[["usize",15],["arrayformat",4],["c_uint",6]],["cudaresult",6]]],[11,"descriptor","","Gets the descriptor associated with this array.",22,[[],[["arraydescriptor",3],["cudaresult",6]]]],[11,"drop","","Try to destroy an <code>ArrayObject</code>. Can fail - if it does, …",22,[[["arrayobject",3]],[["dropresult",6],["arrayobject",3]]]],[3,"DeviceBox","rustacuda::memory","A pointer type for heap-allocation in CUDA device memory.",null,null],[3,"DeviceBuffer","","Fixed-size device-side buffer. Provides basic access to …",null,null],[3,"DeviceSlice","","Fixed-size device-side slice.",null,null],[3,"DeviceChunks","","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …",null,null],[3,"DeviceChunksMut","","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …",null,null],[8,"CopyDestination","","Sealed trait implemented by types which can be the source …",null,null],[10,"copy_from","","Copy data from <code>source</code>. <code>source</code> must be the same size as …",23,[[],["cudaresult",6]]],[10,"copy_to","","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.",23,[[],["cudaresult",6]]],[8,"AsyncCopyDestination","","Sealed trait implemented by types which can be the source …",null,null],[10,"async_copy_from","","Asynchronously copy data from <code>source</code>. <code>source</code> must be the …",24,[[["stream",3]],["cudaresult",6]]],[10,"async_copy_to","","Asynchronously copy data to <code>dest</code>. <code>dest</code> must be the same …",24,[[["stream",3]],["cudaresult",6]]],[3,"LockedBuffer","","Fixed-size host-side buffer in page-locked memory.",null,null],[5,"cuda_malloc","","Unsafe wrapper around the <code>cuMemAlloc</code> function, which …",null,[[["usize",15]],[["cudaresult",6],["devicepointer",3]]]],[5,"cuda_malloc_unified","","Unsafe wrapper around the <code>cuMemAllocManaged</code> function, …",null,[[["usize",15]],[["cudaresult",6],["unifiedpointer",3]]]],[5,"cuda_free","","Free memory allocated with <code>cuda_malloc</code>.",null,[[["devicepointer",3]],["cudaresult",6]]],[5,"cuda_free_unified","","Free memory allocated with <code>cuda_malloc_unified</code>.",null,[[["unifiedpointer",3],["devicecopy",8]],["cudaresult",6]]],[5,"cuda_malloc_locked","","Unsafe wrapper around the <code>cuMemAllocHost</code> function, which …",null,[[["usize",15]],["cudaresult",6]]],[5,"cuda_free_locked","","Free page-locked memory allocated with <code>cuda_malloc_host</code>.",null,[[],["cudaresult",6]]],[3,"UnifiedBox","","A pointer type for heap-allocation in CUDA unified memory.",null,null],[3,"UnifiedBuffer","","Fixed-size buffer in unified memory.",null,null],[8,"DeviceCopy","","Marker trait for types which can safely be copied to or …",null,null],[24,"DeviceCopy","","",null,null],[3,"DevicePointer","","A pointer to device memory.",null,null],[3,"UnifiedPointer","","A pointer to unified memory.",null,null],[0,"module","rustacuda","Functions and types for working with CUDA modules.",null,null],[3,"Module","rustacuda::module","A compiled CUDA module, loaded into a context.",null,null],[11,"load_from_file","","Load a module from the given file name into the current …",25,[[["cstr",3]],[["cudaresult",6],["module",3]]]],[11,"load_from_string","","Load a module from a CStr.",25,[[["cstr",3]],[["cudaresult",6],["module",3]]]],[11,"get_global","","Get a reference to a global symbol, which can then be …",25,[[["cstr",3]],[["symbol",3],["cudaresult",6]]]],[11,"get_function","","Get a reference to a kernel function which can then be …",25,[[["cstr",3]],[["cudaresult",6],["function",3]]]],[11,"drop","","Destroy a <code>Module</code>, returning an error.",25,[[["module",3]],[["dropresult",6],["module",3]]]],[3,"Symbol","","Handle to a symbol defined within a CUDA module.",null,null],[0,"prelude","rustacuda","This module re-exports a number of commonly-used types …",null,null],[8,"CopyDestination","rustacuda::prelude","Sealed trait implemented by types which can be the source …",null,null],[10,"copy_from","","Copy data from <code>source</code>. <code>source</code> must be the same size as …",23,[[],["cudaresult",6]]],[10,"copy_to","","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.",23,[[],["cudaresult",6]]],[3,"DeviceBuffer","","Fixed-size device-side buffer. Provides basic access to …",null,null],[3,"UnifiedBuffer","","Fixed-size buffer in unified memory.",null,null],[0,"stream","rustacuda","Streams of work for the device to perform.",null,null],[3,"StreamFlags","rustacuda::stream","Bit flags for configuring a CUDA Stream.",null,null],[18,"DEFAULT","","No flags set.",26,null],[18,"NON_BLOCKING","","This stream does not synchronize with the NULL stream.",26,null],[11,"empty","","Returns an empty set of flags",26,[[],["streamflags",3]]],[11,"all","","Returns the set containing all flags.",26,[[],["streamflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",26,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",26,[[["u32",15]],[["streamflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",26,[[["u32",15]],["streamflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",26,[[["u32",15]],["streamflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",26,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",26,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",26,[[["streamflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",26,[[["streamflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",26,[[["streamflags",3]]]],[11,"remove","","Removes the specified flags in-place.",26,[[["streamflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",26,[[["streamflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",26,[[["streamflags",3],["bool",15]]]],[3,"StreamWaitEventFlags","","Bit flags for configuring a CUDA Stream waiting on an …",null,null],[18,"DEFAULT","","No flags set.",27,null],[11,"empty","","Returns an empty set of flags",27,[[],["streamwaiteventflags",3]]],[11,"all","","Returns the set containing all flags.",27,[[],["streamwaiteventflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",27,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",27,[[["u32",15]],[["streamwaiteventflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",27,[[["u32",15]],["streamwaiteventflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",27,[[["u32",15]],["streamwaiteventflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",27,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",27,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",27,[[["streamwaiteventflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",27,[[["streamwaiteventflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",27,[[["streamwaiteventflags",3]]]],[11,"remove","","Removes the specified flags in-place.",27,[[["streamwaiteventflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",27,[[["streamwaiteventflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",27,[[["bool",15],["streamwaiteventflags",3]]]],[3,"Stream","","A stream of work for the device to perform.",null,null],[11,"new","","Create a new stream with the given flags and optional …",28,[[["streamflags",3],["option",4],["i32",15]],["cudaresult",6]]],[11,"get_flags","","Return the flags which were used to create this stream.",28,[[],[["streamflags",3],["cudaresult",6]]]],[11,"get_priority","","Return the priority of this stream.",28,[[],[["cudaresult",6],["i32",15]]]],[11,"add_callback","","Add a callback to a stream.",28,[[["box",3]],["cudaresult",6]]],[11,"synchronize","","Wait until a stream’s tasks are completed.",28,[[],["cudaresult",6]]],[11,"wait_event","","Make the stream wait on an event.",28,[[["event",3],["streamwaiteventflags",3]],["cudaresult",6]]],[11,"drop","","Destroy a <code>Stream</code>, returning an error.",28,[[["stream",3]],[["stream",3],["dropresult",6]]]],[3,"CudaFlags","rustacuda","Bit flags for initializing the CUDA driver. Currently, no …",null,null],[11,"empty","","Returns an empty set of flags",29,[[],["cudaflags",3]]],[11,"all","","Returns the set containing all flags.",29,[[],["cudaflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",29,[[],["u32",15]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",29,[[["u32",15]],[["cudaflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",29,[[["u32",15]],["cudaflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",29,[[["u32",15]],["cudaflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",29,[[],["bool",15]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",29,[[],["bool",15]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",29,[[["cudaflags",3]],["bool",15]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",29,[[["cudaflags",3]],["bool",15]]],[11,"insert","","Inserts the specified flags in-place.",29,[[["cudaflags",3]]]],[11,"remove","","Removes the specified flags in-place.",29,[[["cudaflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",29,[[["cudaflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",29,[[["cudaflags",3],["bool",15]]]],[5,"init","","Initialize the CUDA Driver API.",null,[[["cudaflags",3]],["cudaresult",6]]],[5,"quick_init","","Shortcut for initializing the CUDA Driver API and …",null,[[],[["cudaresult",6],["context",3]]]],[3,"CudaApiVersion","","Struct representing the CUDA API version number.",null,null],[11,"get","","Returns the latest CUDA version supported by the CUDA …",30,[[],[["cudaapiversion",3],["cudaresult",6]]]],[11,"major","","Return the major version number - eg. the 9 in version 9.2",30,[[],["i32",15]]],[11,"minor","","Return the minor version number - eg. the 2 in version 9.2",30,[[],["i32",15]]],[14,"launch","","Launch a kernel function asynchronously.",null,null],[11,"from","rustacuda::context","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","rustacuda::device","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","rustacuda::error","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","rustacuda::event","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","rustacuda::function","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","rustacuda::memory::array","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","rustacuda::memory","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"into_iter","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","rustacuda::module","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","rustacuda::stream","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","rustacuda","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"clone","rustacuda::memory","",41,[[],["unifiedpointer",3]]],[11,"clone","","",40,[[],["devicepointer",3]]],[11,"fmt","","",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",40,[[["formatter",3]],[["error",3],["result",4]]]],[11,"partial_cmp","","",41,[[["unifiedpointer",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",40,[[["devicepointer",3]],[["option",4],["ordering",4]]]],[11,"hash","","",41,[[]]],[11,"hash","","",40,[[]]],[11,"cmp","","",40,[[["devicepointer",3]],["ordering",4]]],[11,"cmp","","",41,[[["unifiedpointer",3]],["ordering",4]]],[11,"eq","","",40,[[["devicepointer",3]],["bool",15]]],[11,"eq","","",41,[[["unifiedpointer",3]],["bool",15]]],[11,"fmt","","",40,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"get_inner","rustacuda::context","",4,[[],["cucontext",6]]],[11,"get_inner","","",5,[[],["cucontext",6]]],[11,"copy_from","rustacuda::memory","",32,[[],["cudaresult",6]]],[11,"copy_to","","",32,[[],["cudaresult",6]]],[11,"copy_from","","",32,[[["devicebox",3]],["cudaresult",6]]],[11,"copy_to","","",32,[[["devicebox",3]],["cudaresult",6]]],[11,"copy_from","","",34,[[],["cudaresult",6]]],[11,"copy_to","","",34,[[],["cudaresult",6]]],[11,"copy_from","","",34,[[["deviceslice",3]],["cudaresult",6]]],[11,"copy_to","","",34,[[["deviceslice",3]],["cudaresult",6]]],[11,"copy_from","","",34,[[["devicebuffer",3]],["cudaresult",6]]],[11,"copy_to","","",34,[[["devicebuffer",3]],["cudaresult",6]]],[11,"copy_from","rustacuda::module","",42,[[],["cudaresult",6]]],[11,"copy_to","","",42,[[],["cudaresult",6]]],[11,"async_copy_from","rustacuda::memory","",32,[[["stream",3],["devicebox",3]],["cudaresult",6]]],[11,"async_copy_to","","",32,[[["stream",3],["devicebox",3]],["cudaresult",6]]],[11,"async_copy_from","","",34,[[["stream",3]],["cudaresult",6]]],[11,"async_copy_to","","",34,[[["stream",3]],["cudaresult",6]]],[11,"async_copy_from","","",34,[[["stream",3],["deviceslice",3]],["cudaresult",6]]],[11,"async_copy_to","","",34,[[["stream",3],["deviceslice",3]],["cudaresult",6]]],[11,"async_copy_from","","",34,[[["devicebuffer",3],["stream",3]],["cudaresult",6]]],[11,"async_copy_to","","",34,[[["devicebuffer",3],["stream",3]],["cudaresult",6]]],[11,"drop","rustacuda::context","",4,[[]]],[11,"drop","rustacuda::event","",14,[[]]],[11,"drop","rustacuda::memory::array","",22,[[]]],[11,"drop","rustacuda::memory","",32,[[]]],[11,"drop","","",33,[[]]],[11,"drop","","",37,[[]]],[11,"drop","","",38,[[]]],[11,"drop","","",39,[[]]],[11,"drop","rustacuda::module","",25,[[]]],[11,"drop","rustacuda::stream","",28,[[]]],[11,"as_mut","rustacuda::memory","",37,[[]]],[11,"as_mut","","",38,[[]]],[11,"as_mut","","",39,[[]]],[11,"as_ref","","",37,[[]]],[11,"as_ref","","",38,[[]]],[11,"as_ref","","",39,[[]]],[11,"from","rustacuda::function","",15,[[["u32",15]],["gridsize",3]]],[11,"from","","",15,[[],["gridsize",3]]],[11,"from","","",15,[[],["gridsize",3]]],[11,"from","","",15,[[["gridsize",3]],["gridsize",3]]],[11,"from","","",16,[[["u32",15]],["blocksize",3]]],[11,"from","","",16,[[],["blocksize",3]]],[11,"from","","",16,[[],["blocksize",3]]],[11,"from","","",16,[[["blocksize",3]],["blocksize",3]]],[11,"next_back","rustacuda::memory","",35,[[],[["option",4],["deviceslice",3]]]],[11,"next_back","","",36,[[],[["option",4],["deviceslice",3]]]],[11,"extend","rustacuda::context","",3,[[["intoiterator",8]]]],[11,"extend","rustacuda::event","",12,[[["intoiterator",8]]]],[11,"extend","rustacuda::memory::array","",20,[[["intoiterator",8]]]],[11,"extend","rustacuda::stream","",26,[[["intoiterator",8]]]],[11,"extend","","",27,[[["intoiterator",8]]]],[11,"extend","rustacuda","",29,[[["intoiterator",8]]]],[11,"next","rustacuda::device","",31,[[],[["option",4],["cudaresult",6]]]],[11,"next","rustacuda::memory","",35,[[],[["option",4],["deviceslice",3]]]],[11,"size_hint","","",35,[[]]],[11,"count","","",35,[[],["usize",15]]],[11,"nth","","",35,[[["usize",15]],["option",4]]],[11,"last","","",35,[[],["option",4]]],[11,"next","","",36,[[],[["option",4],["deviceslice",3]]]],[11,"size_hint","","",36,[[]]],[11,"count","","",36,[[],["usize",15]]],[11,"nth","","",36,[[["usize",15]],["option",4]]],[11,"last","","",36,[[],["option",4]]],[11,"clone","rustacuda::context","",0,[[],["cacheconfig",4]]],[11,"clone","","",1,[[],["resourcelimit",4]]],[11,"clone","","",2,[[],["sharedmemoryconfig",4]]],[11,"clone","","",3,[[],["contextflags",3]]],[11,"clone","","",5,[[],["unownedcontext",3]]],[11,"clone","","",7,[[],["streampriorityrange",3]]],[11,"clone","rustacuda::device","",9,[[],["deviceattribute",4]]],[11,"clone","","",10,[[],["device",3]]],[11,"clone","","",31,[[],["devices",3]]],[11,"clone","rustacuda::error","",11,[[],["cudaerror",4]]],[11,"clone","rustacuda::event","",12,[[],["eventflags",3]]],[11,"clone","","",13,[[],["eventstatus",4]]],[11,"clone","rustacuda::function","",15,[[],["gridsize",3]]],[11,"clone","","",16,[[],["blocksize",3]]],[11,"clone","","",17,[[],["functionattribute",4]]],[11,"clone","rustacuda::memory::array","",19,[[],["arrayformat",4]]],[11,"clone","","",20,[[],["arrayobjectflags",3]]],[11,"clone","","",21,[[],["arraydescriptor",3]]],[11,"clone","rustacuda::memory","",35,[[],["devicechunks",3]]],[11,"clone","rustacuda::stream","",26,[[],["streamflags",3]]],[11,"clone","","",27,[[],["streamwaiteventflags",3]]],[11,"clone","rustacuda","",29,[[],["cudaflags",3]]],[11,"clone","","",30,[[],["cudaapiversion",3]]],[11,"default","rustacuda::memory::array","",20,[[],["arrayobjectflags",3]]],[11,"cmp","rustacuda::context","",3,[[["contextflags",3]],["ordering",4]]],[11,"cmp","rustacuda::event","",12,[[["eventflags",3]],["ordering",4]]],[11,"cmp","rustacuda::memory::array","",20,[[["arrayobjectflags",3]],["ordering",4]]],[11,"cmp","rustacuda::memory","",38,[[["unifiedbox",3]],["ordering",4]]],[11,"cmp","rustacuda::stream","",26,[[["streamflags",3]],["ordering",4]]],[11,"cmp","","",27,[[["streamwaiteventflags",3]],["ordering",4]]],[11,"cmp","rustacuda","",29,[[["cudaflags",3]],["ordering",4]]],[11,"cmp","","",30,[[["cudaapiversion",3]],["ordering",4]]],[11,"eq","rustacuda::context","",0,[[["cacheconfig",4]],["bool",15]]],[11,"eq","","",1,[[["resourcelimit",4]],["bool",15]]],[11,"eq","","",2,[[["sharedmemoryconfig",4]],["bool",15]]],[11,"eq","","",3,[[["contextflags",3]],["bool",15]]],[11,"ne","","",3,[[["contextflags",3]],["bool",15]]],[11,"eq","","",7,[[["streampriorityrange",3]],["bool",15]]],[11,"ne","","",7,[[["streampriorityrange",3]],["bool",15]]],[11,"eq","rustacuda::device","",9,[[["deviceattribute",4]],["bool",15]]],[11,"eq","","",10,[[["device",3]],["bool",15]]],[11,"ne","","",10,[[["device",3]],["bool",15]]],[11,"eq","rustacuda::error","",11,[[["cudaerror",4]],["bool",15]]],[11,"eq","rustacuda::event","",12,[[["eventflags",3]],["bool",15]]],[11,"ne","","",12,[[["eventflags",3]],["bool",15]]],[11,"eq","","",13,[[["eventstatus",4]],["bool",15]]],[11,"eq","rustacuda::function","",15,[[["gridsize",3]],["bool",15]]],[11,"ne","","",15,[[["gridsize",3]],["bool",15]]],[11,"eq","","",16,[[["blocksize",3]],["bool",15]]],[11,"ne","","",16,[[["blocksize",3]],["bool",15]]],[11,"eq","","",17,[[["functionattribute",4]],["bool",15]]],[11,"eq","rustacuda::memory::array","",19,[[["arrayformat",4]],["bool",15]]],[11,"eq","","",20,[[["arrayobjectflags",3]],["bool",15]]],[11,"ne","","",20,[[["arrayobjectflags",3]],["bool",15]]],[11,"eq","rustacuda::memory","",38,[[["unifiedbox",3]],["bool",15]]],[11,"eq","rustacuda::stream","",26,[[["streamflags",3]],["bool",15]]],[11,"ne","","",26,[[["streamflags",3]],["bool",15]]],[11,"eq","","",27,[[["streamwaiteventflags",3]],["bool",15]]],[11,"ne","","",27,[[["streamwaiteventflags",3]],["bool",15]]],[11,"eq","rustacuda","",29,[[["cudaflags",3]],["bool",15]]],[11,"ne","","",29,[[["cudaflags",3]],["bool",15]]],[11,"eq","","",30,[[["cudaapiversion",3]],["bool",15]]],[11,"ne","","",30,[[["cudaapiversion",3]],["bool",15]]],[11,"partial_cmp","rustacuda::context","",3,[[["contextflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda::event","",12,[[["eventflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda::memory::array","",20,[[["arrayobjectflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda::memory","",38,[[["unifiedbox",3]],[["option",4],["ordering",4]]]],[11,"lt","","",38,[[["unifiedbox",3]],["bool",15]]],[11,"le","","",38,[[["unifiedbox",3]],["bool",15]]],[11,"ge","","",38,[[["unifiedbox",3]],["bool",15]]],[11,"gt","","",38,[[["unifiedbox",3]],["bool",15]]],[11,"partial_cmp","rustacuda::stream","",26,[[["streamflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",27,[[["streamwaiteventflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","rustacuda","",29,[[["cudaflags",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",30,[[["cudaapiversion",3]],[["option",4],["ordering",4]]]],[11,"deref","rustacuda::memory","",33,[[],["deviceslice",3]]],[11,"deref","","",37,[[]]],[11,"deref","","",38,[[]]],[11,"deref","","",39,[[]]],[11,"deref_mut","","",33,[[],["deviceslice",3]]],[11,"deref_mut","","",37,[[]]],[11,"deref_mut","","",38,[[]]],[11,"deref_mut","","",39,[[]]],[11,"fmt","rustacuda::context","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::device","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::error","",11,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::function","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::module","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::error","",11,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory","",38,[[["formatter",3]],["result",6]]],[11,"sub","rustacuda::context","Returns the set difference of the two sets of flags.",3,[[["contextflags",3]],["contextflags",3]]],[11,"sub","rustacuda::event","Returns the set difference of the two sets of flags.",12,[[["eventflags",3]],["eventflags",3]]],[11,"sub","rustacuda::memory::array","Returns the set difference of the two sets of flags.",20,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"sub","rustacuda::stream","Returns the set difference of the two sets of flags.",26,[[["streamflags",3]],["streamflags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",27,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"sub","rustacuda","Returns the set difference of the two sets of flags.",29,[[["cudaflags",3]],["cudaflags",3]]],[11,"sub_assign","rustacuda::context","Disables all flags enabled in the set.",3,[[["contextflags",3]]]],[11,"sub_assign","rustacuda::event","Disables all flags enabled in the set.",12,[[["eventflags",3]]]],[11,"sub_assign","rustacuda::memory::array","Disables all flags enabled in the set.",20,[[["arrayobjectflags",3]]]],[11,"sub_assign","rustacuda::stream","Disables all flags enabled in the set.",26,[[["streamflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",27,[[["streamwaiteventflags",3]]]],[11,"sub_assign","rustacuda","Disables all flags enabled in the set.",29,[[["cudaflags",3]]]],[11,"not","rustacuda::context","Returns the complement of this set of flags.",3,[[],["contextflags",3]]],[11,"not","rustacuda::event","Returns the complement of this set of flags.",12,[[],["eventflags",3]]],[11,"not","rustacuda::memory::array","Returns the complement of this set of flags.",20,[[],["arrayobjectflags",3]]],[11,"not","rustacuda::stream","Returns the complement of this set of flags.",26,[[],["streamflags",3]]],[11,"not","","Returns the complement of this set of flags.",27,[[],["streamwaiteventflags",3]]],[11,"not","rustacuda","Returns the complement of this set of flags.",29,[[],["cudaflags",3]]],[11,"bitand","rustacuda::context","Returns the intersection between the two sets of flags.",3,[[["contextflags",3]],["contextflags",3]]],[11,"bitand","rustacuda::event","Returns the intersection between the two sets of flags.",12,[[["eventflags",3]],["eventflags",3]]],[11,"bitand","rustacuda::memory::array","Returns the intersection between the two sets of flags.",20,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"bitand","rustacuda::stream","Returns the intersection between the two sets of flags.",26,[[["streamflags",3]],["streamflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",27,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"bitand","rustacuda","Returns the intersection between the two sets of flags.",29,[[["cudaflags",3]],["cudaflags",3]]],[11,"bitor","rustacuda::context","Returns the union of the two sets of flags.",3,[[["contextflags",3]],["contextflags",3]]],[11,"bitor","rustacuda::event","Returns the union of the two sets of flags.",12,[[["eventflags",3]],["eventflags",3]]],[11,"bitor","rustacuda::memory::array","Returns the union of the two sets of flags.",20,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"bitor","rustacuda::stream","Returns the union of the two sets of flags.",26,[[["streamflags",3]],["streamflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",27,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"bitor","rustacuda","Returns the union of the two sets of flags.",29,[[["cudaflags",3]],["cudaflags",3]]],[11,"bitxor","rustacuda::context","Returns the left flags, but with all the right flags …",3,[[["contextflags",3]],["contextflags",3]]],[11,"bitxor","rustacuda::event","Returns the left flags, but with all the right flags …",12,[[["eventflags",3]],["eventflags",3]]],[11,"bitxor","rustacuda::memory::array","Returns the left flags, but with all the right flags …",20,[[["arrayobjectflags",3]],["arrayobjectflags",3]]],[11,"bitxor","rustacuda::stream","Returns the left flags, but with all the right flags …",26,[[["streamflags",3]],["streamflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",27,[[["streamwaiteventflags",3]],["streamwaiteventflags",3]]],[11,"bitxor","rustacuda","Returns the left flags, but with all the right flags …",29,[[["cudaflags",3]],["cudaflags",3]]],[11,"bitand_assign","rustacuda::context","Disables all flags disabled in the set.",3,[[["contextflags",3]]]],[11,"bitand_assign","rustacuda::event","Disables all flags disabled in the set.",12,[[["eventflags",3]]]],[11,"bitand_assign","rustacuda::memory::array","Disables all flags disabled in the set.",20,[[["arrayobjectflags",3]]]],[11,"bitand_assign","rustacuda::stream","Disables all flags disabled in the set.",26,[[["streamflags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",27,[[["streamwaiteventflags",3]]]],[11,"bitand_assign","rustacuda","Disables all flags disabled in the set.",29,[[["cudaflags",3]]]],[11,"bitor_assign","rustacuda::context","Adds the set of flags.",3,[[["contextflags",3]]]],[11,"bitor_assign","rustacuda::event","Adds the set of flags.",12,[[["eventflags",3]]]],[11,"bitor_assign","rustacuda::memory::array","Adds the set of flags.",20,[[["arrayobjectflags",3]]]],[11,"bitor_assign","rustacuda::stream","Adds the set of flags.",26,[[["streamflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",27,[[["streamwaiteventflags",3]]]],[11,"bitor_assign","rustacuda","Adds the set of flags.",29,[[["cudaflags",3]]]],[11,"bitxor_assign","rustacuda::context","Toggles the set of flags.",3,[[["contextflags",3]]]],[11,"bitxor_assign","rustacuda::event","Toggles the set of flags.",12,[[["eventflags",3]]]],[11,"bitxor_assign","rustacuda::memory::array","Toggles the set of flags.",20,[[["arrayobjectflags",3]]]],[11,"bitxor_assign","rustacuda::stream","Toggles the set of flags.",26,[[["streamflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",27,[[["streamwaiteventflags",3]]]],[11,"bitxor_assign","rustacuda","Toggles the set of flags.",29,[[["cudaflags",3]]]],[11,"index","rustacuda::memory","",34,[[["usize",15],["range",3]]]],[11,"index","","",34,[[["rangefull",3]]]],[11,"index","","",34,[[["rangefrom",3],["usize",15]]]],[11,"index","","",34,[[["usize",15],["rangeinclusive",3]]]],[11,"index","","",34,[[["rangeto",3],["usize",15]]]],[11,"index","","",34,[[["usize",15],["rangetoinclusive",3]]]],[11,"index_mut","","",34,[[["usize",15],["range",3]]]],[11,"index_mut","","",34,[[["rangefull",3]]]],[11,"index_mut","","",34,[[["rangefrom",3],["usize",15]]]],[11,"index_mut","","",34,[[["usize",15],["rangeinclusive",3]]]],[11,"index_mut","","",34,[[["rangeto",3],["usize",15]]]],[11,"index_mut","","",34,[[["usize",15],["rangetoinclusive",3]]]],[11,"hash","rustacuda::context","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",7,[[]]],[11,"hash","rustacuda::device","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","rustacuda::event","",12,[[]]],[11,"hash","rustacuda::function","",17,[[]]],[11,"hash","rustacuda::memory::array","",20,[[]]],[11,"hash","rustacuda::memory","",38,[[]]],[11,"hash","rustacuda::stream","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","rustacuda","",29,[[]]],[11,"hash","","",30,[[]]],[11,"borrow","rustacuda::memory","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"from_iter","rustacuda::context","",3,[[["intoiterator",8]],["contextflags",3]]],[11,"from_iter","rustacuda::event","",12,[[["intoiterator",8]],["eventflags",3]]],[11,"from_iter","rustacuda::memory::array","",20,[[["intoiterator",8]],["arrayobjectflags",3]]],[11,"from_iter","rustacuda::stream","",26,[[["intoiterator",8]],["streamflags",3]]],[11,"from_iter","","",27,[[["intoiterator",8]],["streamwaiteventflags",3]]],[11,"from_iter","rustacuda","",29,[[["intoiterator",8]],["cudaflags",3]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",20,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",29,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",20,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",29,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",20,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",29,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::context","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::event","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory::array","",20,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::stream","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda","",29,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::memory","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","rustacuda::module","",42,[[["formatter",3]],["result",6]]],[11,"new","rustacuda::memory","Allocate device memory and place val into it.",32,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate device memory, but do not initialize it.",32,[[],["cudaresult",6]]],[11,"zeroed","","Allocate device memory and fill it with zeroes (<code>0u8</code>).",32,[[],["cudaresult",6]]],[11,"from_raw","","Constructs a DeviceBox from a raw pointer.",32,[[]]],[11,"from_device","","Constructs a DeviceBox from a DevicePointer.",32,[[["devicepointer",3]]]],[11,"into_device","","Consumes the DeviceBox, returning the wrapped …",32,[[["devicebox",3]],["devicepointer",3]]],[11,"as_device_ptr","","Returns the contained device pointer without consuming …",32,[[],["devicepointer",3]]],[11,"drop","","Destroy a <code>DeviceBox</code>, returning an error.",32,[[["devicebox",3]],[["dropresult",6],["devicebox",3]]]],[11,"uninitialized","","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>…",33,[[["usize",15]],["cudaresult",6]]],[11,"zeroed","","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>…",33,[[["usize",15]],["cudaresult",6]]],[11,"from_raw_parts","","Creates a <code>DeviceBuffer<T></code> directly from the raw …",33,[[["usize",15],["devicepointer",3]],["devicebuffer",3]]],[11,"drop","","Destroy a <code>DeviceBuffer</code>, returning an error.",33,[[["devicebuffer",3]],[["devicebuffer",3],["dropresult",6]]]],[11,"from_slice","","Allocate a new device buffer of the same size as <code>slice</code>, …",33,[[],["cudaresult",6]]],[11,"from_slice_async","","Asynchronously allocate a new buffer of the same size as …",33,[[["stream",3]],["cudaresult",6]]],[11,"len","","Returns the number of elements in the slice.",34,[[],["usize",15]]],[11,"is_empty","","Returns <code>true</code> if the slice has a length of 0.",34,[[],["bool",15]]],[11,"as_ptr","","Return a raw device-pointer to the slice’s buffer.",34,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable device-pointer to the slice’s …",34,[[]]],[11,"split_at","","Divides one DeviceSlice into two at a given index.",34,[[["usize",15]]]],[11,"split_at_mut","","Divides one mutable DeviceSlice into two at a given index.",34,[[["usize",15]]]],[11,"chunks","","Returns an iterator over <code>chunk_size</code> elements of the slice …",34,[[["usize",15]],["devicechunks",3]]],[11,"chunks_mut","","Returns an iterator over <code>chunk_size</code> elements of the slice …",34,[[["usize",15]],["devicechunksmut",3]]],[11,"as_device_ptr","","Returns a <code>DevicePointer<T></code> to the buffer.",34,[[],["devicepointer",3]]],[11,"from_raw_parts","","Forms a slice from a <code>DevicePointer</code> and a length.",34,[[["usize",15],["devicepointer",3]],["deviceslice",3]]],[11,"from_raw_parts_mut","","Performs the same functionality as <code>from_raw_parts</code>, except …",34,[[["usize",15],["devicepointer",3]],["deviceslice",3]]],[11,"new","","Allocate a new page-locked buffer large enough to hold …",37,[[["usize",15]],["cudaresult",6]]],[11,"from_slice","","Allocate a new page-locked buffer of the same size as …",37,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate a new page-locked buffer large enough to hold …",37,[[["usize",15]],["cudaresult",6]]],[11,"as_slice","","Extracts a slice containing the entire buffer.",37,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire buffer.",37,[[]]],[11,"from_raw_parts","","Creates a <code>LockedBuffer<T></code> directly from the raw …",37,[[["usize",15]],["lockedbuffer",3]]],[11,"drop","","Destroy a <code>LockedBuffer</code>, returning an error.",37,[[["lockedbuffer",3]],[["dropresult",6],["lockedbuffer",3]]]],[11,"new","","Allocate unified memory and place val into it.",38,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate unified memory without initializing it.",38,[[],["cudaresult",6]]],[11,"from_raw","","Constructs a UnifiedBox from a raw pointer.",38,[[]]],[11,"from_unified","","Constructs a UnifiedBox from a UnifiedPointer.",38,[[["unifiedpointer",3]]]],[11,"into_unified","","Consumes the UnifiedBox, returning the wrapped …",38,[[["unifiedbox",3]],["unifiedpointer",3]]],[11,"as_unified_ptr","","Returns the contained unified pointer without consuming …",38,[[],["unifiedpointer",3]]],[11,"leak","","Consumes and leaks the UnifiedBox, returning a mutable …",38,[[["unifiedbox",3]]]],[11,"drop","","Destroy a <code>UnifiedBox</code>, returning an error.",38,[[["unifiedbox",3]],[["dropresult",6],["unifiedbox",3]]]],[11,"new","","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>…",39,[[["usize",15]],["cudaresult",6]]],[11,"from_slice","","Allocate a new unified buffer of the same size as <code>slice</code>, …",39,[[],["cudaresult",6]]],[11,"uninitialized","","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>…",39,[[["usize",15]],["cudaresult",6]]],[11,"as_slice","","Extracts a slice containing the entire buffer.",39,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire buffer.",39,[[]]],[11,"as_unified_ptr","","Returns a <code>UnifiedPointer<T></code> to the buffer.",39,[[],["unifiedpointer",3]]],[11,"from_raw_parts","","Creates a <code>UnifiedBuffer<T></code> directly from the raw …",39,[[["unifiedpointer",3],["usize",15]],["unifiedbuffer",3]]],[11,"drop","","Destroy a <code>UnifiedBuffer</code>, returning an error.",39,[[["unifiedbuffer",3]],[["dropresult",6],["unifiedbuffer",3]]]],[11,"wrap","","Wrap the given raw pointer in a DevicePointer. The given …",40,[[],["devicepointer",3]]],[11,"as_raw","","Returns the contained pointer as a raw pointer. The …",40,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer. …",40,[[]]],[11,"is_null","","Returns true if the pointer is null.",40,[[],["bool",15]]],[11,"null","","Returns a null device pointer.",40,[[],["devicepointer",3]]],[11,"offset","","Calculates the offset from a device pointer.",40,[[["isize",15]],["devicepointer",3]]],[11,"wrapping_offset","","Calculates the offset from a device pointer using …",40,[[["isize",15]],["devicepointer",3]]],[11,"add","","Calculates the offset from a pointer (convenience for …",40,[[["usize",15]],["devicepointer",3]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",40,[[["usize",15]],["devicepointer",3]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",40,[[["usize",15]],["devicepointer",3]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",40,[[["usize",15]],["devicepointer",3]]],[11,"wrap","","Wrap the given raw pointer in a UnifiedPointer. The given …",41,[[],["unifiedpointer",3]]],[11,"as_raw","","Returns the contained pointer as a raw pointer.",41,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer.",41,[[]]],[11,"is_null","","Returns true if the pointer is null.",41,[[],["bool",15]]],[11,"null","","Returns a null unified pointer.",41,[[],["unifiedpointer",3]]],[11,"offset","","Calculates the offset from a unified pointer.",41,[[["isize",15]],["unifiedpointer",3]]],[11,"wrapping_offset","","Calculates the offset from a unified pointer using …",41,[[["isize",15]],["unifiedpointer",3]]],[11,"add","","Calculates the offset from a pointer (convenience for …",41,[[["usize",15]],["unifiedpointer",3]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",41,[[["usize",15]],["unifiedpointer",3]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",41,[[["usize",15]],["unifiedpointer",3]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",41,[[["usize",15]],["unifiedpointer",3]]]],"p":[[4,"CacheConfig"],[4,"ResourceLimit"],[4,"SharedMemoryConfig"],[3,"ContextFlags"],[3,"Context"],[3,"UnownedContext"],[3,"ContextStack"],[3,"StreamPriorityRange"],[3,"CurrentContext"],[4,"DeviceAttribute"],[3,"Device"],[4,"CudaError"],[3,"EventFlags"],[4,"EventStatus"],[3,"Event"],[3,"GridSize"],[3,"BlockSize"],[4,"FunctionAttribute"],[3,"Function"],[4,"ArrayFormat"],[3,"ArrayObjectFlags"],[3,"ArrayDescriptor"],[3,"ArrayObject"],[8,"CopyDestination"],[8,"AsyncCopyDestination"],[3,"Module"],[3,"StreamFlags"],[3,"StreamWaitEventFlags"],[3,"Stream"],[3,"CudaFlags"],[3,"CudaApiVersion"],[3,"Devices"],[3,"DeviceBox"],[3,"DeviceBuffer"],[3,"DeviceSlice"],[3,"DeviceChunks"],[3,"DeviceChunksMut"],[3,"LockedBuffer"],[3,"UnifiedBox"],[3,"UnifiedBuffer"],[3,"DevicePointer"],[3,"UnifiedPointer"],[3,"Symbol"]]},\
"rustacuda_core":{"doc":"RustaCUDA-core is a minimal subset of RustaCUDA which is …","i":[[3,"DevicePointer","rustacuda_core","A pointer to device memory.",null,null],[3,"UnifiedPointer","","A pointer to unified memory.",null,null],[8,"DeviceCopy","","Marker trait for types which can safely be copied to or …",null,null],[24,"DeviceCopy","","",null,null],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["devicepointer",3]],["bool",15]]],[11,"eq","","",1,[[["unifiedpointer",3]],["bool",15]]],[11,"cmp","","",0,[[["devicepointer",3]],["ordering",4]]],[11,"cmp","","",1,[[["unifiedpointer",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["devicepointer",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["unifiedpointer",3]],[["option",4],["ordering",4]]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[]]],[11,"clone","","",1,[[]]],[11,"wrap","","Wrap the given raw pointer in a DevicePointer. The given …",0,[[]]],[11,"as_raw","","Returns the contained pointer as a raw pointer. The …",0,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer. …",0,[[]]],[11,"is_null","","Returns true if the pointer is null.",0,[[],["bool",15]]],[11,"null","","Returns a null device pointer.",0,[[]]],[11,"offset","","Calculates the offset from a device pointer.",0,[[["isize",15]]]],[11,"wrapping_offset","","Calculates the offset from a device pointer using …",0,[[["isize",15]]]],[11,"add","","Calculates the offset from a pointer (convenience for …",0,[[["usize",15]]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",0,[[["usize",15]]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",0,[[["usize",15]]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",0,[[["usize",15]]]],[11,"wrap","","Wrap the given raw pointer in a UnifiedPointer. The given …",1,[[]]],[11,"as_raw","","Returns the contained pointer as a raw pointer.",1,[[]]],[11,"as_raw_mut","","Returns the contained pointer as a mutable raw pointer.",1,[[]]],[11,"is_null","","Returns true if the pointer is null.",1,[[],["bool",15]]],[11,"null","","Returns a null unified pointer.",1,[[]]],[11,"offset","","Calculates the offset from a unified pointer.",1,[[["isize",15]]]],[11,"wrapping_offset","","Calculates the offset from a unified pointer using …",1,[[["isize",15]]]],[11,"add","","Calculates the offset from a pointer (convenience for …",1,[[["usize",15]]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",1,[[["usize",15]]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",1,[[["usize",15]]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",1,[[["usize",15]]]]],"p":[[3,"DevicePointer"],[3,"UnifiedPointer"]]},\
"rustcoalescence":{"doc":"","i":[[0,"args","rustcoalescence","",null,null],[0,"parse","rustcoalescence::args","",null,null],[5,"into_ron_args","rustcoalescence::args::parse","Transform the <code>command_args</code> into a RON <code>String</code>",null,[[["commandargs",3]],["string",3]]],[5,"try_parse_subcommand_arguments","","",null,[[["str",15],["str",15]],[["partition",3],["result",6],["deserializestate",8]]]],[4,"RustcoalescenceArgs","rustcoalescence::args","",null,null],[13,"Simulate","","",0,null],[13,"Replay","","",0,null],[3,"CommandArgs","","",null,null],[12,"args","","",1,null],[3,"SimulateArgs","","",null,null],[12,"common","","",2,null],[12,"event_log","","",2,null],[12,"scenario","","",2,null],[12,"reporters","","",2,null],[3,"SimulateArgsRaw","","",null,null],[12,"speciation_probability_per_generation","","",3,null],[12,"sample_percentage","","",3,null],[12,"seed","","",3,null],[12,"algorithm","","",3,null],[12,"event_log","","",3,null],[12,"scenario","","",3,null],[12,"reporters","","",3,null],[5,"deserialize_state_event_log","","",null,[[["partition",3]],[["option",4],["result",4]]]],[3,"CommonArgs","","",null,null],[12,"speciation_probability_per_generation","","",4,null],[12,"sample_percentage","","",4,null],[12,"seed","","",4,null],[12,"algorithm","","",4,null],[4,"Algorithm","","",null,null],[4,"Scenario","","",null,null],[13,"SpatiallyExplicit","","",5,null],[13,"NonSpatial","","",5,null],[13,"SpatiallyImplicit","","",5,null],[13,"AlmostInfinite","","",5,null],[4,"ScenarioRaw","","",null,null],[13,"SpatiallyExplicit","","",6,null],[13,"NonSpatial","","",6,null],[13,"SpatiallyImplicit","","",6,null],[13,"AlmostInfinite","","",6,null],[3,"InMemoryArgs","","",null,null],[12,"habitat_map","","",7,null],[12,"dispersal_map","","",7,null],[4,"MapLoadingMode","","",null,null],[13,"FixMe","","",8,null],[13,"OffByOne","","",8,null],[13,"Strict","","",8,null],[3,"InMemoryArgsRaw","","",null,null],[12,"habitat_map","","",9,null],[12,"dispersal_map","","",9,null],[12,"loading_mode","","",9,null],[3,"NonSpatialArgsRaw","","",null,null],[12,"area","","",10,null],[12,"deme","","",10,null],[12,"spatial","","",10,null],[3,"ReplayArgs","","",null,null],[12,"log","","",11,null],[12,"reporters","","",11,null],[4,"ReplayMode","","",null,null],[13,"Strict","","",12,null],[13,"WarnOnly","","",12,null],[3,"ReplayArgsRaw","","",null,null],[12,"logs","","",13,null],[12,"mode","","",13,null],[12,"reporters","","",13,null],[0,"cli","rustcoalescence","",null,null],[0,"replay","rustcoalescence::cli","",null,null],[5,"replay_with_logger","rustcoalescence::cli::replay","",null,[[["partitioning",8],["commandargs",3]],["result",6]]],[0,"simulate","rustcoalescence::cli","",null,null],[0,"monolithic","rustcoalescence::cli::simulate","",null,null],[5,"simulate_with_logger_monolithic","rustcoalescence::cli::simulate::monolithic","",null,[[["commandargs",3]],["result",6]]],[0,"impl","rustcoalescence::cli::simulate","",null,null],[5,"simulate_with_logger","","",null,[[["scenarioargs",4],["reporter",8],["box",3],["localpartition",8],["commonargs",3]],["result",6]]],[0,"maps","rustcoalescence","",null,null],[5,"load_dispersal_map","rustcoalescence::maps","",null,[[["path",3],["maploadingmode",4]],[["result",6],["array2d",3]]]],[5,"load_habitat_map","","",null,[[["array2d",3],["path",3],["maploadingmode",4]],[["result",6],["array2d",3]]]],[5,"fix_habitat_map","","",null,[[["array2d",3],["array2d",3]]]],[5,"fix_dispersal_map","","",null,[[["array2d",3],["array2d",3]]]],[0,"minimal_logger","rustcoalescence","",null,null],[3,"MinimalLogger","rustcoalescence::minimal_logger","",null,null],[0,"reporter","rustcoalescence","",null,null],[3,"DynamicReporterContext","rustcoalescence::reporter","",null,null],[12,"reporter","","",14,null],[11,"new","","",14,[[["reporterpluginvec",3]]]],[0,"tiff","rustcoalescence","",null,null],[0,"private","rustcoalescence::tiff","",null,null],[8,"TiffDataType","rustcoalescence::tiff::private","",null,null],[18,"BIT_WIDTH","","",15,null],[18,"SAMPLE_FORMAT","","",15,null],[10,"decoding_buffer_from_data","","",15,[[],["decodingbuffer",4]]],[8,"TiffDataType","rustcoalescence::tiff","",null,null],[5,"load_map_from_tiff","","Loads a 2D map from TIFF file at <code>path</code> with the data type <code>D</code>…",null,[[["bool",15],["path",3]],[["result",6],["array2d",3]]]],[7,"MINIMAL_LOGGER","rustcoalescence","",null,null],[5,"main","","",null,[[],["result",6]]],[14,"match_scenario_algorithm","","",null,null],[11,"from","rustcoalescence::args","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"approx_from","","",4,[[],["result",4]]],[11,"approx_into","","",4,[[],["result",4]]],[11,"value_from","","",4,[[],["result",4]]],[11,"value_into","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"approx_from","","",16,[[],["result",4]]],[11,"approx_into","","",16,[[],["result",4]]],[11,"value_from","","",16,[[],["result",4]]],[11,"value_into","","",16,[[],["result",4]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"vzip","","",16,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"approx_from","","",5,[[],["result",4]]],[11,"approx_into","","",5,[[],["result",4]]],[11,"value_from","","",5,[[],["result",4]]],[11,"value_into","","",5,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"approx_from","","",11,[[],["result",4]]],[11,"approx_into","","",11,[[],["result",4]]],[11,"value_from","","",11,[[],["result",4]]],[11,"value_into","","",11,[[],["result",4]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"approx_from","","",12,[[],["result",4]]],[11,"approx_into","","",12,[[],["result",4]]],[11,"value_from","","",12,[[],["result",4]]],[11,"value_into","","",12,[[],["result",4]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"approx_from","","",13,[[],["result",4]]],[11,"approx_into","","",13,[[],["result",4]]],[11,"value_from","","",13,[[],["result",4]]],[11,"value_into","","",13,[[],["result",4]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"vzip","","",13,[[]]],[11,"from","rustcoalescence::minimal_logger","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"approx_from","","",17,[[],["result",4]]],[11,"approx_into","","",17,[[],["result",4]]],[11,"value_from","","",17,[[],["result",4]]],[11,"value_into","","",17,[[],["result",4]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"vzip","","",17,[[]]],[11,"from","rustcoalescence::reporter","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"approx_from","","",14,[[],["result",4]]],[11,"approx_into","","",14,[[],["result",4]]],[11,"value_from","","",14,[[],["result",4]]],[11,"value_into","","",14,[[],["result",4]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"vzip","","",14,[[]]],[11,"from","rustcoalescence::args","",5,[[["scenarioraw",4]]]],[11,"clone","","",8,[[],["maploadingmode",4]]],[11,"default","","",8,[[]]],[11,"default","","",12,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence::reporter","",14,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence::args","",16,[[["formatter",3]],["result",6]]],[11,"try_from","","",7,[[["inmemoryargsraw",3]],["result",4]]],[11,"enabled","rustcoalescence::minimal_logger","",17,[[["metadata",3]],["bool",15]]],[11,"log","","",17,[[["record",3]]]],[11,"flush","","",17,[[]]],[11,"clap","rustcoalescence::args","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[],["bool",15]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[],["bool",15]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize_state","","",2,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",3,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",16,[[["partition",3]],["result",4]]],[11,"deserialize_state","","",11,[[["partition",3]],["result",4]]],[11,"try_build","rustcoalescence::reporter","",14,[[],[["result",6],["filteredreporter",3]]]],[11,"try_parse","rustcoalescence::args","",2,[[["commandargs",3]],["result",6]]],[11,"try_parse","","",11,[[["commandargs",3]],["result",6]]]],"p":[[4,"RustcoalescenceArgs"],[3,"CommandArgs"],[3,"SimulateArgs"],[3,"SimulateArgsRaw"],[3,"CommonArgs"],[4,"Scenario"],[4,"ScenarioRaw"],[3,"InMemoryArgs"],[4,"MapLoadingMode"],[3,"InMemoryArgsRaw"],[3,"NonSpatialArgsRaw"],[3,"ReplayArgs"],[4,"ReplayMode"],[3,"ReplayArgsRaw"],[3,"DynamicReporterContext"],[8,"TiffDataType"],[4,"Algorithm"],[3,"MinimalLogger"]]},\
"rustcoalescence_algorithms":{"doc":"","i":[[8,"AlgorithmArguments","rustcoalescence_algorithms","",null,null],[16,"Arguments","","",0,null],[8,"Algorithm","","",null,null],[16,"Error","","",1,null],[16,"Rng","","",1,null],[16,"LineageReference","","",1,null],[16,"LineageStore","","",1,null],[10,"initialise_and_simulate","","ErrorsReturns a <code>Self::Error</code> if initialising or running …",1,[[["iterator",8],["originpresampler",3],["u64",15]],["result",4]]]],"p":[[8,"AlgorithmArguments"],[8,"Algorithm"]]},\
"rustcoalescence_algorithms_cuda":{"doc":"","i":[[4,"CudaAlgorithm","rustcoalescence_algorithms_cuda","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"initialise_and_simulate","","",0,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]]],"p":[[4,"CudaAlgorithm"]]},\
"rustcoalescence_algorithms_cuda_kernel":{"doc":"","i":[],"p":[]},\
"rustcoalescence_algorithms_cuda_kernel_ptx_jit":{"doc":"","i":[[0,"host","rustcoalescence_algorithms_cuda_kernel_ptx_jit","",null,null],[0,"arguments","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host","",null,null],[0,"compiler","","",null,null],[3,"PtxJITCompiler","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",null,null],[4,"PtxJITResult","","",null,null],[13,"Cached","","",0,null],[13,"Recomputed","","",0,null],[14,"compilePtxJITwithArguments","rustcoalescence_algorithms_cuda_kernel_ptx_jit","",null,null],[11,"from","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"new","","",1,[[["cstr",3]]]],[11,"with_arguments","","",1,[[["option",4]],["ptxjitresult",4]]]],"p":[[4,"PtxJITResult"],[3,"PtxJITCompiler"]]},\
"rustcoalescence_algorithms_cuda_kernel_specialiser":{"doc":"","i":[[14,"specialise","rustcoalescence_algorithms_cuda_kernel_specialiser","",null,null],[14,"rerun_if_specialisation_changed","","",null,null]],"p":[]},\
"rustcoalescence_algorithms_independent":{"doc":"","i":[[4,"IndependentAlgorithm","rustcoalescence_algorithms_independent","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"initialise_and_simulate","","",0,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]]],"p":[[4,"IndependentAlgorithm"]]},\
"rustcoalescence_algorithms_monolithic":{"doc":"","i":[[0,"classical","rustcoalescence_algorithms_monolithic","",null,null],[4,"ClassicalAlgorithm","rustcoalescence_algorithms_monolithic::classical","",null,null],[0,"gillespie","rustcoalescence_algorithms_monolithic","",null,null],[3,"GillespieAlgorithm","rustcoalescence_algorithms_monolithic::gillespie","",null,null],[0,"skipping_gillespie","rustcoalescence_algorithms_monolithic","",null,null],[3,"SkippingGillespieAlgorithm","rustcoalescence_algorithms_monolithic::skipping_gillespie","",null,null],[11,"from","rustcoalescence_algorithms_monolithic::classical","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","rustcoalescence_algorithms_monolithic::gillespie","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","rustcoalescence_algorithms_monolithic::skipping_gillespie","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_monolithic::classical","",0,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_monolithic::gillespie","",1,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]],[11,"initialise_and_simulate","rustcoalescence_algorithms_monolithic::skipping_gillespie","",2,[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]]]],"p":[[4,"ClassicalAlgorithm"],[3,"GillespieAlgorithm"],[3,"SkippingGillespieAlgorithm"]]},\
"rustcoalescence_scenarios":{"doc":"","i":[[0,"almost_infinite","rustcoalescence_scenarios","",null,null],[3,"AlmostInfiniteScenario","rustcoalescence_scenarios::almost_infinite","",null,null],[3,"AlmostInfiniteArguments","","",null,null],[12,"radius","","",0,null],[12,"sigma","","",0,null],[0,"non_spatial","rustcoalescence_scenarios","",null,null],[3,"NonSpatialScenario","rustcoalescence_scenarios::non_spatial","",null,null],[3,"NonSpatialArguments","","",null,null],[12,"area","","",1,null],[12,"deme","","",1,null],[0,"spatially_explicit","rustcoalescence_scenarios","",null,null],[3,"SpatiallyExplicitScenario","rustcoalescence_scenarios::spatially_explicit","",null,null],[3,"InMemoryArguments","","",null,null],[12,"habitat_map","","",2,null],[12,"dispersal_map","","",2,null],[3,"NonNegativeF64Error","","",null,null],[0,"spatially_implicit","rustcoalescence_scenarios","",null,null],[3,"SpatiallyImplicitScenario","rustcoalescence_scenarios::spatially_implicit","",null,null],[3,"SpatiallyImplicitArguments","","",null,null],[12,"local_area","","",3,null],[12,"local_deme","","",3,null],[12,"meta_area","","",3,null],[12,"meta_deme","","",3,null],[12,"migration_probability_per_generation","","",3,null],[8,"ScenarioArguments","rustcoalescence_scenarios","",null,null],[16,"Arguments","","",4,null],[8,"Scenario","","",null,null],[16,"Error","","",5,null],[16,"Habitat","","",5,null],[16,"OriginSampler","","",5,null],[16,"Decomposition","","",5,null],[16,"LineageReference","","",5,null],[16,"LineageStore","","",5,null],[16,"DispersalSampler","","",5,null],[16,"TurnoverRate","","",5,null],[16,"SpeciationProbability","","",5,null],[10,"initialise","","ErrorsReturns a <code>Self::Error</code> if initialising the scenario …",5,[[["positiveunitf64",3]],["result",4]]],[10,"build","","Inside rustcoalescence, I know that only specialised …",5,[[]]],[10,"sample_habitat","","",5,[[["originpresampler",3],["iterator",8]]]],[10,"habitat","","",5,[[]]],[10,"decompose","","",5,[[["u32",15],["nonzerou32",3]]]],[11,"from","rustcoalescence_scenarios::almost_infinite","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"approx_from","","",6,[[],["result",4]]],[11,"approx_into","","",6,[[],["result",4]]],[11,"value_from","","",6,[[],["result",4]]],[11,"value_into","","",6,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"approx_from","","",0,[[],["result",4]]],[11,"approx_into","","",0,[[],["result",4]]],[11,"value_from","","",0,[[],["result",4]]],[11,"value_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","rustcoalescence_scenarios::non_spatial","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"approx_from","","",7,[[],["result",4]]],[11,"approx_into","","",7,[[],["result",4]]],[11,"value_from","","",7,[[],["result",4]]],[11,"value_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"approx_from","","",1,[[],["result",4]]],[11,"approx_into","","",1,[[],["result",4]]],[11,"value_from","","",1,[[],["result",4]]],[11,"value_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","rustcoalescence_scenarios::spatially_explicit","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"approx_from","","",8,[[],["result",4]]],[11,"approx_into","","",8,[[],["result",4]]],[11,"value_from","","",8,[[],["result",4]]],[11,"value_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"vzip","","",8,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"approx_from","","",2,[[],["result",4]]],[11,"approx_into","","",2,[[],["result",4]]],[11,"value_from","","",2,[[],["result",4]]],[11,"value_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"approx_from","","",9,[[],["result",4]]],[11,"approx_into","","",9,[[],["result",4]]],[11,"value_from","","",9,[[],["result",4]]],[11,"value_into","","",9,[[],["result",4]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"vzip","","",9,[[]]],[11,"from","rustcoalescence_scenarios::spatially_implicit","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"approx_from","","",10,[[],["result",4]]],[11,"approx_into","","",10,[[],["result",4]]],[11,"value_from","","",10,[[],["result",4]]],[11,"value_into","","",10,[[],["result",4]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"vzip","","",10,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"approx_from","","",3,[[],["result",4]]],[11,"approx_into","","",3,[[],["result",4]]],[11,"value_from","","",3,[[],["result",4]]],[11,"value_into","","",3,[[],["result",4]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"initialise","rustcoalescence_scenarios::almost_infinite","",6,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",6,[[]]],[11,"sample_habitat","","",6,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",6,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",6,[[]]],[11,"initialise","rustcoalescence_scenarios::non_spatial","",7,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",7,[[]]],[11,"sample_habitat","","",7,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",7,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",7,[[]]],[11,"initialise","rustcoalescence_scenarios::spatially_explicit","",8,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",8,[[]]],[11,"sample_habitat","","",8,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",8,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",8,[[]]],[11,"initialise","rustcoalescence_scenarios::spatially_implicit","",10,[[["positiveunitf64",3]],["result",4]]],[11,"build","","",10,[[]]],[11,"sample_habitat","","",10,[[["originpresampler",3],["iterator",8]]]],[11,"decompose","","",10,[[["u32",15],["nonzerou32",3]]]],[11,"habitat","","",10,[[]]],[11,"fmt","rustcoalescence_scenarios::almost_infinite","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::non_spatial","",1,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::spatially_explicit","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::spatially_implicit","",3,[[["formatter",3]],["result",6]]],[11,"fmt","rustcoalescence_scenarios::spatially_explicit","",9,[[["formatter",3]],["result",6]]],[11,"deserialize","rustcoalescence_scenarios::almost_infinite","",0,[[],["result",4]]],[11,"deserialize","rustcoalescence_scenarios::non_spatial","",1,[[],["result",4]]],[11,"deserialize","rustcoalescence_scenarios::spatially_implicit","",3,[[],["result",4]]]],"p":[[3,"AlmostInfiniteArguments"],[3,"NonSpatialArguments"],[3,"InMemoryArguments"],[3,"SpatiallyImplicitArguments"],[8,"ScenarioArguments"],[8,"Scenario"],[3,"AlmostInfiniteScenario"],[3,"NonSpatialScenario"],[3,"SpatiallyExplicitScenario"],[3,"NonNegativeF64Error"],[3,"SpatiallyImplicitScenario"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);