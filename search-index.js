var searchIndex = JSON.parse('{\
"array2d":{"doc":"<code>Array2D</code> provides a fixed sized two-dimensional array. It …","t":[3,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Array2D","DimensionMismatch","Error","IndexOutOfBounds","IndicesOutOfBounds","NotEnoughElements","as_column_major","as_columns","as_row_major","as_rows","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","column_iter","column_len","columns_iter","elements_column_major_iter","elements_row_major_iter","eq","eq","fill_with","filled_by_column_major","filled_by_row_major","filled_with","fmt","fmt","from","from","from_column_major","from_columns","from_iter_column_major","from_iter_row_major","from_row_major","from_rows","get","get_column_major","get_mut","get_mut_column_major","get_mut_row_major","get_row_major","index","index_mut","into","into","into_row_major","ne","ne","num_columns","num_elements","num_rows","row_iter","row_len","rows_iter","set","set_column_major","set_row_major","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","un_borrow_mut"],"q":["array2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A fixed sized two-dimensional array.","The dimensions given did not match the elements provided","An error that can arise during the use of an <code>Array2D</code>.","The given index in row or column major order was out of …","The given indices were out of bounds.","There were not enough elements to fill the array.","Collects the <code>Array2D</code> into a <code>Vec</code> of elements in column …","Collects the <code>Array2D</code> into a <code>Vec</code> of columns, each of which …","Collects the <code>Array2D</code> into a <code>Vec</code> of elements in row major …","Collects the <code>Array2D</code> into a <code>Vec</code> of rows, each of which …","","","","","","","","Returns an <code>Iterator</code> over references to all elements in …","The number of elements in each column, i.e. the number of …","Returns an <code>Iterator</code> over all columns. Each <code>Item</code> is itself …","Returns an <code>Iterator</code> over references to all elements in …","Returns an <code>Iterator</code> over references to all elements in …","","","Renamed to <code>filled_with</code>.","Creates a new <code>Array2D</code> with the specified number of rows …","Creates a new <code>Array2D</code> with the specified number of rows …","Creates a new <code>Array2D</code> with the specified number of rows …","","","","","Creates a new <code>Array2D</code> from the given flat slice in column …","Creates a new <code>Array2D</code> from a slice of columns, each of …","Creates a new <code>Array2D</code> with the specified number of rows …","Creates a new <code>Array2D</code> with the specified number of rows …","Creates a new <code>Array2D</code> from the given flat slice in row …","Creates a new <code>Array2D</code> from a slice of rows, each of which …","Returns a reference to the element at the given <code>row</code> and …","Returns a reference to the element at the given index in …","Returns a mutable reference to the element at the given …","Returns a mutable reference to the element at the given …","Returns a mutable reference to the element at the given …","Returns a reference to the element at the given index in …","Returns the element at the given indices, given as …","Returns a mutable version of the element at the given …","","","Converts the <code>Array2D</code> into a <code>Vec</code> of elements in row major …","","","The number of columns.","The total number of elements, i.e. the product of <code>num_rows</code>…","The number of rows.","Returns an <code>Iterator</code> over references to all elements in …","The number of elements in each row, i.e. the number of …","Returns an <code>Iterator</code> over all rows. Each <code>Item</code> is itself …","Changes the element at given <code>row</code> and <code>column</code> to <code>element</code>. …","Changes the element at the given <code>index</code> to <code>element</code>, in …","Changes the element at the given <code>index</code> to <code>element</code>, in row …","","","","","","","",""],"i":[0,1,0,1,1,1,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,2],"f":[null,null,null,null,null,null,[[],["vec",3]],[[],[["vec",3],["vec",3]]],[[],["vec",3]],[[],[["vec",3],["vec",3]]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[]],[[],["array2d",3]],[[]],[[["usize",15]],[["error",4],["result",4]]],[[],["usize",15]],[[]],[[]],[[]],[[["array2d",3]],["bool",15]],[[["error",4]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]],[["error",4],["result",4]]],[[],[["error",4],["result",4]]],[[["usize",15]],[["error",4],["result",4]]],[[["usize",15]],[["error",4],["result",4]]],[[["usize",15]],[["error",4],["result",4]]],[[],[["error",4],["result",4]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[["array2d",3]],["bool",15]],[[["error",4]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],[["error",4],["result",4]]],[[],["usize",15]],[[]],[[["usize",15]],[["error",4],["result",4]]],[[["usize",15]],[["error",4],["result",4]]],[[["usize",15]],[["error",4],["result",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]]],"p":[[4,"Error"],[3,"Array2D"]]},\
"float_next_after":{"doc":"","t":[8,10],"n":["NextAfter","next_after"],"q":["float_next_after",""],"d":["Returns the next representable float value in the …",""],"i":[0,1],"f":[null,[[]]],"p":[[8,"NextAfter"]]},\
"necsim_core":{"doc":"","tn":["ReporterGroup","ReporterGroupType","ReporterUnGroup","cogs","deref","event","impl_finalise","impl_report","intrinsics","landscape","lineage","reporter","simulation","ActiveLineageSampler","BackedUp","Backup","CoalescenceRngSample","CoalescenceSampler","DispersalSampler","EmigrationExit","EmptyActiveLineageSamplerError","EventSampler","GloballyCoherentLineageStore","Habitat","Habitat","HabitatPrimeableRng","ImmigrationEntry","LineageReference","LineageReferenceIterator","LineageStore","LocallyCoherentLineageStore","LocationIterator","MinSpeciationTrackingEventSampler","OptionallyPeekableActiveLineageSampler","OriginSampler","PeekableActiveLineageSampler","PrimeableRng","RngCore","RngSampler","Seed","SeparableDispersalSampler","SingularActiveLineageSampler","SpeciationProbability","SpeciationSample","SplittableRng","TurnoverRate","__contracts_impl_backup_unchecked","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","as_datatype","backup","backup","backup_unchecked","backup_unchecked","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","cmp","contains","contains","count","deref","emigrate","emigrate","eq","eq","equivalent_datatype","extract_lineage_from_its_location_globally_coherent","extract_lineage_from_its_location_globally_coherent","extract_lineage_from_its_location_locally_coherent","extract_lineage_from_its_location_locally_coherent","fmt","fmt","fmt","from","from","from","from","from_origin_sampler","from_origin_sampler","from_seed","full_upper_bound_size_hint","full_upper_bound_size_hint","get","get","get_active_global_lineage_reference_at_indexed_location","get_active_global_lineage_reference_at_indexed_location","get_active_local_lineage_references_at_location_unordered","get_active_local_lineage_references_at_location_unordered","get_extent","get_extent","get_habitat_at_location","get_habitat_at_location","get_last_event_time","get_last_event_time","get_number_total_lineages","get_number_total_lineages","get_self_dispersal_probability_at_location","get_self_dispersal_probability_at_location","get_speciation_probability_at_location","get_speciation_probability_at_location","get_total_habitat","get_total_habitat","get_turnover_rate_at_location","get_turnover_rate_at_location","habitat","habitat","hash","immigrate_globally_coherent","immigrate_globally_coherent","immigrate_locally_coherent","immigrate_locally_coherent","insert_lineage_to_indexed_location_globally_coherent","insert_lineage_to_indexed_location_globally_coherent","insert_lineage_to_indexed_location_locally_coherent","insert_lineage_to_indexed_location_locally_coherent","insert_new_lineage_to_indexed_location","insert_new_lineage_to_indexed_location","into","into","into","into","iter_active_locations","iter_active_locations","iter_local_lineage_references","iter_local_lineage_references","map_indexed_location_to_u64_injective","map_indexed_location_to_u64_injective","ne","new","new","next_optional_immigration","next_optional_immigration","number_active_lineages","number_active_lineages","optionally_emigrate","optionally_emigrate","partial_cmp","partial_cmp","peek_next_immigration","peek_next_immigration","peek_optional_time_of_next_event","peek_time_of_next_event","peek_time_of_next_event","pointer","pointer_mut","pop_active_lineage_indexed_location_prior_event_time","pop_active_lineage_indexed_location_prior_event_time","prime_with","prime_with_habitat","prime_with_habitat","push_active_lineage_to_indexed_location","push_active_lineage_to_indexed_location","replace_active_lineage","replace_min_speciation","resume","sample_2d_normal","sample_2d_normal","sample_2d_standard_normal","sample_2d_standard_normal","sample_coalescence_index","sample_dispersal_from_location","sample_dispersal_from_location","sample_event","sample_event","sample_event_for_lineage_at_indexed_location_time_or_emigrate","sample_event_for_lineage_at_indexed_location_time_or_emigrate","sample_exponential","sample_exponential","sample_index","sample_index","sample_index_u32","sample_index_u32","sample_interaction_at_location","sample_interaction_at_location","sample_non_self_dispersal_from_location","sample_non_self_dispersal_from_location","sample_u64","sample_uniform","sample_uniform","seed_from_u64","seed_from_u64","split","split_to_stream","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","with_next_active_lineage_indexed_location_prior_event_time","with_next_active_lineage_indexed_location_prior_event_time","Coalescence","Dispersal","Dispersal","Dispersal","DispersalEvent","EventType","LineageInteraction","Maybe","None","PackedEvent","Speciation","Speciation","SpeciationEvent","TypedEvent","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","event_time","event_time","event_time","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","global_lineage_reference","global_lineage_reference","global_lineage_reference","hash","hash","hash","hash","interaction","interaction","into","into","into","into","into","into","into","ne","ne","ne","origin","origin","origin","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prior_time","prior_time","prior_time","serialize","serialize","serialize","serialize","target","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","value_into","value_into","ceil","cos","exp","floor","fract","ln","log2","neg_exp","round","safe_sqrt","sin","sqrt","IndexedLocation","LandscapeExtent","Location","LocationIterator","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","as_datatype","as_datatype","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","contains","count","count","deserialize","deserialize","eq","eq","eq","equivalent_datatype","equivalent_datatype","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","height","index","into","into","into","into","into_iter","iter","location","ne","ne","ne","new","new","new","next","partial_cmp","partial_cmp","pointer","pointer","pointer_mut","pointer_mut","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","width","x","x","y","y","GlobalLineageReference","Lineage","MigratingLineage","__contracts_impl_backup_unchecked","__contracts_impl_backup_unchecked","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","as_datatype","as_datatype","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","coalescence_rng_sample","count","count","deserialize","dispersal_origin","dispersal_target","emigrate","eq","eq","eq","equivalent_datatype","equivalent_datatype","event_time","fmt","fmt","fmt","fmt","from","from","from","global_reference","global_reference","hash","immigrate","indexed_location","into","into","into","is_active","last_event_time","move_to_indexed_location","ne","ne","new","partial_cmp","partial_cmp","pointer","pointer","pointer_mut","pointer_mut","prior_time","remove_from_location","serialize","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","FilteredReporter","NullReporter","ReportDispersal","ReportProgress","ReportSpeciation","Reporter","ReporterCombinator","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","boolean","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","finalise","finalise","finalise","finalise_boxed","finalise_boxed","finalise_boxed","fmt","fmt","fmt","from","from","from","from","from","initialise","initialise","initialise","into","into","into","new","report_dispersal","report_dispersal","report_dispersal","report_dispersal","report_progress","report_progress","report_progress","report_progress","report_speciation","report_speciation","report_speciation","report_speciation","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","used","value_from","value_from","value_from","value_into","value_into","value_into","wen","And","Boolean","False","Or","RESULT","RESULT","True","VALUE","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","Ignored","MaybeUsed","Used","approx_from","approx_into","borrow","borrow_mut","from","from","from","into","maybe_use_in","try_from","try_from","try_into","try_into","type_id","value_from","value_into","Simulation","__contracts_impl_backup_unchecked","active_lineage_sampler","active_lineage_sampler_mut","approx_from","approx_into","borrow","borrow_mut","borrow_mut","builder","coalescence_sampler","dispersal_sampler","emigration_exit","emigration_exit_mut","event_sampler","event_sampler_mut","fmt","from","get_balanced_remaining_work","habitat","immigration_entry_mut","into","lend_to_cuda","lend_to_cuda_mut","lineage_store","lineage_store_mut","partial","peek_time_of_next_event","rng_mut","simulate","simulate_incremental_early_stop","speciation_probability","try_from","try_from","try_into","try_into","turnover_rate","type_id","un_borrow_mut","value_from","value_into","with_mut_split_active_lineage_sampler_and_rng","with_mut_split_event_sampler_and_rng","active_lineager_sampler","emigration_exit","event_sampler","PartialSimulation","approx_from","approx_into","borrow","borrow_mut","coalescence_sampler","dispersal_sampler","emigration_exit","event_sampler","from","habitat","into","lineage_reference","lineage_store","speciation_probability","try_from","try_from","try_into","try_into","turnover_rate","type_id","value_from","value_into","with_mut_split_event_sampler","with_split_event_sampler","PartialSimulation","approx_from","approx_into","borrow","borrow_mut","from","habitat","into","lineage_reference","lineage_store","try_from","try_from","try_into","try_into","type_id","value_from","value_into","PartialSimulation","approx_from","approx_into","borrow","borrow_mut","coalescence_sampler","dispersal_sampler","emigration_exit","from","habitat","into","lineage_reference","lineage_store","speciation_probability","try_from","try_from","try_into","try_into","turnover_rate","type_id","value_from","value_into","with_mut_split_emigration_exit"],"q":["necsim_core","","","","","","","","","","","","","necsim_core::cogs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_core::eventnecsim_core::intrinsics","","","","","","","","","","","","necsim_core::landscape","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_core::lineage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_core::reporter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_core::reporter::boolean","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_core::reporter::used","","","","","","","","","","","","","","","","","","","necsim_core::simulation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_core::simulation::partial","","","necsim_core::simulation::partial::active_lineager_sampler","","","","","","","","","","","","","","","","","","","","","","","","","necsim_core::simulation::partial::emigration_exit","","","","","","","","","","","","","","","","","necsim_core::simulation::partial::event_sampler","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","Contracts","","","","Contracts","Contracts","Contracts","Contracts","","","","","","","","","","","","","","","Contracts","Contracts","Contracts","Contracts","","","Contracts","Contracts","","","","","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","","","","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","","","","","","","","","Contracts","Contracts","","","","Contracts","Contracts","","","Contracts","Contracts","","","","","","Contracts","Contracts","","","Contracts","Contracts","","","","Contracts","Contracts","","","","","","","","Contracts","Contracts","Contracts","","","Contracts","Contracts","","","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contracts","Contractsontracts","Contracts","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","Contracts","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","This <code>initialise</code> hook can be used to commit to make final …","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a builder for building <code>Simulation</code>. On the builder, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,6,7,8,6,9,7,8,6,9,6,10,10,10,10,7,8,6,9,7,8,6,9,9,9,6,9,11,11,6,8,12,12,6,9,6,4,4,12,12,8,6,9,7,8,6,9,3,3,5,2,2,3,3,12,12,4,4,11,11,11,11,13,13,3,3,14,14,15,15,11,11,16,16,2,2,9,4,4,12,12,4,4,12,12,13,13,7,8,6,9,4,4,3,3,11,11,6,6,9,17,17,13,13,18,18,6,9,17,17,19,20,20,6,6,13,13,21,22,22,13,13,23,24,8,25,25,25,25,6,26,26,25,25,27,27,25,25,25,25,25,25,28,28,14,14,5,25,25,5,5,29,29,9,7,7,8,8,6,6,9,9,7,7,8,8,6,6,9,9,7,8,6,9,7,8,6,9,7,8,6,9,13,13,30,0,31,32,0,0,0,30,30,0,31,32,0,0,31,33,32,34,30,35,36,31,33,32,34,30,35,36,31,33,32,34,30,35,36,31,33,32,34,30,35,36,33,32,34,30,35,36,33,32,34,30,35,36,33,32,34,30,33,32,34,30,33,32,34,30,35,36,33,35,36,33,32,34,30,35,36,31,31,33,33,33,33,32,34,30,30,35,36,33,35,36,33,32,34,30,34,36,31,33,32,34,30,35,36,32,34,30,33,35,36,33,32,34,30,33,35,36,33,32,34,30,34,36,33,32,34,30,35,36,31,31,33,33,32,32,34,34,30,30,35,35,36,36,31,31,33,33,32,32,34,34,30,30,35,35,36,36,33,31,33,32,34,30,35,36,31,33,32,34,30,35,36,31,33,32,34,30,35,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,38,39,40,37,38,39,40,39,40,37,38,39,40,37,38,39,40,37,39,40,37,39,40,39,40,37,39,40,39,40,37,39,40,39,40,37,38,39,40,37,38,39,39,40,39,40,37,40,37,38,39,40,38,37,40,37,39,40,37,39,40,38,39,40,39,40,39,40,39,40,37,39,40,37,37,38,38,39,39,40,40,37,37,38,38,39,39,40,40,37,38,39,40,37,38,39,40,37,38,39,40,37,37,39,37,39,0,0,0,41,42,41,43,42,41,43,42,41,42,41,43,42,41,43,42,41,43,41,43,41,42,42,41,42,41,42,42,43,41,42,42,41,42,42,41,41,43,42,41,43,42,43,42,41,43,43,41,43,42,43,43,43,41,42,43,41,42,41,42,41,42,42,43,41,41,43,41,41,41,43,43,42,42,41,41,43,43,42,42,41,43,42,41,43,42,41,43,42,0,0,44,44,44,0,0,45,46,47,45,46,47,0,45,46,47,45,46,47,45,44,46,45,44,46,45,46,47,45,45,45,46,47,45,44,46,45,46,47,46,44,45,46,47,44,45,46,47,44,45,46,47,45,45,46,46,47,47,45,45,46,46,47,47,45,46,47,0,45,46,47,45,46,47,46,0,0,0,0,48,49,0,50,51,52,51,52,51,52,51,52,51,52,51,52,51,51,52,52,51,51,52,52,51,52,51,52,51,52,0,0,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57],"f":[null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["backedup",3]],[[],["backedup",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["speciationsample",3]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[["location",3]],["bool",15]],[[["location",3]],["bool",15]],[[],["i32",15]],[[]],[[],["globallineagereference",3]],[[],["globallineagereference",3]],[[["coalescencerngsample",3]],["bool",15]],[[],["bool",15]],[[]],[[["positivef64",3]]],[[["positivef64",3]]],[[["positivef64",3]]],[[["positivef64",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["originsampler",8]]],[[["originsampler",8]]],[[]],[[],["u64",15]],[[],["u64",15]],[[],[["option",4],["lineage",3]]],[[],[["option",4],["lineage",3]]],[[["indexedlocation",3]],[["globallineagereference",3],["option",4]]],[[["indexedlocation",3]],[["globallineagereference",3],["option",4]]],[[["location",3]]],[[["location",3]]],[[],["landscapeextent",3]],[[],["landscapeextent",3]],[[["location",3]],["u32",15]],[[["location",3]],["u32",15]],[[],["nonnegativef64",3]],[[],["nonnegativef64",3]],[[],["usize",15]],[[],["usize",15]],[[["location",3]],["closedunitf64",3]],[[["location",3]],["closedunitf64",3]],[[["location",3]],["closedunitf64",3]],[[["location",3]],["closedunitf64",3]],[[],["u64",15]],[[],["u64",15]],[[["location",3]],["nonnegativef64",3]],[[["location",3]],["nonnegativef64",3]],[[]],[[]],[[]],[[["positivef64",3],["indexedlocation",3],["globallineagereference",3]]],[[["positivef64",3],["indexedlocation",3],["globallineagereference",3]]],[[["positivef64",3],["indexedlocation",3],["globallineagereference",3]]],[[["positivef64",3],["indexedlocation",3],["globallineagereference",3]]],[[["indexedlocation",3]]],[[["indexedlocation",3]]],[[["indexedlocation",3]]],[[["indexedlocation",3]]],[[["positivef64",3],["partialsimulation",3],["indexedlocation",3],["globallineagereference",3]]],[[["positivef64",3],["partialsimulation",3],["indexedlocation",3],["globallineagereference",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["indexedlocation",3]],["u64",15]],[[["indexedlocation",3]],["u64",15]],[[["coalescencerngsample",3]],["bool",15]],[[]],[[["positivef64",3],["indexedlocation",3],["closedunitf64",3]]],[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]],[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[["positivef64",3],["partialsimulation",3],["nonnegativef64",3],["indexedlocation",3],["location",3]],["option",4]],[[["positivef64",3],["partialsimulation",3],["nonnegativef64",3],["indexedlocation",3],["location",3]],["option",4]],[[],[["option",4],["ordering",4]]],[[],[["option",4],["ordering",4]]],[[],[["option",4],["migratinglineage",3]]],[[],[["option",4],["migratinglineage",3]]],[[],[["option",4],["positivef64",3]]],[[],[["result",4],["positivef64",3],["emptyactivelineagesamplererror",3]]],[[],[["result",4],["positivef64",3],["emptyactivelineagesamplererror",3]]],[[]],[[]],[[["partialsimulation",3]],["option",4]],[[["partialsimulation",3]],["option",4]],[[["u64",15]]],[[["indexedlocation",3],["u64",15]]],[[["indexedlocation",3],["u64",15]]],[[["partialsimulation",3],["positivef64",3],["indexedlocation",3]]],[[["partialsimulation",3],["positivef64",3],["indexedlocation",3]]],[[["option",4],["lineage",3]],[["option",4],["lineage",3]]],[[["option",4],["speciationsample",3]],[["option",4],["speciationsample",3]]],[[],["simulation",3]],[[["f64",15],["nonnegativef64",3]]],[[["f64",15],["nonnegativef64",3]]],[[]],[[]],[[["u32",15]],["u32",15]],[[["location",3]],["location",3]],[[["location",3]],["location",3]],[[["closedunitf64",3]],["bool",15]],[[["closedunitf64",3]],["bool",15]],[[["positivef64",3],["partialsimulation",3],["nonnegativef64",3],["indexedlocation",3]],[["option",4],["packedevent",3]]],[[["positivef64",3],["partialsimulation",3],["nonnegativef64",3],["indexedlocation",3]],[["option",4],["packedevent",3]]],[[["positivef64",3]],["nonnegativef64",3]],[[["positivef64",3]],["nonnegativef64",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["location",3],["coalescencerngsample",3]]],[[["location",3],["coalescencerngsample",3]]],[[["location",3]],["location",3]],[[["location",3]],["location",3]],[[],["u64",15]],[[],["closedunitf64",3]],[[],["closedunitf64",3]],[[["u64",15]]],[[["u64",15]]],[[]],[[["u64",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["partialsimulation",3],["fnonce",8]],["bool",15]],[[["partialsimulation",3],["fnonce",8]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["packedevent",3]],[[],["eventtype",4]],[[],["dispersal",3]],[[],["lineageinteraction",4]],[[],["speciationevent",3]],[[],["dispersalevent",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[["eventtype",4]],["ordering",4]],[[["dispersal",3]],["ordering",4]],[[["lineageinteraction",4]],["ordering",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[["eventtype",4]],["bool",15]],[[["dispersal",3]],["bool",15]],[[["lineageinteraction",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["packedevent",3]]],[[]],[[["speciationevent",3]]],[[["dispersalevent",3]]],[[["typedevent",4]]],[[]],[[]],[[]],[[["option",4],["globallineagereference",3]]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["eventtype",4]],["bool",15]],[[["dispersal",3]],["bool",15]],[[["lineageinteraction",4]],["bool",15]],null,null,null,[[],[["option",4],["ordering",4]]],[[["eventtype",4]],[["ordering",4],["option",4]]],[[["dispersal",3]],[["ordering",4],["option",4]]],[[["lineageinteraction",4]],[["ordering",4],["option",4]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["nonnegativef64",3]],["closedunitf64",3]],[[["f64",15]],["f64",15]],[[["nonnegativef64",3]],["nonnegativef64",3]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["landscapeextent",3]],[[],["location",3]],[[],["indexedlocation",3]],[[]],[[]],[[]],[[["location",3]],["ordering",4]],[[["indexedlocation",3]],["ordering",4]],[[["location",3]],["bool",15]],[[],["i32",15]],[[],["i32",15]],[[],["result",4]],[[],["result",4]],[[["landscapeextent",3]],["bool",15]],[[["location",3]],["bool",15]],[[["indexedlocation",3]],["bool",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["indexedlocation",3]],["location",3]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[],["locationiterator",3]],[[],["location",3]],[[["landscapeextent",3]],["bool",15]],[[["location",3]],["bool",15]],[[["indexedlocation",3]],["bool",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15],["location",3]]],[[],["option",4]],[[["location",3]],[["ordering",4],["option",4]]],[[["indexedlocation",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["globallineagereference",3]],[[],["lineage",3]],[[]],[[]],[[["globallineagereference",3]],["ordering",4]],[[],["ordering",4]],null,[[],["i32",15]],[[],["i32",15]],[[["deserializer",8]],["result",4]],null,null,[[],["globallineagereference",3]],[[["globallineagereference",3]],["bool",15]],[[["backedup",3]],["bool",15]],[[["migratinglineage",3]],["bool",15]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["globallineagereference",3]],null,[[]],[[["positivef64",3],["indexedlocation",3],["globallineagereference",3]]],[[],[["option",4],["indexedlocation",3]]],[[]],[[]],[[]],[[],["bool",15]],[[],["nonnegativef64",3]],[[["indexedlocation",3]]],[[["globallineagereference",3]],["bool",15]],[[["migratinglineage",3]],["bool",15]],[[["indexedlocation",3]]],[[["globallineagereference",3]],[["ordering",4],["option",4]]],[[],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],null,[[["positivef64",3]]],[[["serializer",8]],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3]]],[[["box",3]]],[[["box",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["string",3]]],[[],[["result",4],["string",3]]],[[],[["result",4],["string",3]]],[[]],[[]],[[]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[],["simulationbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["u64",15],["wrapping",3]]],[[]],[[]],[[]],[[["fnonce",8]],["cudaresult",6]],[[["fnonce",8]],["cudaresult",6]],[[]],[[]],null,[[],[["option",4],["positivef64",3]]],[[]],[[]],[[["fnmut",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["typeid",3]],[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],[[["fnonce",8]]],[[["fnonce",8]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],null,null,null,null,[[]],null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[["fnonce",8]]],[[["fnonce",8]]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],null,[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],null,null,null,[[]],null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[["fnonce",8]]]],"p":[[6,"Used"],[8,"OriginSampler"],[8,"LineageStore"],[8,"GloballyCoherentLineageStore"],[8,"RngCore"],[3,"CoalescenceRngSample"],[3,"EmptyActiveLineageSamplerError"],[3,"BackedUp"],[3,"SpeciationSample"],[8,"Backup"],[8,"Habitat"],[8,"LocallyCoherentLineageStore"],[8,"ActiveLineageSampler"],[8,"SeparableDispersalSampler"],[8,"SpeciationProbability"],[8,"TurnoverRate"],[8,"ImmigrationEntry"],[8,"EmigrationExit"],[8,"OptionallyPeekableActiveLineageSampler"],[8,"PeekableActiveLineageSampler"],[8,"PrimeableRng"],[8,"HabitatPrimeableRng"],[8,"SingularActiveLineageSampler"],[8,"MinSpeciationTrackingEventSampler"],[8,"RngSampler"],[8,"DispersalSampler"],[8,"EventSampler"],[8,"CoalescenceSampler"],[8,"SplittableRng"],[4,"LineageInteraction"],[4,"TypedEvent"],[4,"EventType"],[3,"PackedEvent"],[3,"Dispersal"],[3,"SpeciationEvent"],[3,"DispersalEvent"],[3,"LandscapeExtent"],[3,"LocationIterator"],[3,"Location"],[3,"IndexedLocation"],[3,"GlobalLineageReference"],[3,"MigratingLineage"],[3,"Lineage"],[8,"Reporter"],[3,"FilteredReporter"],[3,"ReporterCombinator"],[3,"NullReporter"],[8,"Or"],[8,"And"],[8,"Boolean"],[3,"False"],[3,"True"],[3,"MaybeUsed"],[3,"Simulation"],[3,"PartialSimulation"],[3,"PartialSimulation"],[3,"PartialSimulation"]]},\
"necsim_core_bond":{"doc":"","tn":["ClosedUnitF64","NonNegativeF64","NonZeroOneU64","Partition","PositiveF64","PositiveUnitF64","add","add","add","add","add_assign","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","as_datatype","as_datatype","as_datatype","as_datatype","as_datatype","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","count","count","count","count","count","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent_datatype","equivalent_datatype","equivalent_datatype","equivalent_datatype","equivalent_datatype","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get","hash","hash","hash","hash","hash","infinity","infinity","into","into","into","into","into","into","max_after","mul","mul","mul","mul","mul","ne","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","new_unchecked","one","one_minus","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partitions","pointer","pointer","pointer","pointer","pointer","pointer_mut","pointer_mut","pointer_mut","pointer_mut","pointer_mut","rank","serialize","serialize","serialize","serialize","serialize","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","value_into","zero","zero"],"q":["necsim_core_bondd":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","Errors","Errors","Errors","Errors","Safety","Safety","Creates a non-zero, non-one u64 without checking the …","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,2,1,3,1,4,5,2,6,3,1,4,5,2,6,3,1,4,2,6,3,1,4,5,2,6,3,1,4,5,2,6,3,1,4,5,2,6,3,1,4,5,2,6,3,1,4,2,6,3,1,4,2,6,3,1,4,5,2,6,1,3,3,1,1,1,4,2,2,2,6,6,3,1,4,2,6,3,1,4,5,2,6,3,3,1,1,1,1,1,1,4,5,2,2,2,6,3,1,4,2,6,3,1,4,2,6,1,2,3,1,4,5,2,6,2,3,1,1,1,2,4,3,1,4,2,6,3,1,4,2,3,3,3,3,1,1,1,4,2,2,2,6,6,5,3,1,4,2,6,3,1,4,2,6,5,3,1,4,2,6,1,3,1,4,5,2,6,3,3,3,1,1,1,4,4,4,5,5,2,2,2,6,6,6,3,3,1,1,4,4,5,5,2,2,6,6,5,3,1,4,5,2,6,3,1,4,5,2,6,3,1,4,5,2,6,3,1],"f":[null,null,null,null,null,null,[[["positivef64",3]],["positivef64",3]],[[["closedunitf64",3]]],[[]],[[["nonnegativef64",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["closedunitf64",3]],[[],["nonnegativef64",3]],[[],["nonzerooneu64",3]],[[],["partition",3]],[[],["positivef64",3]],[[],["positiveunitf64",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[["nonzerooneu64",3]],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["bool",15]],[[["f64",15]],["bool",15]],[[],["bool",15]],[[["f64",15]],["bool",15]],[[["positivef64",3]],["bool",15]],[[["nonzerooneu64",3]],["bool",15]],[[],["bool",15]],[[["nonnegativef64",3]],["bool",15]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["positiveunitf64",3]]],[[]],[[]],[[["usize",15]]],[[["closedunitf64",3]]],[[["positivef64",3]]],[[["u32",15]]],[[["u64",15]]],[[]],[[]],[[]],[[["nonzerou64",3]]],[[["nonzerou32",3]]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["u64",15]],[[],["f64",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonnegativef64",3]]],[[]],[[["positivef64",3]]],[[["closedunitf64",3]]],[[]],[[]],[[["nonzerooneu64",3]],["bool",15]],[[["f64",15]],[["closedunitf64error",3],["result",4]]],[[["f64",15]],[["result",4],["nonnegativef64error",3]]],[[["u64",15]],[["nonzerooneu64error",3],["result",4]]],[[["f64",15]],[["positivef64error",3],["result",4]]],[[["f64",15]],[["result",4],["positiveunitf64error",3]]],[[["f64",15]]],[[["f64",15]]],[[["u64",15]]],[[["f64",15]]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[["f64",15]],[["option",4],["ordering",4]]],[[],[["option",4],["ordering",4]]],[[["positivef64",3]],[["option",4],["ordering",4]]],[[["f64",15]],[["option",4],["ordering",4]]],[[["nonzerooneu64",3]],[["ordering",4],["option",4]]],[[],[["option",4],["ordering",4]]],[[["nonnegativef64",3]],[["option",4],["ordering",4]]],[[["f64",15]],[["option",4],["ordering",4]]],[[],[["option",4],["ordering",4]]],[[["f64",15]],[["option",4],["ordering",4]]],[[],["nonzerou32",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["iterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u32",15],["nonzerou32",3]],[["partitionrankoutofbounds",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]]],"p":[[3,"NonNegativeF64"],[3,"PositiveF64"],[3,"ClosedUnitF64"],[3,"NonZeroOneU64"],[3,"Partition"],[3,"PositiveUnitF64"]]},\
"necsim_impls_cuda":{"doc":"","t":[0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cogs","event_buffer","value_buffer","rng","CudaRng","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","from_seed","into","lend_to_cuda","lend_to_cuda_mut","prime_with","sample_u64","to_owned","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","EventBuffer","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","lend_to_cuda","lend_to_cuda_mut","new","report_events","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","ValueBuffer","approx_from","approx_into","borrow","borrow_mut","borrow_mut","deref","deref_mut","from","into","lend_to_cuda","lend_to_cuda_mut","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into"],"q":["necsim_impls_cuda","","","necsim_impls_cuda::cogs","necsim_impls_cuda::cogs::rng","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_cuda::event_buffer","","","","","","","","","","","","","","","","","","","","","necsim_impls_cuda::value_buffer","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[],["cudarng",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]],["cudaresult",6]],[[["fnonce",8]],["cudaresult",6]],[[["u64",15]]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["fnonce",8]],["cudaresult",6]],[[["fnonce",8]],["cudaresult",6]],[[["gridsize",3],["usize",15],["blocksize",3]],["cudaresult",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]],["cudaresult",6]],[[["fnonce",8]],["cudaresult",6]],[[["gridsize",3],["blocksize",3]],["cudaresult",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]],[[],["result",4]],[[],["result",4]]],"p":[[3,"CudaRng"],[3,"EventBuffer"],[3,"ValueBuffer"]]},\
"necsim_impls_no_std":{"doc":"","tn":["alias","cache","cogs","decomposition","parallelisation","AliasMethodSampler","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","from","into","new","packed","sample_event","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","AliasMethodSamplerAtom","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","create","fmt","from","into","sample_event","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","DirectMappedCache","approx_from","approx_into","borrow","borrow_mut","capacity","from","insert","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","with_capacity","with_capacity_and_hasher","active_lineage_sampler","coalescence_sampler","dispersal_sampler","emigration_exit","event_sampler","habitat","immigration_entry","lineage_reference","lineage_store","origin_sampler","rng","speciation_probability","turnover_rate","classical","independent","ClassicalActiveLineageSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_last_event_time","__contracts_impl_insert_new_lineage_to_indexed_location","__contracts_impl_number_active_lineages","__contracts_impl_peek_time_of_next_event","__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","__contracts_impl_push_active_lineage_to_indexed_location","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","new","peek_optional_time_of_next_event","peek_optional_time_of_next_event","try_from","try_from","try_into","try_into","type_id","value_from","value_into","IndependentActiveLineageSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_last_event_time","__contracts_impl_insert_new_lineage_to_indexed_location","__contracts_impl_number_active_lineages","__contracts_impl_peek_time_of_next_event","__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","__contracts_impl_push_active_lineage_to_indexed_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","empty","event_time_sampler","fmt","from","into","peek_optional_time_of_next_event","peek_optional_time_of_next_event","replace_active_lineage","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","EventTimeSampler","exp","fixed","geometric","next_event_time_at_indexed_location_weakly_after","poisson","ExpEventTimeSampler","__contracts_impl_next_event_time_at_indexed_location_weakly_after","approx_from","approx_into","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","FixedEventTimeSampler","__contracts_impl_next_event_time_at_indexed_location_weakly_after","approx_from","approx_into","borrow","borrow_mut","borrow_mut","clone","clone_into","default","fmt","from","into","to_owned","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","GeometricEventTimeSampler","__contracts_impl_next_event_time_at_indexed_location_weakly_after","approx_from","approx_into","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","PoissonEventTimeSampler","__contracts_impl_next_event_time_at_indexed_location_weakly_after","approx_from","approx_into","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","conditional","independent","unconditional","ConditionalCoalescenceSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_interaction_at_location","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","get_coalescence_probability_at_location","into","sample_coalescence_at_location","try_from","try_from","try_into","try_into","type_id","value_from","value_into","IndependentCoalescenceSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_interaction_at_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","UnconditionalCoalescenceSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_interaction_at_location","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","almost_infinite_normal","in_memory","non_spatial","spatially_implicit","AlmostInfiniteNormalDispersalSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_self_dispersal_probability_at_location","__contracts_impl_sample_dispersal_from_location","__contracts_impl_sample_non_self_dispersal_from_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","InMemoryDispersalSampler","alias","contract","cumulative","packed_alias","separable_alias","unchecked_new","InMemoryAliasDispersalSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_dispersal_from_location","__contracts_impl_unchecked_new","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","explicit_in_memory_dispersal_check_contract","InMemoryCumulativeDispersalSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_dispersal_from_location","__contracts_impl_unchecked_new","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","InMemoryPackedAliasDispersalSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_dispersal_from_location","__contracts_impl_unchecked_new","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","InMemorySeparableAliasDispersalSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_self_dispersal_probability_at_location","__contracts_impl_sample_dispersal_from_location","__contracts_impl_sample_non_self_dispersal_from_location","__contracts_impl_unchecked_new","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","NonSpatialDispersalSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_self_dispersal_probability_at_location","__contracts_impl_sample_dispersal_from_location","__contracts_impl_sample_non_self_dispersal_from_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","SpatiallyImplicitDispersalSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_self_dispersal_probability_at_location","__contracts_impl_sample_dispersal_from_location","__contracts_impl_sample_non_self_dispersal_from_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","domain","independent","never","DomainEmigrationExit","__contracts_impl_backup_unchecked","__contracts_impl_optionally_emigrate","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","into_iter","is_empty","len","new","next","try_from","try_from","try_into","try_into","type_id","value_from","value_into","IndependentEmigrationExit","__contracts_impl_backup_unchecked","__contracts_impl_optionally_emigrate","approx_from","approx_into","borrow","borrow_mut","choice","fmt","from","into","is_empty","len","new","take","try_from","try_from","try_into","try_into","type_id","value_from","value_into","EmigrationChoice","always","probabilistic","should_lineage_emigrate","AlwaysEmigrationChoice","__contracts_impl_backup_unchecked","__contracts_impl_should_lineage_emigrate","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","ProbabilisticEmigrationChoice","__contracts_impl_backup_unchecked","__contracts_impl_should_lineage_emigrate","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","value_from","value_into","NeverEmigrationExit","__contracts_impl_backup_unchecked","__contracts_impl_optionally_emigrate","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","gillespie","independent","unconditional","GillespieEventSampler","GillespiePartialSimulation","_rng","approx_from","approx_into","borrow","borrow_mut","coalescence_sampler","conditional","dispersal_sampler","from","get_event_rate_at_location","habitat","into","lineage_reference","lineage_store","speciation_probability","try_from","try_from","try_into","try_into","turnover_rate","type_id","unconditional","value_from","value_into","without_emigration_exit","ConditionalGillespieEventSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_event_rate_at_location","__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","UnconditionalGillespieEventSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_event_rate_at_location","__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","IndependentEventSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","into","replace_min_speciation","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","UnconditionalEventSampler","__contracts_impl_backup_unchecked","__contracts_impl_sample_event_for_lineage_at_indexed_location_time_or_emigrate","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","almost_infinite","in_memory","non_spatial","spatially_implicit","AlmostInfiniteHabitat","__contracts_impl_backup_unchecked","__contracts_impl_get_extent","__contracts_impl_get_habitat_at_location","__contracts_impl_get_total_habitat","__contracts_impl_map_indexed_location_to_u64_injective","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","InMemoryHabitat","__contracts_impl_backup_unchecked","__contracts_impl_get_extent","__contracts_impl_get_habitat_at_location","__contracts_impl_get_total_habitat","__contracts_impl_map_indexed_location_to_u64_injective","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","NonSpatialHabitat","__contracts_impl_backup_unchecked","__contracts_impl_get_extent","__contracts_impl_get_habitat_at_location","__contracts_impl_get_total_habitat","__contracts_impl_map_indexed_location_to_u64_injective","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","get_deme","into","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","SpatiallyImplicitHabitat","__contracts_impl_backup_unchecked","__contracts_impl_get_extent","__contracts_impl_get_habitat_at_location","__contracts_impl_get_total_habitat","__contracts_impl_map_indexed_location_to_u64_injective","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","local","meta","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","buffered","never","BufferedImmigrationEntry","__contracts_impl_backup_unchecked","__contracts_impl_next_optional_immigration","__contracts_impl_peek_next_immigration","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","into","push","reset","try_from","try_from","try_into","try_into","type_id","value_from","value_into","NeverImmigrationEntry","__contracts_impl_backup_unchecked","__contracts_impl_next_optional_immigration","__contracts_impl_peek_next_immigration","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","in_memory","InMemoryLineageReference","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from","get_hash","hash","into","ne","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","coherent","independent","globally","locally","almost_infinite","gillespie","AlmostInfiniteLineageStore","__contracts_impl_backup_unchecked","__contracts_impl_emigrate","__contracts_impl_extract_lineage_from_its_location_locally_coherent","__contracts_impl_from_origin_sampler","__contracts_impl_get","__contracts_impl_get_active_global_lineage_reference_at_indexed_location","__contracts_impl_get_active_local_lineage_references_at_location_unordered","__contracts_impl_get_number_total_lineages","__contracts_impl_immigrate_locally_coherent","__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","__contracts_impl_iter_active_locations","__contracts_impl_iter_local_lineage_references","approx_from","approx_into","borrow","borrow_mut","fmt","from","index","into","new","try_from","try_from","try_into","try_into","type_id","value_from","value_into","GillespieLineageStore","__contracts_impl_backup_unchecked","__contracts_impl_emigrate","__contracts_impl_extract_lineage_from_its_location_locally_coherent","__contracts_impl_from_origin_sampler","__contracts_impl_get","__contracts_impl_get_active_global_lineage_reference_at_indexed_location","__contracts_impl_get_active_local_lineage_references_at_location_unordered","__contracts_impl_get_number_total_lineages","__contracts_impl_immigrate_locally_coherent","__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","__contracts_impl_iter_active_locations","__contracts_impl_iter_local_lineage_references","approx_from","approx_into","borrow","borrow_mut","fmt","from","index","into","new","try_from","try_from","try_into","try_into","type_id","value_from","value_into","classical","ClassicalLineageStore","__contracts_impl_backup_unchecked","__contracts_impl_emigrate","__contracts_impl_extract_lineage_from_its_location_locally_coherent","__contracts_impl_from_origin_sampler","__contracts_impl_get","__contracts_impl_get_active_global_lineage_reference_at_indexed_location","__contracts_impl_get_number_total_lineages","__contracts_impl_immigrate_locally_coherent","__contracts_impl_insert_lineage_to_indexed_location_locally_coherent","__contracts_impl_iter_local_lineage_references","approx_from","approx_into","borrow","borrow_mut","fmt","from","index","into","new","try_from","try_from","try_into","try_into","type_id","value_from","value_into","IndependentLineageStore","__contracts_impl_backup_unchecked","__contracts_impl_from_origin_sampler","__contracts_impl_get","__contracts_impl_get_number_total_lineages","__contracts_impl_iter_local_lineage_references","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","almost_infinite","decomposition","in_memory","non_spatial","pre_sampler","spatially_implicit","AlmostInfiniteOriginSampler","__contracts_impl_full_upper_bound_size_hint","__contracts_impl_habitat","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","into_iter","new","next","try_from","try_from","try_into","try_into","type_id","value_from","value_into","DecompositionOriginSampler","__contracts_impl_full_upper_bound_size_hint","__contracts_impl_habitat","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","into_iter","new","next","try_from","try_from","try_into","try_into","type_id","value_from","value_into","InMemoryOriginSampler","__contracts_impl_full_upper_bound_size_hint","__contracts_impl_habitat","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","into_iter","new","next","try_from","try_from","try_into","try_into","type_id","value_from","value_into","NonSpatialOriginSampler","__contracts_impl_full_upper_bound_size_hint","__contracts_impl_habitat","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","into_iter","new","next","try_from","try_from","try_into","try_into","type_id","value_from","value_into","OriginPreSampler","all","approx_from","approx_into","borrow","borrow_mut","deref","deref_mut","fmt","from","get_sample_proportion","into","partition","percentage","try_from","try_from","try_into","try_into","type_id","value_from","value_into","SpatiallyImplicitOriginSampler","__contracts_impl_full_upper_bound_size_hint","__contracts_impl_habitat","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","into_iter","new","next","try_from","try_from","try_into","try_into","type_id","value_from","value_into","aes","fixedseahash","seahash","wyhash","wyrand","AesRng","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","fmt","from","from_seed","into","prime_with","sample_u64","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","FixedSeaHash","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","fmt","from","from_seed","into","prime_with","sample_u64","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","SeaHash","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","fmt","from","from_seed","into","prime_with","sample_u64","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","WyHash","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","fmt","from","from_seed","into","prime_with","sample_u64","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","WyRand","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","fmt","from","from_seed","into","sample_u64","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","spatially_implicit","uniform","SpatiallyImplicitSpeciationProbability","__contracts_impl_backup_unchecked","__contracts_impl_get_speciation_probability_at_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","UniformSpeciationProbability","__contracts_impl_backup_unchecked","__contracts_impl_get_speciation_probability_at_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","uniform","UniformTurnoverRate","__contracts_impl_backup_unchecked","__contracts_impl_get_turnover_rate_at_location","approx_from","approx_into","borrow","borrow_mut","borrow_mut","default","fmt","from","get_uniform_turnover_rate","into","try_from","try_from","try_into","try_into","type_id","un_borrow_mut","value_from","value_into","Decomposition","equal","get_number_of_subdomains","get_subdomain_rank","map_location_to_subdomain_rank","modulo","monolithic","radial","EqualDecomposition","__contracts_impl_backup_unchecked","__contracts_impl_get_number_of_subdomains","__contracts_impl_get_subdomain_rank","__contracts_impl_map_location_to_subdomain_rank","approx_from","approx_into","area","borrow","borrow_mut","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","weight","ModuloDecomposition","__contracts_impl_backup_unchecked","__contracts_impl_get_number_of_subdomains","__contracts_impl_get_subdomain_rank","__contracts_impl_map_location_to_subdomain_rank","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","value_from","value_into","MonolithicDecomposition","__contracts_impl_backup_unchecked","__contracts_impl_get_number_of_subdomains","__contracts_impl_get_subdomain_rank","__contracts_impl_map_location_to_subdomain_rank","approx_from","approx_into","borrow","borrow_mut","default","fmt","from","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","RadialDecomposition","__contracts_impl_backup_unchecked","__contracts_impl_get_number_of_subdomains","__contracts_impl_get_subdomain_rank","__contracts_impl_map_location_to_subdomain_rank","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","new","try_from","try_from","try_into","try_into","type_id","value_from","value_into","independent","monolithic","Absolute","AbsoluteDedupCache","DedupCache","None","Relative","RelativeDedupCache","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","construct","deserialize","deserialize","deserialize","factor","fmt","fmt","fmt","from","from","from","individuals","into","into","into","landscape","monolithic","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","simulate","simulate","reporter","simulate","WaterLevelReporter","WaterLevelReporterConstructor","WaterLevelReporterProxy","WaterLevelReporterStrategy","advance_water_level","approx_from","approx_into","borrow","borrow_mut","from","into","local_partition","new","try_from","try_from","try_into","try_into","type_id","value_from","value_into","water_level","averaging","lockstep","monolithic","optimistic","optimistic_lockstep","simulate","simulate","simulate","simulate","simulate"],"q":["necsim_impls_no_std","","","","","necsim_impls_no_std::alias","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::alias::packed","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cache","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs","","","","","","","","","","","","","necsim_impls_no_std::cogs::active_lineage_sampler","","necsim_impls_no_std::cogs::active_lineage_sampler::classical","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::active_lineage_sampler::independent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler","","","","","","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::exp","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::fixed","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::geometric","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::active_lineage_sampler::independent::event_time_sampler::poisson","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::coalescence_sampler","","","necsim_impls_no_std::cogs::coalescence_sampler::conditional","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::coalescence_sampler::independent","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::coalescence_sampler::unconditional","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler","","","","necsim_impls_no_std::cogs::dispersal_sampler::almost_infinite_normal","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler::in_memory","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::alias","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::contract","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::cumulative","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::packed_alias","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler::in_memory::separable_alias","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler::non_spatial","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::dispersal_sampler::spatially_implicit","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::emigration_exit","","","necsim_impls_no_std::cogs::emigration_exit::domain","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::emigration_exit::independent","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::emigration_exit::independent::choice","","","","necsim_impls_no_std::cogs::emigration_exit::independent::choice::always","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::emigration_exit::independent::choice::probabilistic","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::emigration_exit::never","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::event_sampler","","","necsim_impls_no_std::cogs::event_sampler::gillespie","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::event_sampler::gillespie::conditional","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::event_sampler::gillespie::unconditional","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::event_sampler::independent","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::event_sampler::unconditional","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::habitat","","","","necsim_impls_no_std::cogs::habitat::almost_infinite","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::habitat::in_memory","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::habitat::non_spatial","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::habitat::spatially_implicit","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::immigration_entry","","necsim_impls_no_std::cogs::immigration_entry::buffered","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::immigration_entry::never","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::lineage_reference","necsim_impls_no_std::cogs::lineage_reference::in_memory","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::lineage_store","","necsim_impls_no_std::cogs::lineage_store::coherent","","necsim_impls_no_std::cogs::lineage_store::coherent::globally","","necsim_impls_no_std::cogs::lineage_store::coherent::globally::almost_infinite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::lineage_store::coherent::globally::gillespie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::lineage_store::coherent::locally","necsim_impls_no_std::cogs::lineage_store::coherent::locally::classical","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::lineage_store::independent","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::origin_sampler","","","","","","necsim_impls_no_std::cogs::origin_sampler::almost_infinite","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::origin_sampler::decomposition","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::origin_sampler::in_memory","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::origin_sampler::non_spatial","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::origin_sampler::pre_sampler","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::origin_sampler::spatially_implicit","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::rng","","","","","necsim_impls_no_std::cogs::rng::aes","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::rng::fixedseahash","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::rng::seahash","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::rng::wyhash","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::rng::wyrand","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::speciation_probability","","necsim_impls_no_std::cogs::speciation_probability::spatially_implicit","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::speciation_probability::uniform","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::cogs::turnover_rate","necsim_impls_no_std::cogs::turnover_rate::uniform","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::decomposition","","","","","","","","necsim_impls_no_std::decomposition::equal","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::decomposition::modulo","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::decomposition::monolithic","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::decomposition::radial","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::parallelisation","","necsim_impls_no_std::parallelisation::independent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::parallelisation::independent::individuals","necsim_impls_no_std::parallelisation::independent::landscape","necsim_impls_no_std::parallelisation::independent::monolithic","","necsim_impls_no_std::parallelisation::independent::monolithic::reporter","","","","","","","","","","","","","","","","","","","","","necsim_impls_no_std::parallelisation::monolithic","","","","","necsim_impls_no_std::parallelisation::monolithic::averaging","necsim_impls_no_std::parallelisation::monolithic::lockstep","necsim_impls_no_std::parallelisation::monolithic::monolithic","necsim_impls_no_std::parallelisation::monolithic::optimistic","necsim_impls_no_std::parallelisation::monolithic::optimistic_lockstep"],"d":["","","","","","","","","","","","","","","Contracts","","Contracts","","","","","","","","","","","","","","","","Contracts","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","Creates a new <code>InMemoryAliasDispersalSampler</code> from the …","","","","","","","","","","","","","","","","","","","Creates a new <code>InMemoryCumulativeDispersalSampler</code> from the …","","","","","","","","","","","","","","","","","","Creates a new <code>InMemoryPackedAliasDispersalSampler</code> from the…","","","","","","","","","","","","","","","","","","","Contracts","","","Creates a new <code>InMemorySeparableAliasDispersalSampler</code> from …","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","Contracts","Contracts","Contracts","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pre: all lineages must be active in the lineage store","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","Contracts","","","","Contracts","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","Contracts","","","","","","","","Contracts","","","Errors","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,6,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,24,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,0,28,28,28,28,28,28,0,28,28,29,28,28,28,28,28,28,28,28,28,28,28,0,28,28,28,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,0,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,59,59,59,0,0,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,64,0,0,64,64,0,65,66,64,65,66,64,65,66,64,65,66,64,65,64,65,66,64,66,65,66,64,65,66,64,0,65,66,64,0,0,65,65,66,66,64,64,65,65,66,66,64,64,65,66,64,65,66,64,65,66,64,0,0,0,0,67,0,0,0,68,69,69,69,69,69,69,68,68,69,69,69,69,69,69,69,68,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["aliasmethodsampler",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["aliasmethodsampleratom",3]],[[]],[[],[["vec",3],["aliasmethodsampleratom",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["nonnegativef64",3]],[[["indexedlocation",3],["globallineagereference",3],["positivef64",3],["partialsimulation",3]]],[[],["usize",15]],[[["uniformturnoverrate",3]],[["result",4],["positivef64",3],["emptyactivelineagesamplererror",3]]],[[["partialsimulation",3]],["option",4]],[[["partialsimulation",3],["indexedlocation",3],["positivef64",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["option",4],["positivef64",3]]],[[],[["option",4],["positivef64",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["nonnegativef64",3]],[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]],[[],["usize",15]],[[],[["result",4],["positivef64",3],["emptyactivelineagesamplererror",3]]],[[["partialsimulation",3]],["option",4]],[[["indexedlocation",3],["partialsimulation",3],["globallineagereference",3],["positivef64",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[],[["option",4],["positivef64",3]]],[[],[["option",4],["positivef64",3]]],[[["option",4],["lineage",3]],[["option",4],["lineage",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[["indexedlocation",3],["nonnegativef64",3]],["nonnegativef64",3]],null,null,[[["indexedlocation",3],["nonnegativef64",3]],["nonnegativef64",3]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[],["expeventtimesampler",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["positivef64",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[["indexedlocation",3],["nonnegativef64",3]],["nonnegativef64",3]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[],["fixedeventtimesampler",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[["indexedlocation",3],["nonnegativef64",3]],["nonnegativef64",3]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[],["geometriceventtimesampler",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["positivef64",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[["indexedlocation",3],["nonnegativef64",3]],["nonnegativef64",3]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[],["poissoneventtimesampler",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["positivef64",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[]],[[["coalescencerngsample",3],["location",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[["bool",15],["location",3]],["closedunitf64",3]],[[]],[[["coalescencerngsample",3],["location",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["independentlineagestore",3],["location",3],["coalescencerngsample",3]]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[["coalescencerngsample",3],["location",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,[[]],[[["almostinfinitehabitat",3],["location",3]],["closedunitf64",3]],[[["almostinfinitehabitat",3],["location",3]],["location",3]],[[["almostinfinitehabitat",3],["location",3]],["location",3]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["nonnegativef64",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[["array2d",3]]],null,[[]],[[["location",3]],["location",3]],[[["array2d",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[["array2d",3]],["bool",15]],null,[[]],[[["location",3]],["location",3]],[[["array2d",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["location",3]],["location",3]],[[["array2d",3]]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[["location",3]],["closedunitf64",3]],[[["location",3]],["location",3]],[[["location",3]],["location",3]],[[["array2d",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["nonspatialhabitat",3],["location",3]],["closedunitf64",3]],[[["nonspatialhabitat",3],["location",3]],["location",3]],[[["nonspatialhabitat",3],["location",3]],["location",3]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[["spatiallyimplicithabitat",3],["location",3]],["closedunitf64",3]],[[["spatiallyimplicithabitat",3],["location",3]],["location",3]],[[["spatiallyimplicithabitat",3],["location",3]],["location",3]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["positiveunitf64",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[]],[[["indexedlocation",3],["partialsimulation",3],["location",3],["nonnegativef64",3],["positivef64",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["partialsimulation",3],["indexedlocation",3],["globallineagereference",3],["location",3],["nonnegativef64",3],["positivef64",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,[[["indexedlocation",3],["positivef64",3]],["bool",15]],null,[[]],[[["indexedlocation",3],["positivef64",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["indexedlocation",3],["positivef64",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["closedunitf64",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["indexedlocation",3],["partialsimulation",3],["location",3],["nonnegativef64",3],["positivef64",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],null,null,null,[[]],[[["gillespiepartialsimulation",3],["location",3]],["nonnegativef64",3]],null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],null,[[],["result",4]],[[],["result",4]],[[["partialsimulation",3],["fnonce",8]]],null,[[]],[[["gillespiepartialsimulation",3],["location",3]],["nonnegativef64",3]],[[["partialsimulation",3],["indexedlocation",3],["positivef64",3],["nonnegativef64",3]],[["option",4],["packedevent",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["gillespiepartialsimulation",3],["location",3]],["nonnegativef64",3]],[[["partialsimulation",3],["indexedlocation",3],["positivef64",3],["nonnegativef64",3]],[["option",4],["packedevent",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["indexedlocation",3],["globallineagereference",3],["partialsimulation",3],["nonnegativef64",3],["positivef64",3]],[["option",4],["packedevent",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["option",4],["speciationsample",3]],[["option",4],["speciationsample",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[["partialsimulation",3],["indexedlocation",3],["positivef64",3],["nonnegativef64",3]],[["option",4],["packedevent",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,[[]],[[],["landscapeextent",3]],[[["location",3]],["u32",15]],[[],["u64",15]],[[["indexedlocation",3]],["u64",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["landscapeextent",3]],[[["location",3]],["u32",15]],[[],["u64",15]],[[["indexedlocation",3]],["u64",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["array2d",3],["u32",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["landscapeextent",3]],[[["location",3]],["u32",15]],[[],["u64",15]],[[["indexedlocation",3]],["u64",15]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["u32",15]],[[]],[[["u32",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["landscapeextent",3]],[[["location",3]],["u32",15]],[[],["u64",15]],[[["indexedlocation",3]],["u64",15]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["nonspatialhabitat",3]],[[],["nonspatialhabitat",3]],[[["u32",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,null,[[]],[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]],[[],[["option",4],["migratinglineage",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["migratinglineage",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["option",4],["positivef64",3]],[["migratinglineage",3],["option",4]]],[[],[["option",4],["migratinglineage",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["inmemorylineagereference",3]],[[]],[[["inmemorylineagereference",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]]],[[],["u64",15]],[[]],[[]],[[["inmemorylineagereference",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[]],[[["inmemorylineagereference",3]],["globallineagereference",3]],[[["almostinfinitehabitat",3],["inmemorylineagereference",3],["positivef64",3]]],[[["originsampler",8]]],[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]],[[["indexedlocation",3],["almostinfinitehabitat",3]],[["globallineagereference",3],["option",4]]],[[["almostinfinitehabitat",3],["location",3]]],[[],["usize",15]],[[["indexedlocation",3],["globallineagereference",3],["almostinfinitehabitat",3],["positivef64",3]],["inmemorylineagereference",3]],[[["almostinfinitehabitat",3],["inmemorylineagereference",3],["indexedlocation",3]]],[[["almostinfinitehabitat",3]]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[["inmemorylineagereference",3]]],[[]],[[["originsampler",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["inmemorylineagereference",3]],["globallineagereference",3]],[[["inmemorylineagereference",3],["positivef64",3]]],[[["originsampler",8]]],[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]],[[["indexedlocation",3]],[["globallineagereference",3],["option",4]]],[[["location",3]]],[[],["usize",15]],[[["globallineagereference",3],["indexedlocation",3],["positivef64",3]],["inmemorylineagereference",3]],[[["inmemorylineagereference",3],["indexedlocation",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[["inmemorylineagereference",3]]],[[]],[[["originsampler",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,[[]],[[["inmemorylineagereference",3]],["globallineagereference",3]],[[["inmemorylineagereference",3],["positivef64",3]]],[[["originsampler",8]]],[[["inmemorylineagereference",3]],[["option",4],["lineage",3]]],[[["indexedlocation",3]],[["globallineagereference",3],["option",4]]],[[],["usize",15]],[[["globallineagereference",3],["indexedlocation",3],["positivef64",3]],["inmemorylineagereference",3]],[[["inmemorylineagereference",3],["indexedlocation",3]]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[["inmemorylineagereference",3]]],[[]],[[["originsampler",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[["originsampler",8]]],[[["globallineagereference",3]],[["option",4],["lineage",3]]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["almostinfinitehabitat",3],["originpresampler",3],["u32",15]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["originpresampler",3],["inmemoryhabitat",3]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["nonspatialhabitat",3],["originpresampler",3]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["f64",15]],[[]],[[["u32",15]],["originpresampler",3]],[[["f64",15]],["originpresampler",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["spatiallyimplicithabitat",3],["originpresampler",3]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["aesrng",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u64",15]]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["fixedseahash",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u64",15]]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["seahash",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u64",15]]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["wyhash",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u64",15]]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["wyrand",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,[[]],[[["spatiallyimplicithabitat",3],["location",3]],["closedunitf64",3]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["positiveunitf64",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,[[]],[[["location",3]],["closedunitf64",3]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["closedunitf64",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,[[]],[[["location",3]],["nonnegativef64",3]],[[],["result",4]],[[],["result",4]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["positivef64",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaresult",6],["cudaalloc",8]]],[[],["result",4]],[[],["result",4]],null,null,[[],["nonzerou32",3]],[[],["u32",15]],[[["location",3]],["u32",15]],null,null,null,null,[[]],[[],["nonzerou32",3]],[[],["u32",15]],[[["location",3]],["u32",15]],[[],["result",4]],[[],["result",4]],[[["u32",15],["nonzerou32",3]],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[["u32",15],["nonzerou32",3]],["result",4]],null,[[]],[[],["nonzerou32",3]],[[],["u32",15]],[[["location",3]],["u32",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["nonzerou32",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["nonzerou32",3]],[[],["u32",15]],[[["location",3]],["u32",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["nonzerou32",3]],[[],["u32",15]],[[["location",3]],["u32",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["nonzerou32",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]],[["hash",8],["partialeq",8],["directmappedcache",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["speciationprobability",8],["independentactivelineagesampler",3],["independentlineagestore",3],["globallineagereference",3],["neverimmigrationentry",3],["independentcoalescencesampler",3],["lineage",3],["simulation",3],["independenteventsampler",3],["dispersalsampler",8],["nonzerou64",3],["habitat",8],["neveremigrationexit",3],["dedupcache",4],["vecdeque",3],["turnoverrate",8],["primeablerng",8]]],[[["independentemigrationexit",3],["speciationprobability",8],["independentlineagestore",3],["globallineagereference",3],["neverimmigrationentry",3],["independentcoalescencesampler",3],["lineage",3],["nonzerou64",3],["independentactivelineagesampler",3],["dispersalsampler",8],["independenteventsampler",3],["habitat",8],["simulation",3],["dedupcache",4],["vecdeque",3],["turnoverrate",8],["primeablerng",8]]],null,[[["speciationprobability",8],["nonzerousize",3],["independentactivelineagesampler",3],["independentlineagestore",3],["globallineagereference",3],["neverimmigrationentry",3],["independentcoalescencesampler",3],["lineage",3],["simulation",3],["independenteventsampler",3],["dispersalsampler",8],["nonzerou64",3],["habitat",8],["neveremigrationexit",3],["dedupcache",4],["vecdeque",3],["turnoverrate",8],["primeablerng",8]]],null,null,null,null,[[["nonnegativef64",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["nonnegativef64",3]],null,null,null,null,null,[[["speciationprobability",8],["domainemigrationexit",3],["positivef64",3],["dispersalsampler",8],["lineagereference",8],["simulation",3],["habitat",8],["eventsampler",8],["bufferedimmigrationentry",3],["peekableactivelineagesampler",8],["locallycoherentlineagestore",8],["coalescencesampler",8],["turnoverrate",8],["rngcore",8]]],[[["speciationprobability",8],["domainemigrationexit",3],["dispersalsampler",8],["lineagereference",8],["simulation",3],["habitat",8],["eventsampler",8],["bufferedimmigrationentry",3],["peekableactivelineagesampler",8],["locallycoherentlineagestore",8],["coalescencesampler",8],["turnoverrate",8],["rngcore",8]]],[[["speciationprobability",8],["eventsampler",8],["dispersalsampler",8],["lineagereference",8],["simulation",3],["habitat",8],["neverimmigrationentry",3],["neveremigrationexit",3],["activelineagesampler",8],["locallycoherentlineagestore",8],["coalescencesampler",8],["turnoverrate",8],["rngcore",8]]],[[["speciationprobability",8],["domainemigrationexit",3],["positivef64",3],["dispersalsampler",8],["lineagereference",8],["simulation",3],["habitat",8],["eventsampler",8],["bufferedimmigrationentry",3],["peekableactivelineagesampler",8],["locallycoherentlineagestore",8],["coalescencesampler",8],["turnoverrate",8],["rngcore",8]]],[[["speciationprobability",8],["domainemigrationexit",3],["dispersalsampler",8],["lineagereference",8],["simulation",3],["habitat",8],["eventsampler",8],["bufferedimmigrationentry",3],["peekableactivelineagesampler",8],["locallycoherentlineagestore",8],["coalescencesampler",8],["turnoverrate",8],["rngcore",8]]]],"p":[[3,"AliasMethodSampler"],[3,"AliasMethodSamplerAtom"],[3,"DirectMappedCache"],[3,"ClassicalActiveLineageSampler"],[3,"IndependentActiveLineageSampler"],[8,"EventTimeSampler"],[3,"ExpEventTimeSampler"],[3,"FixedEventTimeSampler"],[3,"GeometricEventTimeSampler"],[3,"PoissonEventTimeSampler"],[3,"ConditionalCoalescenceSampler"],[3,"IndependentCoalescenceSampler"],[3,"UnconditionalCoalescenceSampler"],[3,"AlmostInfiniteNormalDispersalSampler"],[8,"InMemoryDispersalSampler"],[3,"InMemoryAliasDispersalSampler"],[3,"InMemoryCumulativeDispersalSampler"],[3,"InMemoryPackedAliasDispersalSampler"],[3,"InMemorySeparableAliasDispersalSampler"],[3,"NonSpatialDispersalSampler"],[3,"SpatiallyImplicitDispersalSampler"],[3,"DomainEmigrationExit"],[3,"IndependentEmigrationExit"],[8,"EmigrationChoice"],[3,"AlwaysEmigrationChoice"],[3,"ProbabilisticEmigrationChoice"],[3,"NeverEmigrationExit"],[3,"GillespiePartialSimulation"],[8,"GillespieEventSampler"],[3,"ConditionalGillespieEventSampler"],[3,"UnconditionalGillespieEventSampler"],[3,"IndependentEventSampler"],[3,"UnconditionalEventSampler"],[3,"AlmostInfiniteHabitat"],[3,"InMemoryHabitat"],[3,"NonSpatialHabitat"],[3,"SpatiallyImplicitHabitat"],[3,"BufferedImmigrationEntry"],[3,"NeverImmigrationEntry"],[3,"InMemoryLineageReference"],[3,"AlmostInfiniteLineageStore"],[3,"GillespieLineageStore"],[3,"ClassicalLineageStore"],[3,"IndependentLineageStore"],[3,"AlmostInfiniteOriginSampler"],[3,"DecompositionOriginSampler"],[3,"InMemoryOriginSampler"],[3,"NonSpatialOriginSampler"],[3,"OriginPreSampler"],[3,"SpatiallyImplicitOriginSampler"],[3,"AesRng"],[3,"FixedSeaHash"],[3,"SeaHash"],[3,"WyHash"],[3,"WyRand"],[3,"SpatiallyImplicitSpeciationProbability"],[3,"UniformSpeciationProbability"],[3,"UniformTurnoverRate"],[8,"Decomposition"],[3,"EqualDecomposition"],[3,"ModuloDecomposition"],[3,"MonolithicDecomposition"],[3,"RadialDecomposition"],[4,"DedupCache"],[3,"AbsoluteDedupCache"],[3,"RelativeDedupCache"],[8,"WaterLevelReporterConstructor"],[8,"WaterLevelReporterProxy"],[4,"WaterLevelReporterStrategy"]]},\
"necsim_impls_std":{"doc":"","t":[0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,8,0,11,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cogs","event_log","active_lineage_sampler","dispersal_sampler","rng","gillespie","GillespieActiveLineageSampler","__contracts_impl_backup_unchecked","__contracts_impl_get_last_event_time","__contracts_impl_insert_new_lineage_to_indexed_location","__contracts_impl_number_active_lineages","__contracts_impl_peek_time_of_next_event","__contracts_impl_pop_active_lineage_indexed_location_prior_event_time","__contracts_impl_push_active_lineage_to_indexed_location","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","new","peek_optional_time_of_next_event","peek_optional_time_of_next_event","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","in_memory","InMemoryDispersalSampler","error","new","InMemoryDispersalSamplerError","InconsistentDispersalMapSize","InconsistentDispersalProbabilities","approx_from","approx_into","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","pcg","std","Pcg","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","fmt","from","from_seed","into","sample_u64","split","split_to_stream","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","StdRng","__contracts_impl_backup_unchecked","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","fmt","from","from_seed","into","sample_u64","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","EventLogHeader","approx_from","approx_into","borrow","borrow_mut","deserialize","eq","equivalent","fmt","from","into","length","max_time","min_time","ne","new","partial_cmp","recorder","replay","serialize","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","with_dispersal","with_speciation","EventLogRecorder","approx_from","approx_into","borrow","borrow_mut","deserialize","directory","drop","fmt","from","into","record_dispersal","record_speciation","set_event_filter","try_from","try_from","try_from","try_into","try_into","try_new","type_id","value_from","value_into","vzip","EventLogReplay","approx_from","approx_into","borrow","borrow_mut","deserialize","fmt","from","into","into_iter","length","next","segment","try_from","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","with_dispersal","with_speciation","SortedSegment","approx_from","approx_into","borrow","borrow_mut","cmp","eq","equivalent","fmt","from","header","into","into_iter","length","next","partial_cmp","try_from","try_from","try_into","try_into","try_new","type_id","value_from","value_into","vzip"],"q":["necsim_impls_std","","necsim_impls_std::cogs","","","necsim_impls_std::cogs::active_lineage_sampler","necsim_impls_std::cogs::active_lineage_sampler::gillespie","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_std::cogs::dispersal_sampler","necsim_impls_std::cogs::dispersal_sampler::in_memory","","","necsim_impls_std::cogs::dispersal_sampler::in_memory::error","","","","","","","","","","","","","","","","","","","","necsim_impls_std::cogs::rng","","necsim_impls_std::cogs::rng::pcg","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_std::cogs::rng::std","","","","","","","","","","","","","","","","","","","","","","necsim_impls_std::event_log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_std::event_log::recorder","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_std::event_log::replay","","","","","","","","","","","","","","","","","","","","","","","","necsim_impls_std::event_log::replay::segment","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],"f":[null,null,null,null,null,null,null,[[]],[[],["nonnegativef64",3]],[[["partialsimulation",3],["globallineagereference",3],["positivef64",3],["indexedlocation",3]]],[[],["usize",15]],[[],[["emptyactivelineagesamplererror",3],["result",4],["positivef64",3]]],[[["partialsimulation",3]],["option",4]],[[["partialsimulation",3],["positivef64",3],["indexedlocation",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["gillespiepartialsimulation",3]]],[[],[["positivef64",3],["option",4]]],[[],[["positivef64",3],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,null,null,[[["array2d",3]],[["result",4],["inmemorydispersalsamplererror",4]]],null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[["u64",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["stdrng",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[["eventlogheader",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["positivef64",3]],[[],["positivef64",3]],[[["eventlogheader",3]],["bool",15]],[[["bool",15],["usize",15],["positivef64",3]]],[[],[["option",4],["ordering",4]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["path",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["dispersalevent",3]]],[[["speciationevent",3]]],[[["bool",15]]],[[["pathbuf",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["path",3]],["result",6]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["option",4]],null,[[],["result",4]],[[],["result",4]],[[["vec",3],["globbedsortedsegments",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["eventlogheader",3]],[[]],[[]],[[],["usize",15]],[[],["option",4]],[[],[["option",4],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["path",3],["usize",15]],["result",6]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[3,"GillespieActiveLineageSampler"],[8,"InMemoryDispersalSampler"],[4,"InMemoryDispersalSamplerError"],[3,"Pcg"],[3,"StdRng"],[3,"EventLogHeader"],[3,"EventLogRecorder"],[3,"EventLogReplay"],[3,"SortedSegment"]]},\
"necsim_partitioning_core":{"doc":"","t":[16,13,13,13,16,16,8,16,4,8,16,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Auxiliary","Default","Force","Hold","ImmigrantIterator","IsLive","LocalPartition","LocalPartition","MigrationMode","Partitioning","Reporter","approx_from","approx_into","borrow","borrow_mut","clone","clone_into","context","finalise_reporting","from","get_number_of_partitions","get_number_of_partitions","get_partition_rank","get_rank","get_reporter","into","into_local_partition","is_monolithic","is_root","is_root","iterator","migrate_individuals","reduce_global_time_steps","reduce_vote_continue","reduce_vote_min_time","report_progress_sync","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","wait_for_termination","Reporter","ReporterContext","try_build","ImmigrantPopIterator","approx_from","approx_into","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_from","try_into","try_into","type_id","value_from","value_into"],"q":["necsim_partitioning_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_partitioning_core::context","","","necsim_partitioning_core::iterator","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Contracts","","Contracts","Contracts","","","","","Contracts","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","",""],"i":[1,2,2,2,3,3,0,1,0,0,3,2,2,2,2,2,2,0,3,2,1,3,3,1,3,2,1,1,1,3,0,3,3,3,3,3,2,2,2,2,2,2,2,2,3,4,0,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["migrationmode",4]],[[]],null,[[]],[[]],[[],["nonzerou32",3]],[[],["nonzerou32",3]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[["reportercontext",8]],["result",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["migrationmode",4]]],[[["nonnegativef64",3],["u64",15]]],[[["bool",15]],["bool",15]],[[["positivef64",3]],[["result",4],["positivef64",3]]],[[["u64",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,[[],[["result",6],["filteredreporter",3]]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]]],"p":[[8,"Partitioning"],[4,"MigrationMode"],[8,"LocalPartition"],[8,"ReporterContext"],[3,"ImmigrantPopIterator"]]},\
"necsim_partitioning_monolithic":{"doc":"","t":[0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["live","recorded","LiveMonolithicLocalPartition","LiveMonolithicPartitioning","__contracts_impl_finalise_reporting","__contracts_impl_get_number_of_partitions","__contracts_impl_get_number_of_partitions","__contracts_impl_get_partition_rank","__contracts_impl_get_rank","__contracts_impl_get_reporter","__contracts_impl_into_local_partition","__contracts_impl_is_monolithic","__contracts_impl_is_root","__contracts_impl_is_root","__contracts_impl_migrate_individuals","__contracts_impl_reduce_global_time_steps","__contracts_impl_reduce_vote_continue","__contracts_impl_reduce_vote_min_time","__contracts_impl_report_progress_sync","__contracts_impl_wait_for_termination","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","default","fmt","from","from","from_reporter","into","into","try_from","try_from","try_from","try_from","try_from_context","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","vzip","vzip","RecordedMonolithicLocalPartition","__contracts_impl_finalise_reporting","__contracts_impl_get_number_of_partitions","__contracts_impl_get_partition_rank","__contracts_impl_get_reporter","__contracts_impl_is_root","__contracts_impl_migrate_individuals","__contracts_impl_reduce_global_time_steps","__contracts_impl_reduce_vote_continue","__contracts_impl_reduce_vote_min_time","__contracts_impl_report_progress_sync","__contracts_impl_wait_for_termination","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_from_context_and_recorder","try_into","try_into","type_id","value_from","value_into","vzip"],"q":["necsim_partitioning_monolithic","","necsim_partitioning_monolithic::live","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_partitioning_monolithic::recorded","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","",""],"i":[0,0,0,0,1,2,1,1,2,1,2,2,2,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,2,1,1,1,2,2,1,1,2,1,2,1,2,1,2,1,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,[[]],[[],["nonzerou32",3]],[[],["nonzerou32",3]],[[],["u32",15]],[[],["u32",15]],[[]],[[["reportercontext",8]],["result",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["migrationmode",4]]],[[["nonnegativef64",3],["u64",15]]],[[["bool",15]],["bool",15]],[[["positivef64",3]],[["positivef64",3],["result",4]]],[[["u64",15]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["filteredreporter",3],["true",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["reportercontext",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],null,[[]],[[],["nonzerou32",3]],[[],["u32",15]],[[]],[[],["bool",15]],[[["migrationmode",4]]],[[["nonnegativef64",3],["u64",15]]],[[["bool",15]],["bool",15]],[[["positivef64",3]],[["positivef64",3],["result",6]]],[[["u64",15]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[["eventlogrecorder",3],["reportercontext",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[3,"LiveMonolithicLocalPartition"],[3,"LiveMonolithicPartitioning"],[3,"RecordedMonolithicLocalPartition"]]},\
"necsim_partitioning_mpi":{"doc":"","t":[13,13,13,4,4,3,3,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AlreadyInitialised","LiveMonolithic","MissingEventLog","MpiLocalPartition","MpiLocalPartitionError","MpiParallelPartition","MpiPartitioning","MpiPartitioningError","MpiRootPartition","Parallel","RecordedMonolithic","Root","__contracts_impl_finalise_reporting","__contracts_impl_finalise_reporting","__contracts_impl_finalise_reporting","__contracts_impl_get_number_of_partitions","__contracts_impl_get_number_of_partitions","__contracts_impl_get_number_of_partitions","__contracts_impl_get_number_of_partitions","__contracts_impl_get_partition_rank","__contracts_impl_get_partition_rank","__contracts_impl_get_partition_rank","__contracts_impl_get_rank","__contracts_impl_get_reporter","__contracts_impl_get_reporter","__contracts_impl_get_reporter","__contracts_impl_into_local_partition","__contracts_impl_is_monolithic","__contracts_impl_is_root","__contracts_impl_is_root","__contracts_impl_is_root","__contracts_impl_is_root","__contracts_impl_migrate_individuals","__contracts_impl_migrate_individuals","__contracts_impl_migrate_individuals","__contracts_impl_reduce_global_time_steps","__contracts_impl_reduce_global_time_steps","__contracts_impl_reduce_global_time_steps","__contracts_impl_reduce_vote_continue","__contracts_impl_reduce_vote_continue","__contracts_impl_reduce_vote_continue","__contracts_impl_reduce_vote_min_time","__contracts_impl_reduce_vote_min_time","__contracts_impl_reduce_vote_min_time","__contracts_impl_report_progress_sync","__contracts_impl_report_progress_sync","__contracts_impl_report_progress_sync","__contracts_impl_wait_for_termination","__contracts_impl_wait_for_termination","__contracts_impl_wait_for_termination","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","initialise","into","into","into","into","into","into","new","new","report_dispersal","report_dispersal","report_dispersal","report_progress","report_progress","report_progress","report_speciation","report_speciation","report_speciation","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_message_buffer_size","value_from","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","value_into","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["necsim_partitioning_mpi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,0,0,0,0,0,0,2,2,2,4,5,2,4,5,6,2,4,5,2,6,4,5,2,6,6,4,5,6,2,4,5,2,4,5,2,4,5,2,4,5,2,4,5,2,4,5,2,4,5,6,2,1,3,4,5,6,2,1,3,4,5,6,2,1,3,4,5,6,2,1,3,4,5,4,5,2,1,1,3,3,4,5,6,2,1,3,6,4,5,6,2,1,3,4,5,4,5,2,4,5,2,4,5,2,1,3,4,4,5,5,6,6,2,2,1,1,3,3,4,4,5,5,6,6,2,2,1,1,3,3,4,5,6,2,1,3,6,4,5,6,2,1,3,4,5,6,2,1,3,4,5,6,2,1,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["nonzerou32",3]],[[],["nonzerou32",3]],[[],["nonzerou32",3]],[[],["nonzerou32",3]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[["reportercontext",8]],["result",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["migrationmode",4]]],[[["migrationmode",4]]],[[["migrationmode",4]]],[[["nonnegativef64",3],["u64",15]]],[[["nonnegativef64",3],["u64",15]]],[[["nonnegativef64",3],["u64",15]]],[[["bool",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["positivef64",3]],[["result",4],["positivef64",3]]],[[["positivef64",3]],[["result",4],["positivef64",3]]],[[["positivef64",3]],[["result",4],["positivef64",3]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["mpipartitioningerror",4],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["eventlogrecorder",3],["systemcommunicator",3],["universe",3]]],[[["false",3],["systemcommunicator",3],["universe",3],["filteredreporter",3],["true",3],["eventlogrecorder",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"MpiPartitioningError"],[4,"MpiLocalPartition"],[4,"MpiLocalPartitionError"],[3,"MpiParallelPartition"],[3,"MpiRootPartition"],[3,"MpiPartitioning"]]},\
"necsim_plugins_common":{"doc":"","t":[0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["biodiversity","event_counter","execution_time","progress","verbose","BiodiversityReporter","approx_from","approx_into","borrow","borrow_mut","default","deserialize","finalise","finalise_boxed","fmt","from","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_into","try_into","type_id","value_from","value_into","EventCounterReporter","approx_from","approx_into","borrow","borrow_mut","default","deserialize","finalise","finalise_boxed","fmt","from","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_into","try_into","type_id","value_from","value_into","ExecutionTimeReporter","approx_from","approx_into","borrow","borrow_mut","default","deserialize","finalise","finalise_boxed","fmt","from","initialise","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_into","try_into","type_id","value_from","value_into","ProgressReporter","approx_from","approx_into","borrow","borrow_mut","default","deserialize","drop","fmt","from","initialise","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_into","try_into","type_id","value_from","value_into","VerboseReporter","approx_from","approx_into","borrow","borrow_mut","default","deserialize","fmt","from","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_into","try_into","type_id","value_from","value_into"],"q":["necsim_plugins_common","","","","","necsim_plugins_common::biodiversity","","","","","","","","","","","","","","","","","","","","","","necsim_plugins_common::event_counter","","","","","","","","","","","","","","","","","","","","","","necsim_plugins_common::execution_time","","","","","","","","","","","","","","","","","","","","","","","necsim_plugins_common::progress","","","","","","","","","","","","","","","","","","","","","","necsim_plugins_common::verbose","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contracts","","","","","","","","","Contracts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["deserializer",8]],["result",4]],[[]],[[["box",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["deserializer",8]],["result",4]],[[]],[[["box",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["deserializer",8]],["result",4]],[[]],[[["box",3]]],[[["formatter",3]],["result",6]],[[]],[[],[["string",3],["result",4]]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["deserializer",8]],["result",4]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["string",3],["result",4]]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["deserializer",8]],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]]],"p":[[3,"BiodiversityReporter"],[3,"EventCounterReporter"],[3,"ExecutionTimeReporter"],[3,"ProgressReporter"],[3,"VerboseReporter"]]},\
"necsim_plugins_core":{"doc":"","t":[7,7,0,14,0,14,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CORE_VERSION","RUSTC_VERSION","export","export_plugin","import","match_any_reporter_plugin_vec","ReporterPluginDeclaration","ReporterPluginFilter","UnsafeReporterPlugin","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","core_version","deserialise","drop","from","from","from","from","from_reporter","init","into","into","into","rustc_version","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","AnyReporterPluginVec","IgnoreSpeciationIgnoreDispersalIgnoreProgress","IgnoreSpeciationIgnoreDispersalReportProgress","IgnoreSpeciationReportDispersalIgnoreProgress","IgnoreSpeciationReportDispersalReportProgress","ReportSpeciationIgnoreDispersalIgnoreProgress","ReportSpeciationIgnoreDispersalReportProgress","ReportSpeciationReportDispersalIgnoreProgress","ReportSpeciationReportDispersalReportProgress","ReporterPlugin","ReporterPluginLibrary","ReporterPluginVec","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deserialize","drop","finalise","finalise_boxed","fmt","fmt","fmt","from","from","from","from","from_iter","initialise","internal_filter","into","into","into","into","into_iter","library","report_dispersal","report_progress","report_speciation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into"],"q":["necsim_plugins_core","","","","","","necsim_plugins_core::export","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","necsim_plugins_core::import","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,3,3,1,1,1,1,2,2,3,3,1,1,2,3,1,3,1,1,2,2,3,3,1,1,2,2,3,3,1,2,3,1,2,3,1,2,3,0,4,4,4,4,4,4,4,4,0,0,0,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,7,6,5,5,5,6,4,5,6,7,4,4,5,5,5,6,7,4,7,7,5,5,5,5,5,6,6,7,7,4,4,5,5,6,6,7,7,4,4,5,6,7,4,5,6,7,4,5,6,7,4],"f":[null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["reporterpluginfilter",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[["box",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],[["result",4],["string",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["library",3]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[3,"ReporterPluginDeclaration"],[3,"UnsafeReporterPlugin"],[3,"ReporterPluginFilter"],[4,"AnyReporterPluginVec"],[3,"ReporterPluginVec"],[3,"ReporterPlugin"],[3,"ReporterPluginLibrary"]]},\
"necsim_plugins_csv":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CsvReporter","approx_from","approx_into","borrow","borrow_mut","deserialize","finalise","finalise_boxed","fmt","from","initialise","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_into","try_into","type_id","value_from","value_into"],"q":["necsim_plugins_csv","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[]],[[["box",3]]],[[["formatter",3]],["result",6]],[[]],[[],[["string",3],["result",4]]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]]],"p":[[3,"CsvReporter"]]},\
"necsim_plugins_metacommunity":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MetacommunityMigrationReporter","approx_from","approx_into","borrow","borrow_mut","deserialize","finalise","finalise_boxed","fmt","from","into","report_dispersal","report_progress","report_speciation","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip"],"q":["necsim_plugins_metacommunity","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[]],[[["box",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["maybeused",3]]],[[["maybeused",3]]],[[["maybeused",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[3,"MetacommunityMigrationReporter"]]},\
"necsim_plugins_species":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"necsim_plugins_statistics":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"ron":{"doc":"RON is a simple config format which looks similar to Rust …","t":[0,0,0,0,0,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,5,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,6,13,13,13,13,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,3,13,3,4,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,3,13,13,3,13,4,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["de","error","extensions","ser","value","Deserializer","Position","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","col","end","eq","fmt","fmt","from","from","from_bytes","from_bytes","from_reader","from_str","from_str","into","into","line","ne","remainder","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Base64Error","Eof","Error","ErrorCode","ExpectedArray","ExpectedArrayEnd","ExpectedAttribute","ExpectedAttributeEnd","ExpectedBoolean","ExpectedChar","ExpectedComma","ExpectedFloat","ExpectedIdentifier","ExpectedInteger","ExpectedMap","ExpectedMapColon","ExpectedMapEnd","ExpectedOption","ExpectedOptionEnd","ExpectedString","ExpectedStringEnd","ExpectedStruct","ExpectedStructEnd","ExpectedUnit","IntegerOutOfBounds","InvalidEscape","Io","Message","NoSuchExtension","Position","Result","TrailingCharacters","UnclosedBlockComment","UnderscoreAtBeginning","UnexpectedByte","Utf8Error","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","code","col","custom","custom","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","line","ne","ne","position","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Extensions","IMPLICIT_SOME","UNWRAP_NEWTYPES","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","contains","default","deserialize","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_ident","from_iter","hash","insert","intersects","into","is_all","is_empty","ne","not","partial_cmp","remove","serialize","set","sub","sub_assign","to_owned","toggle","try_from","try_into","type_id","Compound","First","Map","PrettyConfig","Rest","Serializer","State","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decimal_floats","default","depth_limit","deserialize","end","end","end","end","end","end","end","enumerate_arrays","extensions","fmt","from","from","from","from","indentor","into","into","into","into","new","new","new_line","separate_tuple_members","serialize","serialize_element","serialize_element","serialize_field","serialize_field","serialize_field","serialize_field","serialize_key","serialize_value","to_owned","to_string","to_string_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_decimal_floats","with_depth_limit","with_enumerate_arrays","with_extensions","with_indentor","with_new_line","with_separate_tuple_members","ser","state","Bool","Char","Float","Float","Integer","Map","Map","Number","Number","Option","Seq","String","Unit","Value","as_f64","as_i64","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_str","get","hash","hash","hash","hash","index","index_mut","insert","into","into","into","into","into_f64","into_rust","is_empty","iter","iter_mut","keys","len","map_to","ne","ne","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","values","values_mut"],"q":["ron","","","","","ron::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ron::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ron::extensions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ron::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ron::ser::Compound","","ron::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Value module.","The RON deserializer.","","","","","","","","","Check if the remaining bytes are whitespace only, …","","","","","","A convenience function for building a deserializer and …","","A convenience function for reading data from a reader and …","A convenience function for building a deserializer and …","","","","","","","","","","","","","","","","","This type represents all possible errors that can occur …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Creates an extension flag from an ident.","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-place.","","","","","","","Pretty serializer configuration.","","The RON serializer.","","","","","","","","","","","","Always include the decimal in floats","","Limit the pretty-ness up to the given depth.","","","","","","","","","Enumerate array items in comments","Enable extensions. Only configures ‘implicit_some’ …","","","","","","Indentation string","","","","","Creates a new <code>Serializer</code>.","Creates a default <code>PrettyConfig</code>.","New line string","Separate tuple members with indentation","","","","","","","","","","","Serializes <code>value</code> and returns it as string.","Serializes <code>value</code> in the recommended RON layout in a …","Serializes <code>value</code> into <code>writer</code>","Serializes <code>value</code> into <code>writer</code> in a pretty way.","","","","","","","","","","","","","Configures whether floats should always include a decimal.…","Limits the pretty-formatting based on the number of …","Configures whether a comment shall be added to every …","Configures extensions","Configures the string sequence used for indentation.","Configures the newlines used for serialization.","Configures whether tuples are single- or multi-line. If …","","","","","A wrapper for <code>f64</code>, which guarantees that the inner value …","","","A <code>Value</code> to <code>Value</code> map.","","A wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.","","","","","","","If the <code>Number</code> is a float, return it. Otherwise return <code>None</code>…","If the <code>Number</code> is an integer, return it. Otherwise return …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a value from a string reference.","Returns the wrapped float.","","","","","","","Inserts a new element, returning the previous element …","","","","","Returns the <code>f64</code> representation of the number regardless …","Tries to deserialize this <code>Value</code> into <code>T</code>.","Returns <code>true</code> if <code>self.len() == 0</code>, <code>false</code> otherwise.","Iterate all key-value pairs.","Iterate all key-value pairs mutably.","Iterate all keys.","Returns the number of elements in the map.","Map this number to a single type using the appropriate …","","","Creates a new, empty <code>Map</code>.","Construct a new number.","Construct a new <code>Float</code>.","","","","","Removes an element by its <code>key</code>.","","","","","","","","","","","","","","","","","","","Iterate all values.","Iterate all values mutably."],"i":[0,0,0,0,0,0,0,1,2,1,2,2,2,2,1,2,2,2,1,2,0,1,0,0,1,1,2,2,2,1,2,2,1,2,1,2,1,2,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,4,3,4,3,4,3,4,3,4,2,4,4,4,3,4,4,3,3,4,4,4,3,3,3,4,3,2,4,3,4,4,3,4,3,4,3,4,3,4,3,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,7,0,6,0,0,8,6,7,9,8,6,7,9,9,9,9,9,9,9,7,7,7,7,7,7,7,9,9,9,8,6,7,9,9,8,6,7,9,8,9,9,9,9,7,7,7,7,7,7,7,7,9,0,0,0,0,8,6,7,9,8,6,7,9,8,6,7,9,9,9,9,9,9,9,9,10,10,11,11,0,12,12,0,11,0,11,11,11,11,11,0,12,12,13,12,14,11,13,12,14,11,13,12,14,11,13,12,14,11,13,12,14,11,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,12,14,11,13,12,14,11,13,12,12,12,12,12,14,11,13,11,14,13,12,14,11,13,13,13,13,12,14,11,12,11,13,13,13,13,13,12,12,11,13,12,14,13,12,14,11,13,13,11,13,12,14,11,13,12,14,11,13,12,14,11,13,12,14,11,13,13],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["position",3]],[[]],null,[[],["result",6]],[[["position",3]],["bool",15]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[]],[[]],null,[[["position",3]],["bool",15]],[[],[["str",15],["cow",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["error",3]],[[],["errorcode",4]],[[]],[[]],null,null,[[["display",8]]],[[["display",8]]],[[["error",3]],["bool",15]],[[["errorcode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["utf8error",3]]],[[["error",3]]],[[]],[[]],[[["fromutf8error",3]]],[[["utf8error",3]]],[[]],[[]],null,[[["error",3]],["bool",15]],[[["errorcode",4]],["bool",15]],null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["extensions",3]],[[["extensions",3]],["extensions",3]],[[["extensions",3]]],[[["extensions",3]],["extensions",3]],[[["extensions",3]]],[[],["usize",15]],[[["extensions",3]],["extensions",3]],[[["extensions",3]]],[[]],[[]],[[],["extensions",3]],[[]],[[["extensions",3]],["ordering",4]],[[["extensions",3]],["bool",15]],[[]],[[],["result",4]],[[],["extensions",3]],[[["extensions",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],[["extensions",3],["option",4]]],[[["usize",15]],["extensions",3]],[[["usize",15]],["extensions",3]],[[],[["extensions",3],["option",4]]],[[["intoiterator",8]],["extensions",3]],[[]],[[["extensions",3]]],[[["extensions",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["extensions",3]],["bool",15]],[[],["extensions",3]],[[["extensions",3]],[["ordering",4],["option",4]]],[[["extensions",3]]],[[],["result",4]],[[["extensions",3],["bool",15]]],[[["extensions",3]],["extensions",3]],[[["extensions",3]]],[[]],[[["extensions",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["prettyconfig",3]],[[]],null,[[]],null,[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["bool",15],["option",4],["prettyconfig",3]],["result",6]],[[]],null,null,[[],["result",4]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[],[["result",6],["string",3]]],[[["prettyconfig",3]],[["result",6],["string",3]]],[[],["result",6]],[[["prettyconfig",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]]],[[["usize",15]]],[[["bool",15]]],[[["extensions",3]]],[[["string",3]]],[[["string",3]]],[[["bool",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["f64",15]]],[[],[["option",4],["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["map",3]],[[],["number",4]],[[],["float",3]],[[],["value",4]],[[]],[[]],[[]],[[]],[[["map",3]],["ordering",4]],[[["number",4]],["ordering",4]],[[],["ordering",4]],[[["value",4]],["ordering",4]],[[],["map",3]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[["str",15]],["result",4]],[[["map",3]],["bool",15]],[[["number",4]],["bool",15]],[[],["bool",15]],[[["value",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["i32",15]],["number",4]],[[["u64",15]],["number",4]],[[]],[[["f64",15]],["number",4]],[[["i64",15]],["number",4]],[[]],[[]],[[["intoiterator",8]]],[[["str",15]],["result",6]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[["value",4]]],[[["value",4]]],[[["value",4]],[["value",4],["option",4]]],[[]],[[]],[[]],[[]],[[],["f64",15]],[[],["result",6]],[[],["bool",15]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[["number",4]],["bool",15]],[[["value",4]],["bool",15]],[[],["map",3]],[[]],[[["f64",15]]],[[["map",3]],[["option",4],["ordering",4]]],[[["number",4]],[["ordering",4],["option",4]]],[[],[["option",4],["ordering",4]]],[[["value",4]],[["ordering",4],["option",4]]],[[["value",4]],[["value",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Deserializer"],[3,"Position"],[4,"ErrorCode"],[3,"Error"],[3,"Extensions"],[4,"State"],[4,"Compound"],[3,"Serializer"],[3,"PrettyConfig"],[13,"Map"],[4,"Value"],[4,"Number"],[3,"Map"],[3,"Float"]]},\
"rust_cuda":{"doc":"","t":[0,0,0,16,8,16,3,3,3,16,8,24,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,3,8,3,8,3,3,8,24,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["common","host","utils","CudaAllocation","CudaAsRust","CudaRepresentation","DeviceBoxConst","DeviceBoxMut","DeviceOwnedSlice","RustRepresentation","RustToCuda","RustToCuda","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","from","from","from","into","into","into","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","un_borrow_mut","CombinedCudaAlloc","CudaAlloc","CudaDropWrapper","EmptyCudaAlloc","HostDeviceBoxConst","HostDeviceBoxMut","LendToCuda","LendToCuda","NullCudaAlloc","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref_mut","drop","for_device","for_device","for_host","for_host","from","from","from","from","from","from","from","into","into","into","into","into","lend_to_cuda","lend_to_cuda_mut","new","new","new","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","exchange","buffer","wrapper","CudaExchangeBuffer","borrow","borrow_mut","borrow_mut","deref","deref_mut","from","into","new","try_from","try_into","type_id","un_borrow_mut","ExchangeWithCudaWrapper","ExchangeWithHostWrapper","as_mut","as_ref","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","from","from","into","into","move_to_cuda","move_to_host","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rust_cuda","","","rust_cuda::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_cuda::host","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_cuda::utils","rust_cuda::utils::exchange","","rust_cuda::utils::exchange::buffer","","","","","","","","","","","","","rust_cuda::utils::exchange::wrapper","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Safety","","","","","","Safety","","Errors","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lends an immutable copy of <code>&self</code> to CUDA:","Lends a mutable copy of <code>&mut self</code> to CUDA:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","Errors","Errors","Errors","","","","","",""],"i":[0,0,0,1,0,1,0,0,0,2,0,0,1,3,4,5,1,3,4,5,3,3,5,3,3,4,4,5,5,3,4,5,3,3,4,5,3,4,5,3,4,5,1,0,0,0,0,0,0,0,0,0,6,7,8,9,10,6,7,8,9,10,8,8,8,9,10,9,10,6,7,8,8,8,9,10,6,7,8,9,10,11,11,7,9,10,7,6,7,8,9,10,6,7,8,9,10,6,7,8,9,10,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,0,13,13,14,13,14,13,14,14,14,13,14,13,14,13,14,14,13,14,13,14,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["cudaalloc",8]],["cudaresult",6]],[[]],[[]],[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[["devicebox",3]]],[[["devicebox",3]]],[[]],[[["devicebuffer",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["cudaalloc",8],["combinedcudaalloc",3]],[["cudaalloc",8],["cudaresult",6]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["deviceboxmut",3]],[[],["deviceboxconst",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]],["cudaresult",6]],[[["fnonce",8]],["cudaresult",6]],[[]],[[["devicebox",3]]],[[["devicebox",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[["cudaalloc",8]],["cudaresult",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["cudaresult",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["combinedcudaalloc",3],["cudaalloc",8]],[["cudaalloc",8],["cudaresult",6]]],null,null,[[],["hostdeviceboxmut",3]],[[],["hostdeviceboxconst",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["exchangewithhostwrapper",3],["cudaresult",6]]],[[],[["cudaresult",6],["exchangewithcudawrapper",3]]],[[],["cudaresult",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"RustToCuda"],[8,"CudaAsRust"],[3,"DeviceBoxConst"],[3,"DeviceBoxMut"],[3,"DeviceOwnedSlice"],[3,"NullCudaAlloc"],[3,"CombinedCudaAlloc"],[3,"CudaDropWrapper"],[3,"HostDeviceBoxMut"],[3,"HostDeviceBoxConst"],[8,"LendToCuda"],[3,"CudaExchangeBuffer"],[3,"ExchangeWithHostWrapper"],[3,"ExchangeWithCudaWrapper"]]},\
"rustacuda":{"doc":"This crate provides a safe, user-friendly wrapper around …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,5,11,11,11,11,11,11,14,11,0,11,0,11,11,11,11,11,0,5,11,11,0,11,11,11,11,11,11,11,11,11,11,11,4,3,3,8,3,3,13,13,13,13,13,18,18,13,13,13,13,13,13,13,4,18,18,18,18,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,3,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,4,6,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,3,4,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,13,3,4,3,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,8,8,3,3,3,3,8,24,3,3,3,3,3,3,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,3,3,18,13,13,18,18,13,13,13,18,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,10,10,18,18,18,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CudaApiVersion","CudaFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","contains","context","device","empty","eq","eq","error","event","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","function","get","hash","hash","init","insert","intersects","into","into","is_all","is_empty","launch","major","memory","minor","module","ne","ne","not","partial_cmp","partial_cmp","prelude","quick_init","remove","set","stream","sub","sub_assign","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","CacheConfig","Context","ContextFlags","ContextHandle","ContextStack","CurrentContext","DefaultBankSize","DeviceRuntimePendingLaunchCount","DeviceRuntimeSynchronizeDepth","EightByteBankSize","FourByteBankSize","LMEM_RESIZE_TO_MAX","MAP_HOST","MallocHeapSize","MaxL2FetchGranularity","PreferEqual","PreferL1","PreferNone","PreferShared","PrintfFifoSize","ResourceLimit","SCHED_AUTO","SCHED_BLOCKING_SYNC","SCHED_SPIN","SCHED_YIELD","SharedMemoryConfig","StackSize","StreamPriorityRange","UnownedContext","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","create_and_push","drop","drop","empty","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_api_version","get_api_version","get_cache_config","get_current","get_device","get_flags","get_inner","get_inner","get_resource_limit","get_shared_memory_config","get_stream_priority_range","get_unowned","greatest","hash","hash","hash","hash","hash","insert","intersects","into","into","into","into","into","into","into","into","into","is_all","is_empty","least","ne","ne","not","partial_cmp","pop","push","remove","set","set_cache_config","set_current","set_resource_limit","set_shared_memory_config","sub","sub_assign","synchronize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsyncEngineCount","CanMapHostMemory","CanUseHostPointerForRegisteredMem","ClockRate","ComputeCapabilityMajor","ComputeCapabilityMinor","ComputeMode","ComputePreemptionSupported","ConcurrentKernels","ConcurrentManagedAccess","Device","DeviceAttribute","Devices","EccEnabled","GlobalL1CacheSupported","GlobalMemoryBusWidth","HostNativeAtomicSupported","Integrated","KernelExecTimeout","L2CacheSize","LocalL1CacheSupported","ManagedMemory","MaxBlockDimX","MaxBlockDimY","MaxBlockDimZ","MaxGridDimX","MaxGridDimY","MaxGridDimZ","MaxPitch","MaxRegistersPerBlock","MaxRegistersPerMultiprocessor","MaxSharedMemoryPerBlock","MaxSharedMemoryPerMultiprocessor","MaxThreadsPerBlock","MaxThreadsPerMultiprocessor","MaximumSurface1DLayeredLayers","MaximumSurface1DLayeredWidth","MaximumSurface1DWidth","MaximumSurface2DHeight","MaximumSurface2DLayeredHeight","MaximumSurface2DLayeredLayers","MaximumSurface2DLayeredWidth","MaximumSurface2DWidth","MaximumSurface3DDepth","MaximumSurface3DHeight","MaximumSurface3DWidth","MaximumSurfacecubemapLayeredLayers","MaximumSurfacecubemapLayeredWidth","MaximumSurfacecubemapWidth","MaximumTexture1DLayeredLayers","MaximumTexture1DLayeredWidth","MaximumTexture1DLinearWidth","MaximumTexture1DMipmappedWidth","MaximumTexture1DWidth","MaximumTexture2DGatherHeight","MaximumTexture2DGatherWidth","MaximumTexture2DHeight","MaximumTexture2DLayeredHeight","MaximumTexture2DLayeredLayers","MaximumTexture2DLayeredWidth","MaximumTexture2DLinearHeight","MaximumTexture2DLinearPitch","MaximumTexture2DLinearWidth","MaximumTexture2DMipmappedHeight","MaximumTexture2DMipmappedWidth","MaximumTexture2DWidth","MaximumTexture3DDepth","MaximumTexture3DDepthAlternate","MaximumTexture3DHeight","MaximumTexture3DHeightAlternate","MaximumTexture3DWidth","MaximumTexture3DWidthAlternate","MaximumTextureCubemapLayeredLayers","MaximumTextureCubemapLayeredWidth","MaximumTextureCubemapWidth","MemoryClockRate","MultiGpuBoard","MultiGpuBoardGroupId","MultiprocessorCount","PageableMemoryAccess","PciBusId","PciDeviceId","PciDomainId","SingleToDoublePrecisionPerfRatio","StreamPrioritiesSupported","SurfaceAlignment","TccDriver","TextureAlignment","TexturePitchAlignment","TotalConstantMemory","UnifiedAddressing","WarpSize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","devices","eq","eq","fmt","fmt","fmt","from","from","from","get_attribute","get_device","hash","hash","into","into","into","into_iter","name","ne","next","num_devices","to_owned","to_owned","to_owned","total_memory","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AlreadyAcquired","AlreadyMapped","ArrayIsMapped","AssertError","ContextAlreadyCurrent","ContextAlreadyInUse","ContextIsDestroyed","CudaError","CudaResult","Deinitialized","DropResult","EccUncorrectable","FileNotFound","HardwareStackError","HostMemoryAlreadyRegistered","HostMemoryNotRegistered","IllegalAddress","IllegalInstruction","InvalidAddressSpace","InvalidContext","InvalidDevice","InvalidGraphicsContext","InvalidHandle","InvalidImage","InvalidMemoryAllocation","InvalidProgramCounter","InvalidPtx","InvalidSouce","InvalidValue","LaunchFailed","LaunchIncompatibleTexturing","LaunchOutOfResources","LaunchTimeout","MapFailed","MisalignedAddress","NoBinaryForGpu","NoDevice","NotFound","NotInitialized","NotMapped","NotMappedAsArray","NotMappedAsPointer","NotPermitted","NotReady","NotSupported","NvlinkUncorrectable","OperatingSystemError","OutOfMemory","PeerAccessAlreadyEnabled","PeerAccessNotEnabled","PeerAccessUnsupported","PrimaryContextActive","ProfilerAlreadyStarted","ProfilerAlreadyStopped","ProfilerDisabled","ProfilerNotInitialized","SharedObjectInitFailed","SharedObjectSymbolNotFound","TooManyPeers","UnknownError","UnmapFailed","UnsupportedLimit","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","BLOCKING_SYNC","DEFAULT","DISABLE_TIMING","Event","EventFlags","EventStatus","INTERPROCESS","NotReady","Ready","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","contains","drop","drop","elapsed_time_f32","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","into","is_all","is_empty","ne","new","not","partial_cmp","query","record","remove","set","sub","sub_assign","synchronize","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BinaryVersion","BlockSize","CacheModeCa","ConstSizeBytes","Function","FunctionAttribute","GridSize","LocalSizeBytes","MaxThreadsPerBlock","NumRegisters","PtxVersion","SharedMemorySizeBytes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_attribute","hash","into","into","into","into","ne","ne","set_cache_config","set_shared_memory_config","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x","x","x","x","xy","xy","xyz","xyz","y","y","z","z","AsyncCopyDestination","CopyDestination","DeviceBox","DeviceBuffer","DeviceChunks","DeviceChunksMut","DeviceCopy","DeviceCopy","DevicePointer","DeviceSlice","LockedBuffer","UnifiedBox","UnifiedBuffer","UnifiedPointer","add","add","array","as_device_ptr","as_device_ptr","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_raw","as_raw","as_raw_mut","as_raw_mut","as_ref","as_ref","as_ref","as_slice","as_slice","as_unified_ptr","as_unified_ptr","async_copy_from","async_copy_from","async_copy_from","async_copy_from","async_copy_from","async_copy_to","async_copy_to","async_copy_to","async_copy_to","async_copy_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunks","chunks_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","copy_from","copy_from","copy_from","copy_from","copy_from","copy_from","copy_to","copy_to","copy_to","copy_to","copy_to","copy_to","count","count","cuda_free","cuda_free_locked","cuda_free_unified","cuda_malloc","cuda_malloc_locked","cuda_malloc_unified","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_device","from_raw","from_raw","from_raw_parts","from_raw_parts","from_raw_parts","from_raw_parts","from_raw_parts_mut","from_slice","from_slice","from_slice","from_slice_async","from_unified","ge","gt","hash","hash","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into_device","into_iter","into_iter","into_unified","is_empty","is_null","is_null","last","last","le","leak","len","lt","new","new","new","new","next","next","next_back","next_back","nth","nth","null","null","offset","offset","partial_cmp","partial_cmp","partial_cmp","size_hint","size_hint","split_at","split_at_mut","sub","sub","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uninitialized","uninitialized","uninitialized","uninitialized","uninitialized","wrap","wrap","wrapping_add","wrapping_add","wrapping_offset","wrapping_offset","wrapping_sub","wrapping_sub","zeroed","zeroed","ArrayDescriptor","ArrayFormat","ArrayObject","ArrayObjectFlags","CUBEMAP","Float","Half","LAYERED","SURFACE_LDST","SignedInt16","SignedInt32","SignedInt8","TEXTURE_GATHER","UnsignedInt16","UnsignedInt32","UnsignedInt8","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains","default","depth","descriptor","dims","drop","drop","empty","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_descriptor","from_dims_format","from_iter","from_raw","from_raw","hash","height","insert","intersects","into","into","into","into","is_all","is_empty","ne","new","new","new","new_1d","new_2d","new_cubemap","new_layered","new_layered_1d","new_layered_cubemap","not","num_channels","partial_cmp","remove","set","set_depth","set_dims","set_flags","set_format","set_height","set_num_channels","set_width","sub","sub_assign","to_owned","to_owned","to_owned","to_raw","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","width","Module","Symbol","borrow","borrow","borrow_mut","borrow_mut","copy_from","copy_to","drop","drop","fmt","fmt","fmt","from","from","get_function","get_global","into","into","load_from_file","load_from_string","try_from","try_from","try_into","try_into","type_id","type_id","CopyDestination","DeviceBuffer","UnifiedBuffer","copy_from","copy_to","DEFAULT","DEFAULT","NON_BLOCKING","Stream","StreamFlags","StreamWaitEventFlags","add_callback","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","contains","contains","drop","drop","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get_flags","get_priority","hash","hash","insert","insert","intersects","intersects","into","into","into","is_all","is_all","is_empty","is_empty","ne","ne","new","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","synchronize","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wait_event"],"q":["rustacuda","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::contextrustacuda::device","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::memoryrustacuda::memory::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::module","","","","","","","","","","","","","","","","","","","","","","","","","","","rustacuda::prelude","","","","","rustacuda::stream","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Struct representing the CUDA API version number.","Bit flags for initializing the CUDA driver. Currently, no …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","CUDA context management","Functions and types for enumerating CUDA devices and …","Returns an empty set of flags","","","Types for error handling","Events can be used to track status and dependencies, as …","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Functions and types for working with CUDA kernels.","Returns the latest CUDA version supported by the CUDA …","","","Initialize the CUDA Driver API.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Launch a kernel function asynchronously.","Return the major version number - eg. the 9 in version 9.2","Access to CUDA’s memory allocation and transfer …","Return the minor version number - eg. the 2 in version 9.2","Functions and types for working with CUDA modules.","","","Returns the complement of this set of flags.","","","This module re-exports a number of commonly-used types …","Shortcut for initializing the CUDA Driver API and …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Streams of work for the device to perform.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Toggles the specified flags in-place.","","","","","","","This enumeration represents configuration settings for …","Owned handle to a CUDA context.","Bit flags for initializing the CUDA context.","Sealed trait for <code>Context</code> and <code>UnownedContext</code>. Not intended …","Type used to represent the thread-local context stack.","Type representing the top context in the thread-local …","Set shared-memory bank size to the default.","The maximum number of outstanding device runtime launches …","The maximum nesting depth of a grid at which a thread can …","Set shared-memory bank width to eight bytes","Set shared-memory bank width to four bytes","Instruct CUDA not to reduce local memory after resizing …","Instructs CUDA to support mapped pinned allocations. This …","The size in bytes of the heap used by the <code>malloc()</code> and …","L2 cache fetch granularity","Prefer equal-sized L1 cache and shared memory","Prefer larger L1 cache and smaller shared memory","No preference for shared memory or L1 (default)","Prefer larger shared memory and smaller L1 cache","The size in bytes of the FIFO used by the <code>printf()</code> device …","This enumeration represents the limited resources which …","Instructs CUDA to automatically choose whether to yield …","Instructs CUDA to block the CPU thread on a …","Instructs CUDA to actively spin when waiting for results …","Instructs CUDA to yield its thread when waiting for …","This enumeration represents the options for configuring …","The size in bytes of each GPU thread stack","Struct representing a range of stream priorities.","Non-owning handle to a CUDA context.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Create a CUDA context for the given device.","","Destroy a <code>Context</code>, returning an error.","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Get the API version used to create this context.","Get the API version used to create this context.","Returns the preferred cache configuration for the current …","Returns a non-owning handle to the current context.","Return the device ID for the current context.","Return the context flags for the current context.","","","Return resource limits for the current context.","Return resource limits for the current context.","Return the least and greatest stream priorities.","Returns an non-owning handle to this context.","The greatest stream priority","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The least stream priority","","","Returns the complement of this set of flags.","","Pop the current context off the stack and return the …","Push the given context to the top of the stack","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Sets the preferred cache configuration for the current …","Set the given context as the current context for this …","Sets a requested resource limit for the current context.","Sets the preferred shared memory configuration for the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Block to wait for a context’s tasks to complete.","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of asynchronous engines","Device can map host memory into CUDA address space","Device can access host registered memory at the same …","Typical clock frequency in kilohertz","Major compute capability version number","Minor compute capability version number","Compute Mode","Device supports compute preemption","Device can possibly execute multiple kernels concurrently","Device can coherently access managed memory concurrently …","Opaque handle to a CUDA device.","All supported device attributes for Device::get_attribute","Iterator over all available CUDA devices. See the …","Device has ECC support enabled","Device supports caching globals in L1","Global memory bus width in bits","Link between the device and the host supports native …","Device is integrated with host memory","Specifies whether there is a run time limit on kernels","Size of L2 cache in bytes.","Device supports caching locals in L1","Device can allocate managed memory on this system","Maximum x-dimension of a block","Maximum y-dimension of a block","Maximum z-dimension of a block","Maximum x-dimension of a grid","Maximum y-dimension of a grid","Maximum z-dimension of a grid","Maximum pitch in bytes allowed by the memory copy …","Maximum number of 32-bit registers available to a thread …","Maximum number of 32-bit registers available per …","Maximum amount of shared memory available to a thread …","Maximum shared memory available per multiprocessor in …","Maximum number of threads per block","Maximum resident threads per multiprocessor","Maximum layers in a 1D layered surface","Maximum 1D layered surface width","Maximum 1D surface width","Maximum 2D surface height","Maximum 2D layered surface height","Maximum layers in a 2D layered surface","Maximum 2D layered surface width","Maximum 2D surface width","Maximum 3D surface depth","Maximum 3D surface height","Maximum 3D surface width","Maximum layers in a cubemap layered surface","Maximum cubemap layered surface width","Maximum cubemap surface width","Maximum layers in a 1D layered texture","Maximum 1D layered texture width","Maximum 1D linear texture width","Maximum mipammed 1D texture width","Maximum 1D texture width","Maximum 2D texture height if CUDA_ARRAY3D_TEXTURE_GATHER …","Maximum 2D texture width if CUDA_ARRAY3D_TEXTURE_GATHER …","Maximum 2D texture height","Maximum 2D layered texture height","Maximum layers in a 2D layered texture","Maximum 2D layered texture width","Maximum 2D linear texture height","Maximum 2D linear texture pitch in bytes","Maximum 2D linear texture width","Maximum mipmapped 2D texture width","Maximum mipmapped 2D texture height","Maximum 2D texture width","Maximum 3D texture depth","Alternate maximum 3D texture depth","Maximum 3D texture height","Alternate maximum 3D texture height","Maximum 3D texture width","Alternate maximum 3D texture width","Maximum layers in a cubemap layered texture","Maximum cubemap layered texture width/height","Maximum cubemap texture width/height","Peak memory clock frequency in kilohertz","Device is on a multi-GPU board","Unique ID for a group of devices on the same multi-GPU …","Number of multiprocessors on device.","Device supports coherently accessing pageable memory …","PCI bus ID of the device","PCI device ID of the device","PCI domain ID of the device","Ratio of single precision performance (in floating-point …","Device supports stream priorities","Alignment requirement for surfaces","Device is using TCC driver model","Alignment requirement for textures","Pitch alignment requirement for textures","Memory available on device for constant variables in a …","Device shares a unified address space with the host","Warp size in threads","","","","","","","","","","","","","Return an iterator over all CUDA devices.","","","","","","","","","Returns information about this device.","Get a handle to the <code>ordinal</code>’th CUDA device.","","","","","","","Returns the name of this device.","","","Get the number of CUDA-capable devices.","","","","Returns the total amount of memory available on the …","","","","","","","","","","","","","","","","","Error enum which represents all the potential errors …","Result type for most CUDA functions.","","Special result type for <code>drop</code> functions which includes the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify that the created event should busy-wait on …","The default event creation flag.","Specify that the created event does not need to record …","An event to track work submitted to a stream.","Bit flags for configuring a CUDA Event.","Status enum that represents the current status of an …","Specify that the created event may be used as an …","<code>EventStatus::NotReady</code> indicates that the work captured by …","Ready indicates that all work captured by the event has …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Destroy an <code>Event</code> returning an error.","Return the duration between two events.","Returns an empty set of flags","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Create a new event with the specified flags.","Returns the complement of this set of flags.","","Return whether the stream this event was recorded on (see …","Add the event to the given stream of work. The event will …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Wait for an event to complete.","","","Toggles the specified flags in-place.","","","","","","","","","","The binary architecture version for which the function …","Dimensions of a thread block, or the number of threads in …","The attribute to indicate whether the function has been …","The size in bytes of the constant memory required by this …","Handle to a global kernel function.","All supported function attributes for …","Dimensions of a grid, or the number of thread blocks in a …","The size in bytes of local memory used by each thread of …","The maximum number of threads per block, beyond which a …","The number of registers used by each thread of this …","The PTX virtual architecture version for which the …","The size in bytes of the statically-allocated shared …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns information about a function.","","","","","","","","Sets the preferred cache configuration for this function.","Sets the preferred shared memory configuration for this …","","","","","","","","","","","","","","","","Create a one-dimensional grid of <code>x</code> blocks","Create a one-dimensional block of <code>x</code> threads","Width of grid in blocks","X dimension of each thread block","Create a two-dimensional grid of <code>x * y</code> blocks","Create a two-dimensional block of <code>x * y</code> threads","Create a three-dimensional grid of <code>x * y * z</code> blocks","Create a three-dimensional block of <code>x * y * z</code> threads","Height of grid in blocks","Y dimension of each thread block","Depth of grid in blocks","Z dimension of each thread block","Sealed trait implemented by types which can be the source …","Sealed trait implemented by types which can be the source …","A pointer type for heap-allocation in CUDA device memory.","Fixed-size device-side buffer. Provides basic access to …","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …","An iterator over a <code>DeviceSlice</code> in (non-overlapping) …","Marker trait for types which can safely be copied to or …","","A pointer to device memory.","Fixed-size device-side slice.","Fixed-size host-side buffer in page-locked memory.","A pointer type for heap-allocation in CUDA unified memory.","Fixed-size buffer in unified memory.","A pointer to unified memory.","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer (convenience for …","Routines for allocating and using CUDA Array Objects.","Returns the contained device pointer without consuming …","Returns a <code>DevicePointer<T></code> to the buffer.","","","","Returns an unsafe mutable device-pointer to the slice’s …","Extracts a mutable slice of the entire buffer.","Extracts a mutable slice of the entire buffer.","Return a raw device-pointer to the slice’s buffer.","Returns the contained pointer as a raw pointer. The …","Returns the contained pointer as a raw pointer.","Returns the contained pointer as a mutable raw pointer. …","Returns the contained pointer as a mutable raw pointer.","","","","Extracts a slice containing the entire buffer.","Extracts a slice containing the entire buffer.","Returns the contained unified pointer without consuming …","Returns a <code>UnifiedPointer<T></code> to the buffer.","Asynchronously copy data from <code>source</code>. <code>source</code> must be the …","","","","","Asynchronously copy data to <code>dest</code>. <code>dest</code> must be the same …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over <code>chunk_size</code> elements of the slice …","Returns an iterator over <code>chunk_size</code> elements of the slice …","","","","","","","","","","Copy data from <code>source</code>. <code>source</code> must be the same size as …","","","","","","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.","","","","","","","","Free memory allocated with <code>cuda_malloc</code>.","Free page-locked memory allocated with <code>cuda_malloc_host</code>.","Free memory allocated with <code>cuda_malloc_unified</code>.","Unsafe wrapper around the <code>cuMemAlloc</code> function, which …","Unsafe wrapper around the <code>cuMemAllocHost</code> function, which …","Unsafe wrapper around the <code>cuMemAllocManaged</code> function, …","","","","","","","","","","Destroy a <code>DeviceBox</code>, returning an error.","","Destroy a <code>DeviceBuffer</code>, returning an error.","","Destroy a <code>LockedBuffer</code>, returning an error.","","Destroy a <code>UnifiedBox</code>, returning an error.","Destroy a <code>UnifiedBuffer</code>, returning an error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a DeviceBox from a DevicePointer.","Constructs a DeviceBox from a raw pointer.","Constructs a UnifiedBox from a raw pointer.","Creates a <code>DeviceBuffer<T></code> directly from the raw …","Forms a slice from a <code>DevicePointer</code> and a length.","Creates a <code>LockedBuffer<T></code> directly from the raw …","Creates a <code>UnifiedBuffer<T></code> directly from the raw …","Performs the same functionality as <code>from_raw_parts</code>, except …","Allocate a new device buffer of the same size as <code>slice</code>, …","Allocate a new page-locked buffer of the same size as …","Allocate a new unified buffer of the same size as <code>slice</code>, …","Asynchronously allocate a new buffer of the same size as …","Constructs a UnifiedBox from a UnifiedPointer.","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the DeviceBox, returning the wrapped …","","","Consumes the UnifiedBox, returning the wrapped …","Returns <code>true</code> if the slice has a length of 0.","Returns true if the pointer is null.","Returns true if the pointer is null.","","","","Consumes and leaks the UnifiedBox, returning a mutable …","Returns the number of elements in the slice.","","Allocate device memory and place val into it.","Allocate a new page-locked buffer large enough to hold …","Allocate unified memory and place val into it.","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>…","","","","","","","Returns a null device pointer.","Returns a null unified pointer.","Calculates the offset from a device pointer.","Calculates the offset from a unified pointer.","","","","","","Divides one DeviceSlice into two at a given index.","Divides one mutable DeviceSlice into two at a given index.","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer (convenience for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate device memory, but do not initialize it.","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>…","Allocate a new page-locked buffer large enough to hold …","Allocate unified memory without initializing it.","Allocate a new unified buffer large enough to hold <code>size</code> <code>T</code>…","Wrap the given raw pointer in a DevicePointer. The given …","Wrap the given raw pointer in a UnifiedPointer. The given …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a device pointer using …","Calculates the offset from a unified pointer using …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","Allocate device memory and fill it with zeroes (<code>0u8</code>).","Allocate a new device buffer large enough to hold <code>size</code> <code>T</code>…","Describes a CUDA Array","Describes the format used for a CUDA Array.","A CUDA Array. Can be bound to a texture or surface.","Flags which modify the behavior of CUDA array creation.","Enables creation of cubemaps. If this flag is set, Width …","Single-precision floating point number","Half-precision floating point number","Enables creation of layered CUDA arrays. When this flag …","Enables surface references to be bound to the CUDA array.","Signed 16-bit integer","Signed 32-bit integer","Signed 8-bit integer","Indicates that the CUDA array will be used for texture …","Unsigned 16-bit integer","Unsigned 32-bit integer","Unsigned 8-bit integer","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns the depth of the ArrayDescripor","Gets the descriptor associated with this array.","Returns the dimensions of the ArrayDescriptor","","Try to destroy an <code>ArrayObject</code>. Can fail - if it does, …","Returns an empty set of flags","","","","Returns the flags of the ArrayDescriptor","","","","","","","","","Returns the format of the ArrayDescripor","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Constructs a generic ArrayObject from an <code>ArrayDescriptor</code>.","Creates a new ArrayDescriptor from a set of dimensions …","","Creates ArrayFormat from the CUDA Driver API enum","Constructs an ArrayDescriptor from a CUDA Driver API …","","Returns the height of the ArrayDescripor","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Allocates a new CUDA Array that is up to 3-dimensions.","Creates a default flags object with no flags set.","Constructs an ArrayDescriptor from dimensions, format, …","Allocates a new 1D CUDA Array.","Allocates a new CUDA Array that is up to 2-dimensions.","Creates a new Cubemap CUDA Array. The array is …","Creates a new Layered 1D or 2D CUDA Array.","Creates a new Layered 1D CUDA Array.","Creates a new Layered Cubemap CUDA Array. The array is …","Returns the complement of this set of flags.","Returns the number of channels in the ArrayDescriptor","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Sets the depth of the ArrayDescriptor","Sets the dimensions of the ArrayDescriptor","Sets the flags of the ArrayDescriptor.","Sets the format of the ArrayDescriptor","Sets the height of the ArrayDescriptor","Sets the number of channels in the ArrayDescriptor","Sets the width of the ArrayDescriptor","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","Converts ArrayFormat to the CUDA Driver API enum","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the width of the ArrayDescripor","A compiled CUDA module, loaded into a context.","Handle to a symbol defined within a CUDA module.","","","","","","","Destroy a <code>Module</code>, returning an error.","","","","","","","Get a reference to a kernel function which can then be …","Get a reference to a global symbol, which can then be …","","","Load a module from the given file name into the current …","Load a module from a CStr.","","","","","","","Sealed trait implemented by types which can be the source …","Fixed-size device-side buffer. Provides basic access to …","Fixed-size buffer in unified memory.","Copy data from <code>source</code>. <code>source</code> must be the same size as …","Copy data to <code>dest</code>. <code>dest</code> must be the same size as <code>self</code>.","No flags set.","No flags set.","This stream does not synchronize with the NULL stream.","A stream of work for the device to perform.","Bit flags for configuring a CUDA Stream.","Bit flags for configuring a CUDA Stream waiting on an …","Add a callback to a stream.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Destroy a <code>Stream</code>, returning an error.","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","Return the flags which were used to create this stream.","Return the priority of this stream.","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","Create a new stream with the given flags and optional …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Wait until a stream’s tasks are completed.","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","Make the stream wait on an event."],"i":[0,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,0,0,1,1,2,0,0,1,1,1,1,1,1,2,1,2,1,1,1,1,0,2,1,2,0,1,1,1,2,1,1,0,2,0,2,0,1,2,1,1,2,0,0,1,1,0,1,1,1,2,1,1,2,1,2,1,2,0,0,0,0,0,0,3,4,4,3,3,5,5,4,4,6,6,6,6,4,0,5,5,5,5,0,4,0,0,5,5,5,5,5,5,5,5,6,4,3,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,6,4,3,5,8,10,6,4,3,5,8,10,5,5,7,7,7,5,6,4,3,5,10,5,6,4,3,5,5,5,5,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,5,5,5,5,7,8,11,11,11,11,7,8,11,11,11,7,10,6,4,3,5,10,5,5,6,4,3,5,7,8,9,10,11,5,5,10,5,10,5,5,9,9,5,5,11,11,11,11,5,5,11,6,4,3,5,8,10,5,6,4,3,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,6,4,3,5,7,8,9,10,11,12,12,12,12,12,12,12,12,12,12,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,14,12,13,14,12,13,14,12,13,14,13,12,13,12,13,14,12,13,14,13,13,12,13,12,13,14,14,13,13,14,13,12,13,14,13,12,13,14,12,13,14,12,13,14,15,15,15,15,15,15,15,0,0,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,0,0,0,16,17,17,16,16,16,16,16,16,16,16,16,17,18,16,17,18,16,17,16,17,16,16,18,18,18,16,16,17,16,16,16,16,16,16,17,18,16,17,18,16,16,16,16,16,16,16,16,17,18,16,16,16,18,16,16,18,18,16,16,16,16,18,16,17,16,16,17,18,16,17,18,16,17,18,19,0,19,19,0,0,0,19,19,19,19,19,20,21,19,22,20,21,19,22,20,21,19,20,21,19,20,21,19,20,21,19,22,20,20,20,20,20,21,21,21,21,21,19,22,22,19,20,21,19,22,20,21,22,22,20,21,19,20,21,19,22,20,21,19,22,20,21,19,22,20,21,20,21,20,21,20,21,20,21,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,0,25,26,27,28,29,26,27,29,26,23,24,23,24,27,28,29,27,29,28,29,30,25,26,26,26,30,25,26,26,26,25,31,26,32,33,27,28,28,29,23,24,25,31,26,32,33,27,28,28,29,23,24,26,26,32,23,24,32,23,24,28,23,24,34,25,25,26,26,26,34,25,25,26,26,26,32,33,0,0,0,0,0,0,31,27,28,29,31,27,28,29,25,25,31,31,27,27,28,28,29,29,28,23,24,25,25,31,26,32,33,27,28,28,28,29,23,23,24,24,25,31,32,33,27,28,29,23,24,25,25,28,31,26,27,29,26,31,27,29,31,28,28,28,28,23,24,26,26,26,26,26,26,26,26,26,26,26,26,25,31,32,33,27,28,29,23,24,25,32,33,28,26,23,24,32,33,28,28,26,28,25,27,28,29,32,33,32,33,32,33,23,24,23,24,28,23,24,32,33,26,26,23,24,32,23,24,28,25,31,32,33,27,28,29,23,24,25,31,32,33,27,28,29,23,24,25,31,26,32,33,27,28,29,23,24,25,31,27,28,29,23,24,23,24,23,24,23,24,25,31,0,0,0,0,35,36,36,35,35,36,36,36,35,36,36,36,35,35,35,35,35,35,35,35,37,36,35,38,37,36,35,38,36,35,38,36,35,38,35,35,35,38,37,38,37,37,35,36,35,35,38,37,36,35,35,35,35,35,38,38,37,36,35,38,35,35,35,37,38,35,36,38,35,38,35,35,37,36,35,38,35,35,35,37,35,38,37,37,37,37,37,37,35,38,35,35,35,38,38,38,38,38,38,38,35,35,36,35,38,36,35,37,36,35,38,37,36,35,38,37,36,35,38,38,0,0,39,40,39,40,40,40,39,39,39,40,40,39,40,39,39,39,40,39,39,39,40,39,40,39,40,0,0,0,34,34,41,42,41,0,0,0,43,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42,43,41,42,43,41,42,41,42,41,42,41,42,43,43,41,42,41,42,41,42,41,41,41,41,41,42,42,42,42,42,43,41,42,43,41,42,41,42,41,42,41,42,43,43,41,42,41,42,41,42,41,42,43,41,42,41,42,41,42,43,41,42,41,42,41,42,41,42,41,42,41,42,43,41,42,41,42,41,42,43,41,42,43,41,42,43,43],"f":[null,null,[[],["cudaflags",3]],[[["cudaflags",3]],["cudaflags",3]],[[["cudaflags",3]]],[[["cudaflags",3]],["cudaflags",3]],[[["cudaflags",3]]],[[],["u32",15]],[[["cudaflags",3]],["cudaflags",3]],[[["cudaflags",3]]],[[]],[[]],[[]],[[]],[[],["cudaflags",3]],[[],["cudaapiversion",3]],[[]],[[]],[[["cudaflags",3]],["ordering",4]],[[["cudaapiversion",3]],["ordering",4]],[[["cudaflags",3]],["bool",15]],null,null,[[],["cudaflags",3]],[[["cudaflags",3]],["bool",15]],[[["cudaapiversion",3]],["bool",15]],null,null,[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],[["cudaflags",3],["option",4]]],[[["u32",15]],["cudaflags",3]],[[["u32",15]],["cudaflags",3]],[[["intoiterator",8]],["cudaflags",3]],null,[[],[["cudaapiversion",3],["cudaresult",6]]],[[]],[[]],[[["cudaflags",3]],["cudaresult",6]],[[["cudaflags",3]]],[[["cudaflags",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["i32",15]],null,[[],["i32",15]],null,[[["cudaflags",3]],["bool",15]],[[["cudaapiversion",3]],["bool",15]],[[],["cudaflags",3]],[[["cudaflags",3]],[["ordering",4],["option",4]]],[[["cudaapiversion",3]],[["ordering",4],["option",4]]],null,[[],[["context",3],["cudaresult",6]]],[[["cudaflags",3]]],[[["cudaflags",3],["bool",15]]],null,[[["cudaflags",3]],["cudaflags",3]],[[["cudaflags",3]]],[[]],[[]],[[["cudaflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["contextflags",3]],[[["contextflags",3]],["contextflags",3]],[[["contextflags",3]]],[[["contextflags",3]],["contextflags",3]],[[["contextflags",3]]],[[],["u32",15]],[[["contextflags",3]],["contextflags",3]],[[["contextflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cacheconfig",4]],[[],["resourcelimit",4]],[[],["sharedmemoryconfig",4]],[[],["contextflags",3]],[[],["unownedcontext",3]],[[],["streampriorityrange",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["contextflags",3]],["ordering",4]],[[["contextflags",3]],["bool",15]],[[["device",3],["contextflags",3]],[["context",3],["cudaresult",6]]],[[]],[[["context",3]],[["context",3],["dropresult",6]]],[[],["contextflags",3]],[[["cacheconfig",4]],["bool",15]],[[["resourcelimit",4]],["bool",15]],[[["sharedmemoryconfig",4]],["bool",15]],[[["contextflags",3]],["bool",15]],[[["streampriorityrange",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["option",4],["contextflags",3]]],[[["u32",15]],["contextflags",3]],[[["u32",15]],["contextflags",3]],[[["intoiterator",8]],["contextflags",3]],[[],[["cudaapiversion",3],["cudaresult",6]]],[[],[["cudaapiversion",3],["cudaresult",6]]],[[],[["cacheconfig",4],["cudaresult",6]]],[[],[["unownedcontext",3],["cudaresult",6]]],[[],[["device",3],["cudaresult",6]]],[[],[["contextflags",3],["cudaresult",6]]],[[],["cucontext",6]],[[],["cucontext",6]],[[["resourcelimit",4]],[["usize",15],["cudaresult",6]]],[[],[["cudaresult",6],["sharedmemoryconfig",4]]],[[],[["streampriorityrange",3],["cudaresult",6]]],[[],["unownedcontext",3]],null,[[]],[[]],[[]],[[]],[[]],[[["contextflags",3]]],[[["contextflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["contextflags",3]],["bool",15]],[[["streampriorityrange",3]],["bool",15]],[[],["contextflags",3]],[[["contextflags",3]],[["ordering",4],["option",4]]],[[],[["unownedcontext",3],["cudaresult",6]]],[[],["cudaresult",6]],[[["contextflags",3]]],[[["bool",15],["contextflags",3]]],[[["cacheconfig",4]],["cudaresult",6]],[[],["cudaresult",6]],[[["usize",15],["resourcelimit",4]],["cudaresult",6]],[[["sharedmemoryconfig",4]],["cudaresult",6]],[[["contextflags",3]],["contextflags",3]],[[["contextflags",3]]],[[],["cudaresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["contextflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["deviceattribute",4]],[[],["device",3]],[[],["devices",3]],[[]],[[]],[[]],[[],[["cudaresult",6],["devices",3]]],[[["deviceattribute",4]],["bool",15]],[[["device",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["deviceattribute",4]],[["cudaresult",6],["i32",15]]],[[["u32",15]],[["device",3],["cudaresult",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["cudaresult",6],["string",3]]],[[["device",3]],["bool",15]],[[],[["option",4],["cudaresult",6]]],[[],[["cudaresult",6],["u32",15]]],[[]],[[]],[[]],[[],[["usize",15],["cudaresult",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["cudaerror",4]],[[]],[[["cudaerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[],["eventflags",3]],[[["eventflags",3]],["eventflags",3]],[[["eventflags",3]]],[[["eventflags",3]],["eventflags",3]],[[["eventflags",3]]],[[],["u32",15]],[[["eventflags",3]],["eventflags",3]],[[["eventflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eventflags",3]],[[],["eventstatus",4]],[[]],[[]],[[["eventflags",3]],["ordering",4]],[[["eventflags",3]],["bool",15]],[[]],[[["event",3]],[["dropresult",6],["event",3]]],[[],[["cudaresult",6],["f32",15]]],[[],["eventflags",3]],[[["eventflags",3]],["bool",15]],[[["eventstatus",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u32",15]],[["eventflags",3],["option",4]]],[[["u32",15]],["eventflags",3]],[[["u32",15]],["eventflags",3]],[[["intoiterator",8]],["eventflags",3]],[[]],[[["eventflags",3]]],[[["eventflags",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["eventflags",3]],["bool",15]],[[["eventflags",3]],["cudaresult",6]],[[],["eventflags",3]],[[["eventflags",3]],[["ordering",4],["option",4]]],[[],[["cudaresult",6],["eventstatus",4]]],[[["stream",3]],["cudaresult",6]],[[["eventflags",3]]],[[["eventflags",3],["bool",15]]],[[["eventflags",3]],["eventflags",3]],[[["eventflags",3]]],[[],["cudaresult",6]],[[]],[[]],[[["eventflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gridsize",3]],[[],["blocksize",3]],[[],["functionattribute",4]],[[]],[[]],[[]],[[["gridsize",3]],["bool",15]],[[["blocksize",3]],["bool",15]],[[["functionattribute",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["gridsize",3]],[[["gridsize",3]],["gridsize",3]],[[]],[[],["gridsize",3]],[[["u32",15]],["gridsize",3]],[[]],[[],["blocksize",3]],[[["u32",15]],["blocksize",3]],[[["blocksize",3]],["blocksize",3]],[[],["blocksize",3]],[[]],[[]],[[["functionattribute",4]],[["cudaresult",6],["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[["gridsize",3]],["bool",15]],[[["blocksize",3]],["bool",15]],[[["cacheconfig",4]],["cudaresult",6]],[[["sharedmemoryconfig",4]],["cudaresult",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["gridsize",3]],[[["u32",15]],["blocksize",3]],null,null,[[["u32",15]],["gridsize",3]],[[["u32",15]],["blocksize",3]],[[["u32",15]],["gridsize",3]],[[["u32",15]],["blocksize",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],null,[[],["devicepointer",3]],[[],["devicepointer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unifiedpointer",3]],[[],["unifiedpointer",3]],[[["stream",3]],["cudaresult",6]],[[["devicebox",3],["stream",3]],["cudaresult",6]],[[["stream",3],["devicebuffer",3]],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["stream",3],["deviceslice",3]],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["devicebox",3],["stream",3]],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["deviceslice",3],["stream",3]],["cudaresult",6]],[[["stream",3],["devicebuffer",3]],["cudaresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["devicechunks",3]],[[["usize",15]],["devicechunksmut",3]],[[],["devicechunks",3]],[[],["devicepointer",3]],[[],["unifiedpointer",3]],[[]],[[]],[[]],[[["unifiedbox",3]],["ordering",4]],[[["devicepointer",3]],["ordering",4]],[[["unifiedpointer",3]],["ordering",4]],[[],["cudaresult",6]],[[["devicebox",3]],["cudaresult",6]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["deviceslice",3]],["cudaresult",6]],[[["devicebuffer",3]],["cudaresult",6]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["devicebox",3]],["cudaresult",6]],[[["devicebuffer",3]],["cudaresult",6]],[[["deviceslice",3]],["cudaresult",6]],[[],["cudaresult",6]],[[],["usize",15]],[[],["usize",15]],[[["devicepointer",3]],["cudaresult",6]],[[],["cudaresult",6]],[[["unifiedpointer",3],["devicecopy",8]],["cudaresult",6]],[[["usize",15]],[["devicepointer",3],["cudaresult",6]]],[[["usize",15]],["cudaresult",6]],[[["usize",15]],[["unifiedpointer",3],["cudaresult",6]]],[[],["deviceslice",3]],[[]],[[]],[[]],[[],["deviceslice",3]],[[]],[[]],[[]],[[]],[[["devicebox",3]],[["dropresult",6],["devicebox",3]]],[[]],[[["devicebuffer",3]],[["dropresult",6],["devicebuffer",3]]],[[]],[[["lockedbuffer",3]],[["dropresult",6],["lockedbuffer",3]]],[[]],[[["unifiedbox",3]],[["unifiedbox",3],["dropresult",6]]],[[["unifiedbuffer",3]],[["dropresult",6],["unifiedbuffer",3]]],[[]],[[["unifiedbox",3]],["bool",15]],[[["devicepointer",3]],["bool",15]],[[["unifiedpointer",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["devicepointer",3]]],[[]],[[]],[[["devicepointer",3],["usize",15]],["devicebuffer",3]],[[["devicepointer",3],["usize",15]],["deviceslice",3]],[[["usize",15]],["lockedbuffer",3]],[[["unifiedpointer",3],["usize",15]],["unifiedbuffer",3]],[[["devicepointer",3],["usize",15]],["deviceslice",3]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["stream",3]],["cudaresult",6]],[[["unifiedpointer",3]]],[[["unifiedbox",3]],["bool",15]],[[["unifiedbox",3]],["bool",15]],[[]],[[]],[[]],[[["rangefrom",3],["usize",15]]],[[["usize",15],["range",3]]],[[["rangeinclusive",3],["usize",15]]],[[["rangefull",3]]],[[["rangeto",3],["usize",15]]],[[["rangetoinclusive",3],["usize",15]]],[[["rangeto",3],["usize",15]]],[[["rangetoinclusive",3],["usize",15]]],[[["rangeinclusive",3],["usize",15]]],[[["rangefrom",3],["usize",15]]],[[["rangefull",3]]],[[["usize",15],["range",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["devicebox",3]],["devicepointer",3]],[[]],[[]],[[["unifiedbox",3]],["unifiedpointer",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[["unifiedbox",3]],["bool",15]],[[["unifiedbox",3]]],[[],["usize",15]],[[["unifiedbox",3]],["bool",15]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],[["option",4],["deviceslice",3]]],[[],[["option",4],["deviceslice",3]]],[[],[["option",4],["deviceslice",3]]],[[],[["option",4],["deviceslice",3]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["devicepointer",3]],[[],["unifiedpointer",3]],[[["isize",15]],["devicepointer",3]],[[["isize",15]],["unifiedpointer",3]],[[["unifiedbox",3]],[["option",4],["ordering",4]]],[[["devicepointer",3]],[["option",4],["ordering",4]]],[[["unifiedpointer",3]],[["option",4],["ordering",4]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],[[],["devicepointer",3]],[[],["unifiedpointer",3]],[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],[[["isize",15]],["devicepointer",3]],[[["isize",15]],["unifiedpointer",3]],[[["usize",15]],["devicepointer",3]],[[["usize",15]],["unifiedpointer",3]],[[],["cudaresult",6]],[[["usize",15]],["cudaresult",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arrayobjectflags",3]],[[["arrayobjectflags",3]],["arrayobjectflags",3]],[[["arrayobjectflags",3]]],[[["arrayobjectflags",3]],["arrayobjectflags",3]],[[["arrayobjectflags",3]]],[[],["c_uint",6]],[[["arrayobjectflags",3]],["arrayobjectflags",3]],[[["arrayobjectflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arrayformat",4]],[[],["arrayobjectflags",3]],[[],["arraydescriptor",3]],[[]],[[]],[[]],[[["arrayobjectflags",3]],["ordering",4]],[[["arrayobjectflags",3]],["bool",15]],[[],["arrayobjectflags",3]],[[],["usize",15]],[[],[["cudaresult",6],["arraydescriptor",3]]],[[]],[[]],[[["arrayobject",3]],[["dropresult",6],["arrayobject",3]]],[[],["arrayobjectflags",3]],[[["arrayformat",4]],["bool",15]],[[["arrayobjectflags",3]],["bool",15]],[[["intoiterator",8]]],[[],["arrayobjectflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["arrayformat",4]],[[]],[[]],[[]],[[]],[[["c_uint",6]],[["option",4],["arrayobjectflags",3]]],[[["c_uint",6]],["arrayobjectflags",3]],[[["c_uint",6]],["arrayobjectflags",3]],[[["arraydescriptor",3]],["cudaresult",6]],[[["arrayformat",4]]],[[["intoiterator",8]],["arrayobjectflags",3]],[[["cuarray_format",4]]],[[["cuda_array3d_descriptor",6]]],[[]],[[],["usize",15]],[[["arrayobjectflags",3]]],[[["arrayobjectflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["arrayobjectflags",3]],["bool",15]],[[["arrayformat",4],["c_uint",6]],["cudaresult",6]],[[]],[[["arrayformat",4],["arrayobjectflags",3],["c_uint",6]]],[[["arrayformat",4],["usize",15],["c_uint",6]],["cudaresult",6]],[[["arrayformat",4],["c_uint",6]],["cudaresult",6]],[[["arrayformat",4],["usize",15],["c_uint",6]],["cudaresult",6]],[[["arrayformat",4],["usize",15],["c_uint",6]],["cudaresult",6]],[[["arrayformat",4],["usize",15],["c_uint",6]],["cudaresult",6]],[[["arrayformat",4],["usize",15],["c_uint",6]],["cudaresult",6]],[[],["arrayobjectflags",3]],[[],["c_uint",6]],[[["arrayobjectflags",3]],[["ordering",4],["option",4]]],[[["arrayobjectflags",3]]],[[["arrayobjectflags",3],["bool",15]]],[[["usize",15]]],[[]],[[["arrayobjectflags",3]]],[[["arrayformat",4]]],[[["usize",15]]],[[["c_uint",6]]],[[["usize",15]]],[[["arrayobjectflags",3]],["arrayobjectflags",3]],[[["arrayobjectflags",3]]],[[]],[[]],[[]],[[],["cuarray_format",4]],[[["arrayobjectflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[],["cudaresult",6]],[[],["cudaresult",6]],[[["module",3]],[["module",3],["dropresult",6]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["cstr",3]],[["function",3],["cudaresult",6]]],[[["cstr",3]],[["symbol",3],["cudaresult",6]]],[[]],[[]],[[["cstr",3]],[["cudaresult",6],["module",3]]],[[["cstr",3]],[["cudaresult",6],["module",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["cudaresult",6]],[[],["cudaresult",6]],null,null,null,null,null,null,[[["box",3]],["cudaresult",6]],[[],["streamflags",3]],[[],["streamwaiteventflags",3]],[[["streamflags",3]],["streamflags",3]],[[["streamwaiteventflags",3]],["streamwaiteventflags",3]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[["streamflags",3]],["streamflags",3]],[[["streamwaiteventflags",3]],["streamwaiteventflags",3]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[],["u32",15]],[[],["u32",15]],[[["streamflags",3]],["streamflags",3]],[[["streamwaiteventflags",3]],["streamwaiteventflags",3]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamflags",3]],[[],["streamwaiteventflags",3]],[[]],[[]],[[["streamflags",3]],["ordering",4]],[[["streamwaiteventflags",3]],["ordering",4]],[[["streamflags",3]],["bool",15]],[[["streamwaiteventflags",3]],["bool",15]],[[]],[[["stream",3]],[["stream",3],["dropresult",6]]],[[],["streamflags",3]],[[],["streamwaiteventflags",3]],[[["streamflags",3]],["bool",15]],[[["streamwaiteventflags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u32",15]],[["streamflags",3],["option",4]]],[[["u32",15]],[["streamwaiteventflags",3],["option",4]]],[[["u32",15]],["streamflags",3]],[[["u32",15]],["streamwaiteventflags",3]],[[["u32",15]],["streamflags",3]],[[["u32",15]],["streamwaiteventflags",3]],[[["intoiterator",8]],["streamflags",3]],[[["intoiterator",8]],["streamwaiteventflags",3]],[[],[["streamflags",3],["cudaresult",6]]],[[],[["cudaresult",6],["i32",15]]],[[]],[[]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[["streamflags",3]],["bool",15]],[[["streamwaiteventflags",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["streamflags",3]],["bool",15]],[[["streamwaiteventflags",3]],["bool",15]],[[["option",4],["streamflags",3],["i32",15]],["cudaresult",6]],[[],["streamflags",3]],[[],["streamwaiteventflags",3]],[[["streamflags",3]],[["ordering",4],["option",4]]],[[["streamwaiteventflags",3]],[["ordering",4],["option",4]]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[["bool",15],["streamflags",3]]],[[["bool",15],["streamwaiteventflags",3]]],[[["streamflags",3]],["streamflags",3]],[[["streamwaiteventflags",3]],["streamwaiteventflags",3]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[],["cudaresult",6]],[[]],[[]],[[["streamflags",3]]],[[["streamwaiteventflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["streamwaiteventflags",3],["event",3]],["cudaresult",6]]],"p":[[3,"CudaFlags"],[3,"CudaApiVersion"],[4,"SharedMemoryConfig"],[4,"ResourceLimit"],[3,"ContextFlags"],[4,"CacheConfig"],[3,"Context"],[3,"UnownedContext"],[3,"ContextStack"],[3,"StreamPriorityRange"],[3,"CurrentContext"],[4,"DeviceAttribute"],[3,"Device"],[3,"Devices"],[4,"CudaError"],[3,"EventFlags"],[4,"EventStatus"],[3,"Event"],[4,"FunctionAttribute"],[3,"GridSize"],[3,"BlockSize"],[3,"Function"],[3,"DevicePointer"],[3,"UnifiedPointer"],[3,"DeviceBox"],[3,"DeviceSlice"],[3,"LockedBuffer"],[3,"UnifiedBox"],[3,"UnifiedBuffer"],[8,"AsyncCopyDestination"],[3,"DeviceBuffer"],[3,"DeviceChunks"],[3,"DeviceChunksMut"],[8,"CopyDestination"],[3,"ArrayObjectFlags"],[4,"ArrayFormat"],[3,"ArrayObject"],[3,"ArrayDescriptor"],[3,"Module"],[3,"Symbol"],[3,"StreamFlags"],[3,"StreamWaitEventFlags"],[3,"Stream"]]},\
"rustacuda_core":{"doc":"RustaCUDA-core is a minimal subset of RustaCUDA which is …","t":[8,24,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DeviceCopy","DeviceCopy","DevicePointer","UnifiedPointer","add","add","as_raw","as_raw","as_raw_mut","as_raw_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","is_null","is_null","null","null","offset","offset","partial_cmp","partial_cmp","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","wrap","wrap","wrapping_add","wrapping_add","wrapping_offset","wrapping_offset","wrapping_sub","wrapping_sub"],"q":["rustacuda_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Marker trait for types which can safely be copied to or …","","A pointer to device memory.","A pointer to unified memory.","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer (convenience for …","Returns the contained pointer as a raw pointer. The …","Returns the contained pointer as a raw pointer.","Returns the contained pointer as a mutable raw pointer. …","Returns the contained pointer as a mutable raw pointer.","","","","","","","","","","","","","","","","","","","","","Returns true if the pointer is null.","Returns true if the pointer is null.","Returns a null device pointer.","Returns a null unified pointer.","Calculates the offset from a device pointer.","Calculates the offset from a unified pointer.","","","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer (convenience for …","","","","","","","Wrap the given raw pointer in a DevicePointer. The given …","Wrap the given raw pointer in a UnifiedPointer. The given …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a device pointer using …","Calculates the offset from a unified pointer using …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …"],"i":[0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2],"f":[null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["devicepointer",3]],["ordering",4]],[[["unifiedpointer",3]],["ordering",4]],[[["devicepointer",3]],["bool",15]],[[["unifiedpointer",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["isize",15]]],[[["isize",15]]],[[["devicepointer",3]],[["option",4],["ordering",4]]],[[["unifiedpointer",3]],[["option",4],["ordering",4]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["isize",15]]],[[["isize",15]]],[[["usize",15]]],[[["usize",15]]]],"p":[[3,"DevicePointer"],[3,"UnifiedPointer"]]},\
"rustcoalescence":{"doc":"","t":[7,0,0,5,0,14,0,0,0,4,13,13,3,3,13,3,3,4,13,13,3,13,13,3,3,4,4,4,4,13,3,3,13,13,13,13,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,0,5,0,0,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,8,5,0,18,18,8,10],"n":["MINIMAL_LOGGER","args","cli","main","maps","match_scenario_algorithm","minimal_logger","reporter","tiff","Algorithm","AlmostInfinite","AlmostInfinite","CommandArgs","CommonArgs","FixMe","InMemoryArgs","InMemoryArgsRaw","MapLoadingMode","NonSpatial","NonSpatial","NonSpatialArgsRaw","OffByOne","Replay","ReplayArgs","ReplayArgsRaw","ReplayMode","RustcoalescenceArgs","Scenario","ScenarioRaw","Simulate","SimulateArgs","SimulateArgsRaw","SpatiallyExplicit","SpatiallyExplicit","SpatiallyImplicit","SpatiallyImplicit","Strict","Strict","WarnOnly","algorithm","algorithm","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","area","args","augment_clap","augment_clap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clap","clone","clone_into","common","default","default","deme","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_state","deserialize_state","deserialize_state","deserialize_state","deserialize_state_event_log","dispersal_map","dispersal_map","event_log","event_log","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_clap","from_clap","from_subcommand","habitat_map","habitat_map","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_subcommand","is_subcommand","loading_mode","log","logs","mode","parse","reporters","reporters","reporters","reporters","sample_percentage","sample_percentage","scenario","scenario","seed","seed","spatial","speciation_probability_per_generation","speciation_probability_per_generation","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_parse","try_parse","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","into_ron_args","try_parse_subcommand_arguments","replay","simulate","replay_with_logger","impl","monolithic","simulate_with_logger","simulate_with_logger_monolithic","fix_dispersal_map","fix_habitat_map","load_dispersal_map","load_habitat_map","MinimalLogger","approx_from","approx_into","borrow","borrow_mut","enabled","flush","from","into","log","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","DynamicReporterContext","approx_from","approx_into","borrow","borrow_mut","fmt","from","into","new","reporter","try_build","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","TiffDataType","load_map_from_tiff","private","BIT_WIDTH","SAMPLE_FORMAT","TiffDataType","decoding_buffer_from_data"],"q":["rustcoalescence","","","","","","","","","rustcoalescence::argsrustcoalescence::args::parse","","rustcoalescence::cli","","rustcoalescence::cli::replay","rustcoalescence::cli::simulate","","","rustcoalescence::cli::simulate::monolithic","rustcoalescence::maps","","","","rustcoalescence::minimal_logger","","","","","","","","","","","","","","","","","","rustcoalescence::reporter","","","","","","","","","","","","","","","","","","","rustcoalescence::tiff","","","rustcoalescence::tiff::private","","",""],"dransform the <code>command_args</code> into a RON <code>String</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Loads a 2D map from TIFF file at <code>path</code> with the data type <code>D</code>…","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,2,0,0,3,0,0,0,1,2,0,3,4,0,0,0,0,0,0,4,0,0,1,2,1,2,3,5,5,6,7,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,13,8,4,8,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,4,8,3,3,9,3,5,13,1,2,11,3,12,13,5,15,9,6,10,14,0,11,12,9,6,4,8,9,7,10,10,1,2,11,3,12,13,14,4,8,9,6,7,10,1,1,2,11,3,12,13,14,5,15,4,8,4,11,12,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,4,8,12,14,15,15,0,9,6,14,15,6,7,9,6,6,7,13,6,7,3,10,4,4,8,8,9,9,6,6,7,7,10,10,1,1,2,2,11,11,11,3,3,12,12,13,13,14,14,5,5,15,15,4,4,8,8,9,9,6,6,7,7,10,10,1,1,2,2,11,11,3,3,12,12,13,13,14,14,5,5,15,15,9,14,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,4,8,9,6,7,10,1,2,11,3,12,13,14,5,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,18,18,0,18],"f":[null,null,null,[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["app",3]],[[],["app",3]],[[],["maploadingmode",4]],[[]],null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["partition",3]],["result",4]],[[["partition",3]],["result",4]],[[["partition",3]],["result",4]],[[["partition",3]],["result",4]],[[["partition",3]],[["result",4],["option",4]]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scenarioraw",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]]],[[["argmatches",3]]],[[],["option",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["inmemoryargsraw",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["commandargs",3]],["result",6]],[[["commandargs",3]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commandargs",3]],["string",3]],[[["str",15],["str",15]],[["deserializestate",8],["partition",3],["result",6]]],null,null,[[["partitioning",8],["commandargs",3]],["result",6]],null,null,[[["box",3],["reporter",8],["scenarioargs",4],["localpartition",8],["commonargs",3]],["result",6]],[[["commandargs",3]],["result",6]],[[["array2d",3],["array2d",3]]],[[["array2d",3],["array2d",3]]],[[["path",3],["maploadingmode",4]],[["result",6],["array2d",3]]],[[["path",3],["array2d",3],["maploadingmode",4]],[["array2d",3],["result",6]]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[["metadata",3]],["bool",15]],[[]],[[]],[[]],[[["record",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["reporterpluginvec",3]]],null,[[],[["filteredreporter",3],["result",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,[[["path",3],["bool",15]],[["result",6],["array2d",3]]],null,null,null,null,[[],["decodingbuffer",4]]],"p":[[4,"Scenario"],[4,"ScenarioRaw"],[4,"MapLoadingMode"],[4,"RustcoalescenceArgs"],[4,"ReplayMode"],[3,"SimulateArgsRaw"],[3,"CommonArgs"],[3,"CommandArgs"],[3,"SimulateArgs"],[4,"Algorithm"],[3,"InMemoryArgs"],[3,"InMemoryArgsRaw"],[3,"NonSpatialArgsRaw"],[3,"ReplayArgs"],[3,"ReplayArgsRaw"],[3,"MinimalLogger"],[3,"DynamicReporterContext"],[8,"TiffDataType"]]},\
"rustcoalescence_algorithms":{"doc":"","t":[8,8,16,16,16,16,16,10],"n":["Algorithm","AlgorithmArguments","Arguments","Error","LineageReference","LineageStore","Rng","initialise_and_simulate"],"q":["rustcoalescence_algorithms","","","","","","",""],"d":["","","","","","","","Errors"],"i":[0,0,1,2,2,2,2,2],"f":[null,null,null,null,null,null,null,[[["iterator",8],["u64",15],["originpresampler",3]],["result",4]]],"p":[[8,"AlgorithmArguments"],[8,"Algorithm"]]},\
"rustcoalescence_algorithms_cuda":{"doc":"","t":[4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CudaAlgorithm","approx_from","approx_into","borrow","borrow_mut","from","initialise_and_simulate","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip"],"q":["rustcoalescence_algorithms_cuda","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["originpresampler",3],["u64",15],["iterator",8]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[4,"CudaAlgorithm"]]},\
"rustcoalescence_algorithms_cuda_kernel":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"rustcoalescence_algorithms_cuda_kernel_ptx_jit":{"doc":"","t":[14,0,0,0,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["compilePtxJITwithArguments","host","arguments","compiler","Cached","PtxJITCompiler","PtxJITResult","Recomputed","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","with_arguments"],"q":["rustcoalescence_algorithms_cuda_kernel_ptx_jit","","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host","","rustcoalescence_algorithms_cuda_kernel_ptx_jit::host::compiler","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cstr",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4]],["ptxjitresult",4]]],"p":[[4,"PtxJITResult"],[3,"PtxJITCompiler"]]},\
"rustcoalescence_algorithms_cuda_kernel_specialiser":{"doc":"","t":[14,14],"n":["rerun_if_specialisation_changed","specialise"],"q":["rustcoalescence_algorithms_cuda_kernel_specialiser",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"rustcoalescence_algorithms_independent":{"doc":"","t":[4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["IndependentAlgorithm","approx_from","approx_into","borrow","borrow_mut","from","initialise_and_simulate","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip"],"q":["rustcoalescence_algorithms_independent","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["originpresampler",3],["iterator",8],["u64",15]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[4,"IndependentAlgorithm"]]},\
"rustcoalescence_algorithms_monolithic":{"doc":"","t":[0,0,0,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["classical","gillespie","skipping_gillespie","ClassicalAlgorithm","approx_from","approx_into","borrow","borrow_mut","from","initialise_and_simulate","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","GillespieAlgorithm","approx_from","approx_into","borrow","borrow_mut","from","initialise_and_simulate","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","SkippingGillespieAlgorithm","approx_from","approx_into","borrow","borrow_mut","from","initialise_and_simulate","into","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip"],"q":["rustcoalescence_algorithms_monolithic","","","rustcoalescence_algorithms_monolithic::classical","","","","","","","","","","","","","","","","rustcoalescence_algorithms_monolithic::gillespie","","","","","","","","","","","","","","","","rustcoalescence_algorithms_monolithic::skipping_gillespie","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["originpresampler",3],["u64",15],["iterator",8]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["originpresampler",3],["u64",15],["iterator",8]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[["originpresampler",3],["u64",15],["iterator",8]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[4,"ClassicalAlgorithm"],[3,"GillespieAlgorithm"],[3,"SkippingGillespieAlgorithm"]]},\
"rustcoalescence_scenarios":{"doc":"","t":[16,16,16,16,16,16,16,16,8,8,16,16,0,10,10,10,10,0,10,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Arguments","Decomposition","DispersalSampler","Error","Habitat","LineageReference","LineageStore","OriginSampler","Scenario","ScenarioArguments","SpeciationProbability","TurnoverRate","almost_infinite","build","decompose","habitat","initialise","non_spatial","sample_habitat","spatially_explicit","spatially_implicit","AlmostInfiniteArguments","AlmostInfiniteScenario","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","build","decompose","deserialize","fmt","from","from","habitat","initialise","into","into","radius","sample_habitat","sigma","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","vzip","vzip","NonSpatialArguments","NonSpatialScenario","approx_from","approx_from","approx_into","approx_into","area","borrow","borrow","borrow_mut","borrow_mut","build","decompose","deme","deserialize","fmt","from","from","habitat","initialise","into","into","sample_habitat","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","vzip","vzip","InMemoryArguments","NonNegativeF64Error","SpatiallyExplicitScenario","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","decompose","dispersal_map","fmt","fmt","fmt","from","from","from","habitat","habitat_map","initialise","into","into","into","sample_habitat","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","vzip","vzip","vzip","SpatiallyImplicitArguments","SpatiallyImplicitScenario","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","build","decompose","deserialize","fmt","from","from","habitat","initialise","into","into","local_area","local_deme","meta_area","meta_deme","migration_probability_per_generation","sample_habitat","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","vzip","vzip"],"q":["rustcoalescence_scenarios","","","","","","","","","","","","","","","","","","","","","rustcoalescence_scenarios::almost_infinite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustcoalescence_scenarios::non_spatial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustcoalescence_scenarios::spatially_explicit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustcoalescence_scenarios::spatially_implicit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Inside rustcoalescence, I know that only specialised …","","","Errorsi":[1,2,2,2,2,2,2,2,0,0,2,2,0,2,2,2,2,0,2,0,0,0,0,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,3,3,4,4,3,4,3,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,0,0,5,6,5,6,6,5,6,5,6,5,5,6,6,6,5,6,5,5,5,6,5,5,5,6,6,5,5,6,6,5,6,5,6,5,6,5,6,0,0,0,7,8,9,7,8,9,7,8,9,7,8,9,7,7,8,8,9,9,7,8,9,7,8,7,7,8,9,7,9,7,7,8,8,9,9,7,7,8,8,9,9,7,8,9,7,8,9,7,8,9,7,8,9,0,0,10,11,10,11,10,11,10,11,10,10,11,11,10,11,10,10,10,11,11,11,11,11,11,10,10,10,11,11,10,10,11,11,10,11,10,11,10,11,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["nonzerou32",3],["u32",15]]],[[]],[[["positiveunitf64",3]],["result",4]],null,[[["originpresampler",3],["iterator",8]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[["nonzerou32",3],["u32",15]]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["positiveunitf64",3]],["result",4]],[[]],[[]],null,[[["originpresampler",3],["iterator",8]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[["nonzerou32",3],["u32",15]]],null,[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["positiveunitf64",3]],["result",4]],[[]],[[]],[[["originpresampler",3],["iterator",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonzerou32",3],["u32",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["positiveunitf64",3]],["result",4]],[[]],[[]],[[]],[[["originpresampler",3],["iterator",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[["nonzerou32",3],["u32",15]]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["positiveunitf64",3]],["result",4]],[[]],[[]],null,null,null,null,null,[[["originpresampler",3],["iterator",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]]],"p":[[8,"ScenarioArguments"],[8,"Scenario"],[3,"AlmostInfiniteScenario"],[3,"AlmostInfiniteArguments"],[3,"NonSpatialScenario"],[3,"NonSpatialArguments"],[3,"SpatiallyExplicitScenario"],[3,"InMemoryArguments"],[3,"NonNegativeF64Error"],[3,"SpatiallyImplicitScenario"],[3,"SpatiallyImplicitArguments"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};