(function() {var implementors = {};
implementors["rustcoalescence_algorithms_cuda"] = [{"text":"impl&lt;O:&nbsp;<a class=\"trait\" href=\"rustcoalescence_scenarios/trait.Scenario.html\" title=\"trait rustcoalescence_scenarios::Scenario\">Scenario</a>&lt;<a class=\"struct\" href=\"necsim_impls_cuda/cogs/rng/struct.CudaRng.html\" title=\"struct necsim_impls_cuda::cogs::rng::CudaRng\">CudaRng</a>&lt;<a class=\"struct\" href=\"necsim_impls_no_std/cogs/rng/wyhash/struct.WyHash.html\" title=\"struct necsim_impls_no_std::cogs::rng::wyhash::WyHash\">WyHash</a>&gt;&gt;&gt; <a class=\"trait\" href=\"rustcoalescence_algorithms/trait.Algorithm.html\" title=\"trait rustcoalescence_algorithms::Algorithm\">Algorithm</a>&lt;O&gt; for <a class=\"enum\" href=\"rustcoalescence_algorithms_cuda/enum.CudaAlgorithm.html\" title=\"enum rustcoalescence_algorithms_cuda::CudaAlgorithm\">CudaAlgorithm</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.Habitat\" title=\"type rustcoalescence_scenarios::Scenario::Habitat\">Habitat</a>: <a class=\"trait\" href=\"rust_cuda/common/trait.RustToCuda.html\" title=\"trait rust_cuda::common::RustToCuda\">RustToCuda</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.DispersalSampler\" title=\"type rustcoalescence_scenarios::Scenario::DispersalSampler\">DispersalSampler</a>: <a class=\"trait\" href=\"rust_cuda/common/trait.RustToCuda.html\" title=\"trait rust_cuda::common::RustToCuda\">RustToCuda</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.TurnoverRate\" title=\"type rustcoalescence_scenarios::Scenario::TurnoverRate\">TurnoverRate</a>: <a class=\"trait\" href=\"rust_cuda/common/trait.RustToCuda.html\" title=\"trait rust_cuda::common::RustToCuda\">RustToCuda</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.SpeciationProbability\" title=\"type rustcoalescence_scenarios::Scenario::SpeciationProbability\">SpeciationProbability</a>: <a class=\"trait\" href=\"rust_cuda/common/trait.RustToCuda.html\" title=\"trait rust_cuda::common::RustToCuda\">RustToCuda</a>,&nbsp;</span>","synthetic":false,"types":["rustcoalescence_algorithms_cuda::CudaAlgorithm"]}];
implementors["rustcoalescence_algorithms_independent"] = [{"text":"impl&lt;O:&nbsp;<a class=\"trait\" href=\"rustcoalescence_scenarios/trait.Scenario.html\" title=\"trait rustcoalescence_scenarios::Scenario\">Scenario</a>&lt;<a class=\"struct\" href=\"necsim_impls_no_std/cogs/rng/wyhash/struct.WyHash.html\" title=\"struct necsim_impls_no_std::cogs::rng::wyhash::WyHash\">WyHash</a>&gt;&gt; <a class=\"trait\" href=\"rustcoalescence_algorithms/trait.Algorithm.html\" title=\"trait rustcoalescence_algorithms::Algorithm\">Algorithm</a>&lt;O&gt; for <a class=\"enum\" href=\"rustcoalescence_algorithms_independent/enum.IndependentAlgorithm.html\" title=\"enum rustcoalescence_algorithms_independent::IndependentAlgorithm\">IndependentAlgorithm</a>","synthetic":false,"types":["rustcoalescence_algorithms_independent::IndependentAlgorithm"]}];
implementors["rustcoalescence_algorithms_monolithic"] = [{"text":"impl&lt;O:&nbsp;<a class=\"trait\" href=\"rustcoalescence_scenarios/trait.Scenario.html\" title=\"trait rustcoalescence_scenarios::Scenario\">Scenario</a>&lt;<a class=\"struct\" href=\"necsim_impls_std/cogs/rng/pcg/struct.Pcg.html\" title=\"struct necsim_impls_std::cogs::rng::pcg::Pcg\">Pcg</a>, LineageReference = <a class=\"struct\" href=\"necsim_impls_no_std/cogs/lineage_reference/in_memory/struct.InMemoryLineageReference.html\" title=\"struct necsim_impls_no_std::cogs::lineage_reference::in_memory::InMemoryLineageReference\">InMemoryLineageReference</a>, TurnoverRate = <a class=\"struct\" href=\"necsim_impls_no_std/cogs/turnover_rate/uniform/struct.UniformTurnoverRate.html\" title=\"struct necsim_impls_no_std::cogs::turnover_rate::uniform::UniformTurnoverRate\">UniformTurnoverRate</a>&gt;&gt; <a class=\"trait\" href=\"rustcoalescence_algorithms/trait.Algorithm.html\" title=\"trait rustcoalescence_algorithms::Algorithm\">Algorithm</a>&lt;O&gt; for <a class=\"enum\" href=\"rustcoalescence_algorithms_monolithic/classical/enum.ClassicalAlgorithm.html\" title=\"enum rustcoalescence_algorithms_monolithic::classical::ClassicalAlgorithm\">ClassicalAlgorithm</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.LineageStore\" title=\"type rustcoalescence_scenarios::Scenario::LineageStore\">LineageStore</a>: <a class=\"trait\" href=\"necsim_core/cogs/lineage_store/trait.LocallyCoherentLineageStore.html\" title=\"trait necsim_core::cogs::lineage_store::LocallyCoherentLineageStore\">LocallyCoherentLineageStore</a>&lt;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.Habitat\" title=\"type rustcoalescence_scenarios::Scenario::Habitat\">Habitat</a>, <a class=\"struct\" href=\"necsim_impls_no_std/cogs/lineage_reference/in_memory/struct.InMemoryLineageReference.html\" title=\"struct necsim_impls_no_std::cogs::lineage_reference::in_memory::InMemoryLineageReference\">InMemoryLineageReference</a>&gt;,&nbsp;</span>","synthetic":false,"types":["rustcoalescence_algorithms_monolithic::classical::ClassicalAlgorithm"]},{"text":"impl&lt;O:&nbsp;<a class=\"trait\" href=\"rustcoalescence_scenarios/trait.Scenario.html\" title=\"trait rustcoalescence_scenarios::Scenario\">Scenario</a>&lt;<a class=\"struct\" href=\"necsim_impls_std/cogs/rng/pcg/struct.Pcg.html\" title=\"struct necsim_impls_std::cogs::rng::pcg::Pcg\">Pcg</a>, LineageReference = <a class=\"struct\" href=\"necsim_impls_no_std/cogs/lineage_reference/in_memory/struct.InMemoryLineageReference.html\" title=\"struct necsim_impls_no_std::cogs::lineage_reference::in_memory::InMemoryLineageReference\">InMemoryLineageReference</a>&gt;&gt; <a class=\"trait\" href=\"rustcoalescence_algorithms/trait.Algorithm.html\" title=\"trait rustcoalescence_algorithms::Algorithm\">Algorithm</a>&lt;O&gt; for <a class=\"struct\" href=\"rustcoalescence_algorithms_monolithic/gillespie/struct.GillespieAlgorithm.html\" title=\"struct rustcoalescence_algorithms_monolithic::gillespie::GillespieAlgorithm\">GillespieAlgorithm</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.LineageStore\" title=\"type rustcoalescence_scenarios::Scenario::LineageStore\">LineageStore</a>: <a class=\"trait\" href=\"necsim_core/cogs/lineage_store/trait.GloballyCoherentLineageStore.html\" title=\"trait necsim_core::cogs::lineage_store::GloballyCoherentLineageStore\">GloballyCoherentLineageStore</a>&lt;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.Habitat\" title=\"type rustcoalescence_scenarios::Scenario::Habitat\">Habitat</a>, <a class=\"struct\" href=\"necsim_impls_no_std/cogs/lineage_reference/in_memory/struct.InMemoryLineageReference.html\" title=\"struct necsim_impls_no_std::cogs::lineage_reference::in_memory::InMemoryLineageReference\">InMemoryLineageReference</a>&gt;,&nbsp;</span>","synthetic":false,"types":["rustcoalescence_algorithms_monolithic::gillespie::GillespieAlgorithm"]},{"text":"impl&lt;O:&nbsp;<a class=\"trait\" href=\"rustcoalescence_scenarios/trait.Scenario.html\" title=\"trait rustcoalescence_scenarios::Scenario\">Scenario</a>&lt;<a class=\"struct\" href=\"necsim_impls_std/cogs/rng/pcg/struct.Pcg.html\" title=\"struct necsim_impls_std::cogs::rng::pcg::Pcg\">Pcg</a>, LineageReference = <a class=\"struct\" href=\"necsim_impls_no_std/cogs/lineage_reference/in_memory/struct.InMemoryLineageReference.html\" title=\"struct necsim_impls_no_std::cogs::lineage_reference::in_memory::InMemoryLineageReference\">InMemoryLineageReference</a>&gt;&gt; <a class=\"trait\" href=\"rustcoalescence_algorithms/trait.Algorithm.html\" title=\"trait rustcoalescence_algorithms::Algorithm\">Algorithm</a>&lt;O&gt; for <a class=\"struct\" href=\"rustcoalescence_algorithms_monolithic/skipping_gillespie/struct.SkippingGillespieAlgorithm.html\" title=\"struct rustcoalescence_algorithms_monolithic::skipping_gillespie::SkippingGillespieAlgorithm\">SkippingGillespieAlgorithm</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.LineageStore\" title=\"type rustcoalescence_scenarios::Scenario::LineageStore\">LineageStore</a>: <a class=\"trait\" href=\"necsim_core/cogs/lineage_store/trait.GloballyCoherentLineageStore.html\" title=\"trait necsim_core::cogs::lineage_store::GloballyCoherentLineageStore\">GloballyCoherentLineageStore</a>&lt;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.Habitat\" title=\"type rustcoalescence_scenarios::Scenario::Habitat\">Habitat</a>, <a class=\"struct\" href=\"necsim_impls_no_std/cogs/lineage_reference/in_memory/struct.InMemoryLineageReference.html\" title=\"struct necsim_impls_no_std::cogs::lineage_reference::in_memory::InMemoryLineageReference\">InMemoryLineageReference</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.DispersalSampler\" title=\"type rustcoalescence_scenarios::Scenario::DispersalSampler\">DispersalSampler</a>: <a class=\"trait\" href=\"necsim_core/cogs/dispersal_sampler/trait.SeparableDispersalSampler.html\" title=\"trait necsim_core::cogs::dispersal_sampler::SeparableDispersalSampler\">SeparableDispersalSampler</a>&lt;O::<a class=\"type\" href=\"rustcoalescence_scenarios/trait.Scenario.html#associatedtype.Habitat\" title=\"type rustcoalescence_scenarios::Scenario::Habitat\">Habitat</a>, <a class=\"struct\" href=\"necsim_impls_std/cogs/rng/pcg/struct.Pcg.html\" title=\"struct necsim_impls_std::cogs::rng::pcg::Pcg\">Pcg</a>&gt;,&nbsp;</span>","synthetic":false,"types":["rustcoalescence_algorithms_monolithic::skipping_gillespie::SkippingGillespieAlgorithm"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()